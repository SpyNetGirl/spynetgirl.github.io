{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SpyNetGirl Blog","text":"<ul> <li> <p> Harden System Security App</p> <p>Harden System Security is a modern secure lightweight application that can help you harden, secure and lock down your system. It is designed to be user-friendly and efficient, providing a range of features to enhance the security of your Windows operating system. It always stays up to date with the latest security patches and provides constant and consistent maintenance and support.</p> <p> Access the Resource</p> </li> <li> <p> Website Based on GitHub Readme</p> <p>An interactive beautiful website that displays the same content as the GitHub readme, offers easy search functionality and more!</p> <p> Access the Resource</p> </li> <li> <p> AppControl Manager</p> <p>AppControl Manager is a modern secure app that provides easy to use graphical user interface to manage App Control and Code Integrity on your local or remote devices. It always stays up to date with the latest security patches and provides constant and consistent maintenance and support.</p> <p> Access the Resource</p> </li> <li> <p> Privacy, Anonymity, Compartmentalization</p> <p>Explores the topics of Privacy, Anonymity and Compartmentalization. These concepts are interrelated and essential for protecting one's identity</p> <p> Access the Resource</p> </li> <li> <p> MS Edge Features</p> <p>A repository that lists Microsoft Edge insider Canary channel features before anyone else - Used by enthusiasts who are looking for trying out bleeding edge features first</p> <p> Access the Resource</p> </li> <li> <p> Official IANA IP blocks</p> <p>Grabs the latest lists from the 5 Global Registry for each continent and creates country specific TEXT, CSV and JSON files based off them and stores them in this repository - runs every day at 22:00 UTC 00:00</p> <p> Access the Resource</p> </li> <li> <p> Microsoft Domains</p> <p>A repository that lists all active Microsoft root domains, no URLs and no sub-domains, for the purpose of Whitelisting in various systems and apps. It can facilitate the implementation of strict host-based firewall rules, for example, in a corporate environment.</p> <p> Access the Resource</p> </li> </ul>"},{"location":"AppControl%20Manager/Allow%20New%20Apps/","title":"Allow New Apps","text":""},{"location":"AppControl%20Manager/Allow%20New%20Apps/#description","title":"Description","text":"<p>Use this page in AppControl Manager on a system where Application Control policies are already deployed.</p> <p>When you need to install a new application, this page provides an intuitive way to temporarily enable Audit mode in your existing deployed base policy. This allows the installation of the app while ensuring the base policy automatically reverts to Enforced mode immediately afterward.</p> <p>During Audit mode, AppControl Manager captures all relevant Code Integrity and AppLocker events, analyzes them, and presents detailed insights in an organized view. You can also navigate to the specific folder path(s) where the application was installed, enabling the app to scan and display the contents on a separate page.</p> <p>The compiled data, scanned files and recorded events, are presented to you for review, filter, sort, and manage. Once you're satisfied, you can seamlessly convert these into a single Supplemental policy ready for deployment.</p> <p>While much of the process is automated, you remain in full control. With just a few clicks, you can fine-tune and manage your App Control policy efficiently.</p> <p>Rest assured, no unauthorized software or malware can make its way into your Supplemental policy. Every file and event is accompanied by highly detailed information, eliminating any guesswork and ensuring only trusted elements are included.</p> <p>If something like a power outage occurs during the audit mode phase, on the next reboot, the enforced mode base policy will be automatically deployed using a scheduled task that acts as a \"snapback guarantee\".</p> <p>Note</p> <p>This feature can also detect and create supplemental policy for Kernel protected files, such as the executables of games installed using Xbox app. Make sure you run the game while the base policy is deployed in Audit mode so that it can capture those executables.</p> <p>Tip</p> <p>You can use both Signed and Unsigned App Control policies. The app will automatically detect the signing status of the XML policy file that you select and prompt for any additional information required.</p> <p></p>"},{"location":"AppControl%20Manager/Allow%20New%20Apps/#other-use-cases","title":"Other Use Cases","text":"<p>You can also use this page to create supplemental policies for every program you wish to deploy to your endpoints. For example, if your company needs to allow the employees to use 20 programs such as Photoshop, AutoDesk, Visual Studio etc., you can follow these steps:</p> <ol> <li> <p>Prepare a clean VM (Virtual Machine such as Hyper-V) by installing the latest OS version on it and updating it. After update and restart of the guest OS in the VM, Install the AppControl Manager on it and shut it down. Now create a Hyper-V checkpoint. You will use this checkpoint to return back to this clean state.</p> </li> <li> <p>Use AppControl Manager to deploy a base policy such as <code>Allow Microsoft</code>.</p> </li> <li> <p>Use the <code>Allow New Apps</code> feature to browse for the base policy and enter the name of the program you wish to create a supplemental policy for.</p> </li> <li> <p>In <code>Step 2</code>, the Audit mode is enabled, so start installing your program. After installation is completed, run the program, use it a bit and close it.</p> </li> <li> <p>Browse for the installation directories of the installed program and go to <code>Step 3</code>.</p> </li> <li> <p>The AppControl Manager will begin redeploying the base policy in enforced mode and starts scanning the directories you selected and any audit events that were generated.</p> </li> <li> <p>The detected and captured data will be presented to you in 2 different pages. Review them, search through them and remove any of them that you don't want to be included in the supplemental policy.</p> </li> <li> <p>Once you're done reviewing, create the supplemental policy and deploy it on the system. Use the FilePublisher level which will create maintainable supplemental policies and will use signature(s) of the signed files and hashes of the unsigned files.</p> </li> <li> <p>After the policy is deployed, try starting your program again and make sure it 100% works and all of its features are usable.</p> </li> <li> <p>If one of the files of the program still gets blocked, that means you didn't browse for the directory where that file is located or you didn't use the program's feature that would trigger audit logs to be generated for its files. AppControl Manager offers multiple features that you can use to generate supplemental policies and then merge them all into one. For example, you can create a supplemental policy just from the event logs.</p> </li> </ol> <p></p>"},{"location":"AppControl%20Manager/Allow%20New%20Apps/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Supplemental Policy Name: Enter the name for the Supplemental policy that will be created. Preferably use the name of the app you're trying to install so that you will be able to recognize the policy in System Information page easily.</p> </li> <li> <p>Browse for a Policy XML file: Use this button to browse for the path to the base policy file.</p> </li> <li> <p>Log Size: Use this number box to increase or decrease the maximum capacity of the <code>Code Integrity/Operational</code> logs. The bigger the number, the more events will be captured without being overwritten.</p> </li> <li> <p>Scan Level: You can choose from different scan levels. Refer to this page for all the information about them.</p> </li> <li> <p>Browse for folders: Use this button in Step 2 to browse for the installation directories of the app(s) you installed. This will help improve the accuracy of the supplemental policy that will be created. If for some reason you cannot locate the installation directory of the app you installed, ensure you start the app after installation, use it as you normally would so that audit logs will be generated for all of its files and components. These audit logs will then be displayed to you in the <code>Review the Event Logs</code> tab.</p> </li> <li> <p>Deploy After Creation: If toggled, only the supplemental policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/","title":"AppControl Manager","text":"<p>AppControl Manager is a modern secure app that provides easy to use graphical user interface to manage App Control and Code Integrity on your local or remote devices.</p> <p>It always stays up to date with the latest security patches and provides constant and consistent maintenance and support.</p> <p>\u26a1What is App Control? Check Out This Article \u26a1</p> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#how-to-install-or-update-the-app","title":"How To Install or Update The App","text":""},{"location":"AppControl%20Manager/AppControl%20Manager/#use-the-microsoft-store","title":"Use The Microsoft Store","text":"<p>AppControl Manager is available on the Microsoft Store. This is the easiest and recommended way to install it. You will use Microsoft Store to receive future updates.</p> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#use-github-packages","title":"Use GitHub Packages","text":"<p>Use the following PowerShell command as Admin, it will automatically download the latest MSIXBundle file from this repository's release page and install it for you.</p> <pre><code>(irm 'https://raw.githubusercontent.com/HotCakeX/Harden-Windows-Security/main/Harden-Windows-Security.ps1')+'AppControl'|iex\n</code></pre> <p>Tip</p> <p>AppControl Manager supports auto-update and has built-in updater.</p> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#use-winget","title":"Use Winget","text":"<p>You can utilize Winget to automate the installation of the AppControl Manager. It will use the Microsoft Store source.</p> <pre><code>winget install --id 9PNG1JDDTGP8 --exact --accept-package-agreements --accept-source-agreements --force --source msstore\n</code></pre> <p></p> <p>Please feel free to open a discussion if you have any questions about the build process, security, how to use or have feedbacks. Source code on this repository</p> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#supported-operation-systems","title":"Supported Operation Systems","text":"<ul> <li>Windows 11 24H2</li> <li>Windows 11 23H2</li> <li>Windows 11 22H2</li> <li>Windows Server 2025</li> </ul>"},{"location":"AppControl%20Manager/AppControl%20Manager/#preview-of-the-app","title":"Preview of the App","text":""},{"location":"AppControl%20Manager/AppControl%20Manager/#technical-details-of-the-app","title":"Technical Details of The App","text":"<ul> <li>Secure and transparent development and build process.</li> <li>Built using WinUI3 / XAML / C#.</li> <li>Built using the latest .NET SDK.</li> <li>Powered by the WinAppSDK (formerly Project Reunion).</li> <li>Packaged with the modern MSIX format.</li> <li>Incorporates the Mica material design for backgrounds.</li> <li>Adopts the Windows 11 Fluent design system.</li> <li>Fast execution and startup time.</li> <li>0 required dependency.</li> <li>0 Third-party library or file used.</li> <li>0 Telemetry or data collection.</li> <li>0 Windows Registry changes.</li> <li>100% clean uninstallation.</li> <li>100% open-source and free to use.</li> <li>Natively supports X64 and ARM64 architectures.</li> <li>Full Trimming and Native AOT support.</li> </ul>"},{"location":"AppControl%20Manager/AppControl%20Manager/#features-implemented-so-far","title":"Features Implemented So Far","text":"<ul> <li> Create AppControl Policy</li> <li> Create Supplemental Policy</li> <li> System Information</li> <li> Configure Policy Rule Options</li> <li> Policy Editor</li> <li> Simulation</li> <li> Allow New Apps</li> <li> Build New Certificate</li> <li> Create Policy From Event Logs</li> <li> Create Policy From MDE Advanced Hunting</li> <li> Create Deny Policy</li> <li> Merge App Control Policies</li> <li> Deploy App Control Policy</li> <li> Get Code Integrity Hashes</li> <li> Get Secure Policy Settings</li> <li> Update</li> <li> Sidebar</li> <li> Validate Policies</li> <li> View File Certificates</li> <li> Microsoft Graph</li> </ul> <p>More features will come very quickly in the near future.</p> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#supported-languages","title":"Supported Languages","text":"<p>The AppControl Manager fully supports the following languages. You can request for more languages to be supported.</p> <ul> <li> English</li> <li> Hebrew</li> <li> Greek</li> <li> Hindi</li> <li> Malayalam</li> <li> Arabic</li> <li> Spanish</li> <li> Polish</li> </ul> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#security","title":"Security","text":"<p>Important</p> <p>The AppControl Manager application is built publicly using a GitHub Workflow and uploaded to the GitHub release. The action uses Artifact Attestation and SBOM (Software Bill of Materials) generation to comply with the highest security standards such as SLSA level 3. The source code as well as the package is uploaded to Virus Total automatically. Also GitHub's CodeQL Advanced workflow with extended security model scans the entire repository. All of the dependencies of any project in this repository are uploaded to GitHub and are available in the Dependency Graph.</p> <p>Note</p> <p>United States Veteran Affairs (VA) Technical Reference Model regarding AppControl Manager.</p> <p>Security is paramount when selecting any application designed to safeguard your systems. The last thing you want is a security-focused tool that inadvertently expands your attack surface or one that doesn't prioritize security at its core.</p> <p>AppControl Manager is engineered with a security-first approach from the ground up. It's crafted specifically for defense teams, yet its design has been rigorously shaped with a keen awareness of potential offensive strategies, ensuring resilience against emerging threats.</p> <ul> <li> <p>The AppControl Manager does not rely on any 3rd party component or dependency. All the logics are built securely and specifically for the app.</p> </li> <li> <p>Any file(s) the AppControl Manager ever produces, uses or expects is only from an Administrator-protected location in <code>C:\\Program Files\\AppControl Manager</code>.</p> </li> <li> <p>The AppControl Manager supports process mitigations / Exploit Protections such as: <code>Blocking low integrity images</code>, <code>Blocking remote images</code>, <code>Blocking untrusted fonts</code>, <code>Strict Control Flow Guard</code>, <code>Disabling extension points</code>, <code>Export Address Filtering</code>, <code>Hardware enforced stack protection</code>, <code>Import Address Filtering</code>, <code>Validate handle usage</code>, <code>Validate stack integrity</code>.</p> </li> <li> <p>The AppControl Manager always uses the latest .NET SDK and NuGet package versions, ensuring all the security patches released by Microsoft will be included.</p> </li> <li> <p>The entire codebase is thoroughly commented, allowing code reviewers to effortlessly examine and verify every aspect of AppControl Manager's source code.</p> </li> <li> <p>AppControl Manager leverages MSAL from Microsoft to manage Microsoft 365 authentications. This industry-standard library adheres to best practices for secure authentication token management.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#why-do-certain-features-of-the-appcontrol-manager-require-administrator-privileges","title":"Why Do Certain Features of The AppControl Manager Require Administrator Privileges?","text":"<ul> <li> <p>AppControl Manager operates exclusively within the \"AppControl Manager\" directory located in the <code>Program Files</code> directory for all read and write operations. No data is accessed or modified outside this directory. This design ensures that non-elevated processes, unauthorized software, or unprivileged malware on the system cannot alter the policies you create, the certificates you generate, or the CIP binary files you deploy.</p> </li> <li> <p>AppControl Manager employs MediumIL (Medium Integrity Level) when running as an Administrator, ensuring that non-elevated processes cannot access its memory or attach debuggers. Given that the app handles sensitive information\u2014such as Microsoft 365 authentication tokens stored in private variables\u2014this design decision safeguards these tokens from unauthorized, unelevated access or tampering.</p> </li> <li> <p>Administrator privileges are required for scanning Code Integrity and AppLocker logs. These scans are integral to several application functions, providing enhanced insights and enabling the generation of precise supplemental policies tailored to your needs.</p> </li> <li> <p>Deploying, removing, modifying, or checking the status of policies also necessitates Administrator privileges to ensure secure and reliable execution of these operations.</p> </li> <li> <p>Creating scheduled tasks that run as SYSTEM account requires Administrator privilege. This feature is used in places such as Creating auto-update task for Microsoft Recommended driver block rules or when Allowing new apps.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#where-are-the-temporary-files-saved-to","title":"Where Are The Temporary Files Saved To?","text":"<p>Every new instance of the app that is launched creates a new <code>StagingArea</code> directory in the location below (if needed) with the Date and Time of that moment appended to it:</p> <pre><code>C:\\Program Files\\AppControl Manager\\StagingArea[+ current Date Time]\n</code></pre> <p>Additionally, each applicable feature of the AppControl Manager that you start using will generate a uniquely named subdirectory within the <code>StagingArea</code> to store its temporary files (if needed). Upon closing the application, the entire StagingArea directory, along with its contents, will be automatically deleted. These files are utilized by the application for tasks such as creating policies, storing temporary scan results, and other related functions.</p> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#where-is-the-user-configurations-directory","title":"Where Is The User Configurations Directory?","text":"<p>The User Configurations directory is located in the following location:</p> <pre><code>C:\\Program Files\\AppControl Manager\n</code></pre> <p>Everything the AppControl Manager creates/generates will be saved in that directory or one of its sub-directories, such as:</p> <ul> <li>XML policy files</li> <li>CIP files</li> <li>Generated certificates</li> <li>Automatically acquired SignTool.exe</li> <li>Logs</li> <li>User Configurations JSON file</li> <li>Temporary files (Staging Areas)</li> </ul> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#which-urls-does-the-appcontrol-manager-connect-to","title":"Which URLs does the AppControl Manager Connect To?","text":"<p>Here is the complete list of all of the URLs the AppControl Manager application connects to (or is mentioned in the User Interface) with proper justification for each of them.</p> <ul> <li>Privacy Policy for the AppControl Manager</li> </ul> <p></p>   | URL | Justification                   | |:--------:|:-----------------------------:| | https://api.nuget.org/v3-flatcontainer/ | To access Microsoft NuGet repository to download SignTool.exe | | https://aka.ms/VulnerableDriverBlockList | To download the Microsoft Recommended Drivers Block List | | https://api.github.com/repos/MicrosoftDocs/windows-itpro-docs/commits | To check the latest commit details of the Microsoft Recommended Drivers Block List and display them to the user on the UI | | https://raw.githubusercontent.com/MicrosoftDocs/windows-itpro-docs/refs/heads/public/windows/security/application-security/application-control/app-control-for-business/design/applications-that-can-bypass-appcontrol.md | Source for the Microsoft Recommended User-Mode Block Rules | | https://raw.githubusercontent.com/MicrosoftDocs/windows-itpro-docs/refs/heads/public/windows/security/application-security/application-control/app-control-for-business/design/microsoft-recommended-driver-block-rules.md | Source for the Microsoft Recommended Drivers Block Rules | | https://raw.githubusercontent.com/HotCakeX/Harden-Windows-Security/refs/heads/main/AppControl%20Manager/MSIXBundleDownloadURL.txt | The file on this repository that contains the download link to the latest version of the AppControl Manager. That text file is updated via automated GitHub action workflow that securely builds and uploads the MSIXBundle package to the GitHub releases. | | https://raw.githubusercontent.com/HotCakeX/Harden-Windows-Security/refs/heads/main/AppControl%20Manager/version.txt | The latest available version of the AppControl Manager application. That text file is updated via automated GitHub action workflow that securely builds and uploads the MSIXBundle package to the GitHub releases. | | https://github.com/HotCakeX/Harden-Windows-Security/wiki/Introduction | The link that opens in the GitHub documentations page in the app via the built-in WebView 2 | | https://learn.microsoft.com/windows/security/application-security/application-control/app-control-for-business/appcontrol | The link that opens in the Microsoft documentations page in the app via the built-in WebView 2 | | https://github.com/HotCakeX/Harden-Windows-Security/releases | During the update process, this link that is for the GitHub releases will be displayed on the update page as a quick way to read the release notes | | https://github.com/HotCakeX/Harden-Windows-Security/wiki/AppControl-Manager | Will be displayed on the Update page when a new version is available and being downloaded | | https://github.com/HotCakeX/Harden-Windows-Security/issues/new/choose | Link for the \"Send Feedback\" button at the bottom of the about section in settings | | https://github.com/HotCakeX/Harden-Windows-Security | Mentioned in the Links section at the bottom of the About section in Settings | | https://github.com/HotCakeX/Harden-Windows-Security/wiki/AppControl-Manager | Mentioned in the Links section at the bottom of the About section in Settings | | https://spynetgirl.github.io/ | Mentioned in the Links section at the bottom of the About section in Settings | | https://www.youtube.com/@hotcakex | Mentioned in the Links section at the bottom of the About section in Settings | | https://x.com/CyberCakeX | Mentioned in the Links section at the bottom of the About section in Settings | | https://icons8.com | Mentioned in the Links section at the bottom of the About section in Settings as credit | | https://graph.microsoft.com | Used when signing into your Azure tenant for uploading policies to Intune |   <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#how-to-install-appcontrol-manager-completely-offline","title":"How To Install AppControl Manager Completely Offline?","text":"<ol> <li> <p>Download this PowerShell script.</p> </li> <li> <p>Have <code>SignTool.exe</code>. You can find it in here if you don't already have it.</p> </li> <li> <p>Download the latest MSIXBundle package of the AppControl Manager from the GitHub releases or build it from the source code yourself.</p> </li> <li> <p>Start an elevated PowerShell and import the script file via <code>Import-Module \"Path to script file\"</code>.</p> </li> <li> <p>Use the following syntax to Install the AppControl Manager</p> </li> </ol> <pre><code>AppControl -MSIXBundlePath \"Path To the MSIXBundle\" -SignTool \"Path to signtool.exe\" -Verbose\n</code></pre> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#about-the-github-packages-installation-process","title":"About the GitHub Packages Installation Process","text":"<p>Warning</p> <p>The following only happens during GitHub installation method, when you run the one-liner script to install the AppControl Manager then the steps described below will automatically run. However, if you choose to install the AppControl Manager from the Microsoft Store then the following steps are not necessary and will not be used.</p> <p>The installation process for AppControl Manager is uniquely streamlined. When you execute the PowerShell one-liner command mentioned above, it initiates a file containing the <code>AppControl</code> function, which serves as the bootstrapper script. This script is thoroughly documented, with detailed explanations and justifications for each step, as outlined below:</p> <ul> <li> <p>The latest version of the AppControl Manager MSIXBundle package is securely downloaded from the GitHub release page, where it is built publicly with full artifact attestation and SBOMs.</p> </li> <li> <p>The <code>SignTool.exe</code> utility is sourced directly from Microsoft by retrieving the associated Nuget package, ensuring a trusted origin.</p> </li> <li> <p>A secure, on-device code-signing certificate is then generated. This certificate, managed by the Microsoft-signed <code>SignTool.exe</code>, is used to sign the MSIXBundle package obtained from GitHub.</p> </li> <li> <p>The private key of the certificate is non-exportable, never written on the disk and is securely discarded once signing is complete, leaving only the public key on the device to allow AppControl Manager to function properly on the system and prevent the certificate from being able to sign anything else.</p> </li> <li> <p>The entire process is designed to leave no residual files. Each time the script runs, any certificates from previous executions are detected and removed, ensuring a clean system.</p> </li> <li> <p>Finally, the <code>AppControlManager.dll</code> and <code>AppControlManager.exe</code> files are added to the Attack Surface Reduction (ASR) exclusions to prevent ASR rules from blocking these newly released binaries. Previous version exclusions are also removed from the ASRs exclusions list to maintain a clean, streamlined setup for the user.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/AppControl%20Manager/#how-to-build-the-appcontrol-manager-locally","title":"How To Build The AppControl Manager Locally?","text":"<p>You can build the AppControl Manager application directly from the source code locally on your device without using any 3rd party tools in a completely automated way.</p> <p>It will create the MSIXBundle file containing the X64 and ARM64 MSIX packages. You can even optionally chain it with the Bootstrapper script to sign and install the application on your system at the end.</p> <p>The build process will generate complete log files and you can use the MSBuild Structured Log Viewer to inspect them.</p>  \u2728 Click/Tap here to see the PowerShell code \u2728  <pre><code># Requires -Version 5.1\n# Requires -RunAsAdministrator\nfunction Build_ACM {\n    param(\n        [ValidateSet('Store', 'Self')]\n        [string]$Type,\n        [bool]$DownloadRepo,\n        [bool]$InstallDeps,\n        [bool]$Workflow,\n        [bool]$UpdateWorkLoads,\n        [bool]$Install,\n        [bool]$Upload,\n        [bool]$X64ONLY\n    )\n\n    [string]$PackageFamilyName = ''\n    [string]$PackageHashAlgo = ''\n    [string]$PackagePublisher = ''\n    [string]$PackageName = ''\n    [string]$PackagePhoneProductId = ''\n    [string]$PackagePhonePublisherId = ''\n    [string]$PackagePublisherDisplayName = ''\n\n    Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -Value 1 -Force\n\n    if ($Type -eq 'Store') {\n        $PackageFamilyName = 'VioletHansen.AppControlManager_ea7andspwdn10'\n        $PackageHashAlgo = 'SHA256'\n        $PackagePublisher = 'CN=C62E63B6-6EF1-4F86-B80F-41A725BD0189'\n        $PackageName = 'VioletHansen.AppControlManager'\n        $PackagePhoneProductId = '4157a676-f4c2-4a8c-a511-b7fb2255c6f5'\n        $PackagePhonePublisherId = '387464d6-cb95-4e5f-9c8f-f153a4855fb2'\n        $PackagePublisherDisplayName = 'Violet Hansen'\n    }\n    else {\n        $PackageFamilyName = 'AppControlManager_sadt7br7jpt02'\n        $PackageHashAlgo = 'SHA512'\n        $PackagePublisher = 'CN=SelfSignedCertForAppControlManager'\n        $PackageName = 'AppControlManager'\n        $PackagePhoneProductId = '199a23ec-7cb6-4ab5-ab50-8baca348bc79'\n        $PackagePhonePublisherId = '00000000-0000-0000-0000-000000000000'\n        $PackagePublisherDisplayName = 'SelfSignedCertForAppControlManager'\n    }\n\n    $ErrorActionPreference = 'Stop'\n    # Start the stopwatch\n    $Stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\n\n    [System.String]$script:AppControlManagerDirectory\n\n    if ($DownloadRepo) {\n\n        [System.String]$BranchName = 'main'\n        [System.String]$RepoName = 'Harden-Windows-Security'\n        [System.String]$RepoUrl = \"https://github.com/HotCakeX/$RepoName/archive/refs/heads/$BranchName.zip\"\n        [System.String]$ZipPath = [System.IO.Path]::Combine($env:TEMP, \"$RepoName.zip\")\n        [System.String]$InitialWorkingDirectory = $PWD.Path\n        $script:AppControlManagerDirectory = [System.IO.Path]::Combine($InitialWorkingDirectory, \"$RepoName-$BranchName\", 'AppControl Manager')\n\n        if (Test-Path -Path $script:AppControlManagerDirectory -PathType Container) {\n            Remove-Item -Path $script:AppControlManagerDirectory -Recurse -Force\n        }\n\n        Invoke-WebRequest -Uri $RepoUrl -OutFile $ZipPath\n        Expand-Archive -Path $ZipPath -DestinationPath $InitialWorkingDirectory -Force\n        Remove-Item -Path $ZipPath -Force\n        Set-Location -Path $script:AppControlManagerDirectory\n    }\n    else {\n        $script:AppControlManagerDirectory = $PWD.Path\n    }\n\n    if ($InstallDeps) {\n\n        # Install Winget if it doesn't exist\n        if (!(Get-Command -Name 'winget.exe' -ErrorAction Ignore)) {\n\n            # Retrieve the latest Winget release information\n            $WingetReleases = Invoke-RestMethod -Uri 'https://api.github.com/repos/microsoft/winget-cli/releases'\n            $LatestRelease = $WingetReleases | Select-Object -First 1\n            # Direct links to the latest Winget release assets\n            [string]$WingetURL = $LatestRelease.assets.browser_download_url | Where-Object -FilterScript { $_.EndsWith('.msixbundle') } | Select-Object -First 1\n            [string]$WingetLicense = $LatestRelease.assets.browser_download_url | Where-Object -FilterScript { $_.EndsWith('License1.xml') } | Select-Object -First 1\n            [string]$LatestWingetReleaseDependenciesZipURL = $LatestRelease.assets.browser_download_url | Where-Object -FilterScript { $_.EndsWith('DesktopAppInstaller_Dependencies.zip') } | Select-Object -First 1\n            [hashtable]$Downloads = @{\n                # 'Winget.msixbundle'                 = 'https://aka.ms/getwinget' This is updated slower than the GitHub release\n                'DesktopAppInstaller_Dependencies.zip' = $LatestWingetReleaseDependenciesZipURL\n                'Winget.msixbundle'                    = $WingetURL\n                'License1.xml'                         = $WingetLicense\n            }\n            $Downloads.GetEnumerator() | ForEach-Object -Parallel {\n                Invoke-RestMethod -Uri $_.Value -OutFile $_.Key\n            }\n\n            Expand-Archive -Path 'DesktopAppInstaller_Dependencies.zip' -DestinationPath .\\ -Force\n\n            # Required to update the Winget\n            Stop-Process -Name 'WindowsTerminal' -Force -ErrorAction Ignore\n\n            # Get the paths to all of the dependencies\n            [string[]]$DependencyPaths = (Get-ChildItem -Path .\\x64 -Filter '*.appx' -File -Force).FullName\n            Add-AppxProvisionedPackage -Online -PackagePath 'Winget.msixbundle' -DependencyPackagePath $DependencyPaths -LicensePath 'License1.xml'\n\n            Add-AppPackage -Path 'Winget.msixbundle' -DependencyPath \"$($DependencyPaths[0])\", \"$($DependencyPaths[1])\" -ForceTargetApplicationShutdown -ForceUpdateFromAnyVersion\n\n        }\n\n        Write-Host -Object 'The version of the Winget currently in use:'\n        Write-Host -Object (winget --version)\n\n        winget source update\n\n        Write-Host -Object \"`nInstalling Rust toolchain\" -ForegroundColor Magenta\n        $null = winget install --id Rustlang.Rustup --exact --accept-package-agreements --accept-source-agreements --uninstall-previous --force --source winget\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed to install the Rust toolchain: $LASTEXITCODE\") }\n\n        Write-Host -Object \"`nInstalling .NET SDK\" -ForegroundColor Magenta\n        $null = winget install --id Microsoft.DotNet.SDK.Preview --exact --accept-package-agreements --accept-source-agreements --uninstall-previous --force --source winget\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed to install .NET SDK: $LASTEXITCODE\") }\n\n        Write-Host -Object \"`nInstalling Visual Studio Build Tools\" -ForegroundColor Magenta\n        # Downloads the online installer and automatically runs it and installs the build tools\n        # https://learn.microsoft.com/windows/apps/windows-app-sdk/set-up-your-development-environment\n        # https://learn.microsoft.com/visualstudio/install/workload-component-id-vs-build-tools\n        # https://learn.microsoft.com/visualstudio/install/use-command-line-parameters-to-install-visual-studio\n        # https://learn.microsoft.com/visualstudio/install/workload-component-id-vs-community\n        winget install --id Microsoft.VisualStudio.2022.BuildTools --exact --accept-package-agreements --accept-source-agreements --uninstall-previous --force --source winget --override '--force --wait --passive --add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Workload.MSBuildTools --add Microsoft.VisualStudio.Workload.UniversalBuildTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows11SDK.26100 --includeRecommended --add Microsoft.VisualStudio.Component.VC.Tools.ARM64'\n\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New('Failed to install Visual Studio Build Tools') }\n\n        winget install --id Microsoft.VCRedist.2015+.x64 --exact --accept-package-agreements --accept-source-agreements --uninstall-previous --force --source winget\n\n    }\n\n    # Refresh the environment variables so the current session detects the new dotnet installation\n    $Env:Path = [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine) + ';' +\n    [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::User)\n\n    # https://github.com/Microsoft/vswhere/wiki/Start-Developer-Command-Prompt#using-powershell\n    $installationPath = . 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe' -prerelease -latest -property installationPath\n    if ($installationPath -and (Test-Path -Path \"$installationPath\\Common7\\Tools\\vsdevcmd.bat\" -PathType Leaf)) {\n        &amp; \"${env:COMSPEC}\" /s /c \"`\"$installationPath\\Common7\\Tools\\vsdevcmd.bat`\" -no_logo &amp;&amp; set\" | ForEach-Object -Process {\n            $name, $value = $_ -split '=', 2\n            Set-Content -Path env:\\\"$name\" -Value $value -Force\n            Write-Host -Object \"Setting environment variable: $name=$value\"\n        }\n    }\n\n    # Remove any possible existing directories\n    Remove-Item -Path .\\MSIXOutputX64 -Recurse -Force -ErrorAction Ignore\n    Remove-Item -Path .\\MSIXOutputARM64 -Recurse -Force -ErrorAction Ignore\n    Remove-Item -Path .\\MSIXBundleOutput -Recurse -Force -ErrorAction Ignore\n    Remove-Item -Path .\\bin -Recurse -Force -ErrorAction Ignore\n    Remove-Item -Path .\\obj -Recurse -Force -ErrorAction Ignore\n\n    if ($UpdateWorkLoads) {\n        # Update the workloads\n        dotnet workload update\n        dotnet workload config --update-mode workload-set\n        dotnet workload update\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed updating the workloads. Exit Code: $LASTEXITCODE\") }\n    }\n\n    Write-Host -Object \"`nChecking .NET info`n`n\" -ForegroundColor Magenta\n    dotnet --info\n    Write-Host -Object \"`nListing installed .NET SDKs`n`n\" -ForegroundColor Magenta\n    dotnet --list-sdks\n\n    function Find-mspdbcmf {\n        # \"-products *\" is necessary to detect BuildTools too\n        [string]$VisualStudioPath = . 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe' -prerelease -latest -property resolvedInstallationPath -products *\n\n        [string]$BasePath = [System.IO.Path]::Combine($VisualStudioPath, 'VC', 'Tools', 'MSVC')\n\n        # Get all subdirectories under the base path\n        [System.String[]]$VersionDirs = [System.IO.Directory]::GetDirectories($BasePath)\n\n        # Initialize the highest version with a minimal version value.\n        [System.Version]$HighestVersion = [System.Version]::New('0.0.0.0')\n        [System.String]$HighestVersionFolder = $null\n\n        # Loop through each directory to find the highest version folder.\n        foreach ($Dir in $VersionDirs) {\n            # Extract the folder name\n            [System.String]$FolderName = [System.IO.Path]::GetFileName($Dir)\n            [System.Version]$CurrentVersion = $null\n            # Try parsing the folder name as a Version.\n            if ([System.Version]::TryParse($FolderName, [ref] $CurrentVersion)) {\n                # Compare versions\n                if ($CurrentVersion.CompareTo($HighestVersion) -gt 0) {\n                    $HighestVersion = $CurrentVersion\n                    $HighestVersionFolder = $FolderName\n                }\n            }\n        }\n\n        # If no valid version folder is found\n        if (!$HighestVersionFolder) {\n            throw [System.IO.DirectoryNotFoundException]::New(\"No valid version directories found in $BasePath\")\n        }\n\n        # Combine the base path, the highest version folder, the architecture folder, and the file name.\n        [System.String]$mspdbcmfPath = [System.IO.Path]::Combine($BasePath, $HighestVersionFolder, 'bin', 'Hostx64', 'x64', 'mspdbcmf.exe')\n\n        if (![System.IO.File]::Exists($mspdbcmfPath)) {\n            throw [System.IO.FileNotFoundException]::New(\"mspdbcmf.exe not found at $mspdbcmfPath\")\n        }\n\n        return $mspdbcmfPath\n    }\n\n    [string]$mspdbcmfPath = Find-mspdbcmf\n\n    function Find-MSBuild {\n        # \"-products *\" is necessary to detect BuildTools too\n        [string]$VisualStudioPath = . 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe' -prerelease -latest -property resolvedInstallationPath -products *\n\n        [string]$MSBuildPath = [System.IO.Path]::Combine($VisualStudioPath, 'MSBuild', 'Current', 'Bin', 'MSBuild.exe')\n\n        if (![System.IO.File]::Exists($MSBuildPath)) {\n            throw [System.IO.FileNotFoundException]::New(\"MSBuild.exe not found at $MSBuildPath\")\n        }\n\n        return $MSBuildPath\n    }\n\n    [string]$MSBuildPath = Find-MSBuild\n\n    #region --- Compile C++ projects ---\n\n    ### ComManager\n\n    . $MSBuildPath 'eXclude\\ComManager\\ComManager.slnx' /p:Configuration=Release /p:Platform=x64 /target:\"clean;Rebuild\"\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building MS Defender solution for X64. Exit Code: $LASTEXITCODE\") }\n\n    if (!$X64ONLY) {\n\n        . $MSBuildPath 'eXclude\\ComManager\\ComManager.slnx' /p:Configuration=Release /p:Platform=arm64 /target:\"clean;Rebuild\"\n\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building MS Defender solution for ARM64. Exit Code: $LASTEXITCODE\") }\n    }\n\n    ### Shell\n\n    [string]$newPFN = \"$PackageFamilyName!App\"\n    [string]$content = Get-Content 'eXclude\\Shell\\Shell.cpp' -Raw\n    [string]$content = $content -replace 'static constexpr LPCWSTR APP_CONTROL_MANAGER_PFN = L\"[^\"]*\";', \"static constexpr LPCWSTR APP_CONTROL_MANAGER_PFN = L`\"$newPFN`\";\"\n    $content | Set-Content 'eXclude\\Shell\\Shell.cpp' -NoNewline -Force\n\n    . $MSBuildPath 'eXclude\\Shell\\Shell.slnx' /p:Configuration=Release /p:Platform=x64 /target:\"clean;Rebuild\"\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building the Shell solution for X64. Exit Code: $LASTEXITCODE\") }\n\n    if (!$X64ONLY) {\n\n        . $MSBuildPath 'eXclude\\Shell\\Shell.slnx' /p:Configuration=Release /p:Platform=arm64 /target:\"clean;Rebuild\"\n\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building the Shell solution for ARM64. Exit Code: $LASTEXITCODE\") }\n    }\n\n    #endregion\n\n\n    #region --- RUST projects ---\n\n    # Uncomment this once stable toolchain supports ehcont security feature, till then we use nightly only\n    # rustup default stable\n    rustup default nightly\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed setting Rust toolchain to Stable. Exit Code: $LASTEXITCODE\") }\n\n    if (!$X64ONLY) {\n\n        rustup target add aarch64-pc-windows-msvc\n\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed adding aarch64-pc-windows-msvc target to Rust toolchain. Exit Code: $LASTEXITCODE\") }\n\n    }\n\n    rustup target add x86_64-pc-windows-msvc\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed adding x86_64-pc-windows-msvc target to Rust toolchain. Exit Code: $LASTEXITCODE\") }\n\n    rustup update\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed updating Rust. Exit Code: $LASTEXITCODE\") }\n\n    cargo version\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed checking for Rust version. Exit Code: $LASTEXITCODE\") }\n\n    [string]$Current_Location = (Get-Location).Path\n\n    Set-Location -Path '.\\eXclude\\Rust Interop Library'\n\n    if (Test-Path -PathType Leaf -LiteralPath 'Cargo.lock') {\n        Remove-Item -Force -LiteralPath 'Cargo.lock'\n    }\n\n    rustup toolchain install nightly\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed installing nightly Rust toolchain. Exit Code: $LASTEXITCODE\") }\n\n    rustup default nightly\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed setting Rust toolchain to Nightly. Exit Code: $LASTEXITCODE\") }\n\n    rustup component add rust-src --toolchain nightly-x86_64-pc-windows-msvc\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed adding rust-src component to Nightly toolchain. Exit Code: $LASTEXITCODE\") }\n\n    rustup update\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed updating Rust. Exit Code: $LASTEXITCODE\") }\n\n    cargo version\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed checking for Rust version. Exit Code: $LASTEXITCODE\") }\n\n    cargo clean\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed cleaning the Rust project. Exit Code: $LASTEXITCODE\") }\n\n    cargo update --verbose\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed updating Rust. Exit Code: $LASTEXITCODE\") }\n\n    cargo tree\n\n    rustup show active-toolchain\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed showing active Rust toolchain. Exit Code: $LASTEXITCODE\") }\n\n    cargo build_x64\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building x64 Rust Interop project. Exit Code: $LASTEXITCODE\") }\n\n    if (!$X64ONLY) {\n\n        cargo build_arm64\n\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building ARM64 Rust Interop project. Exit Code: $LASTEXITCODE\") }\n\n    }\n\n    Set-Location -Path $Current_Location\n\n    #endregion\n\n    #region XML Modifications\n\n    [string]$CsProjFilePath = (Resolve-Path -Path '.\\AppControl Manager.csproj').Path\n    [string]$AppxManifestFilePath = (Resolve-Path -Path '.\\Package.appxmanifest').Path\n\n    # Adjust the Digest Algorithm based on the package source\n    [xml]$ProjXMLContent = Get-Content -Path $CsProjFilePath -Force\n\n    # Grab ALL existing nodes, wherever they are\n    $nodes = $ProjXMLContent.SelectNodes('//AppxPackageSigningTimestampDigestAlgorithm')\n\n    foreach ($node in $nodes) {\n        $node.InnerText = $PackageHashAlgo\n    }\n\n    $ProjXMLContent.Save($CsProjFilePath)\n\n    # Configure the Package Manifest Dits\n    [xml]$AppxManifestContent = Get-Content -Path $AppxManifestFilePath -Force\n\n    $ns = New-Object System.Xml.XmlNamespaceManager($AppxManifestContent.NameTable)\n    $ns.AddNamespace('ns', 'http://schemas.microsoft.com/appx/manifest/foundation/windows10')\n    $ns.AddNamespace('mp', 'http://schemas.microsoft.com/appx/2014/phone/manifest')\n\n    # Update the &lt;Identity&gt; attributes\n    $identity = $AppxManifestContent.SelectSingleNode('/ns:Package/ns:Identity', $ns)\n    $identity.SetAttribute('Name', $PackageName)\n    $identity.SetAttribute('Publisher', $PackagePublisher)\n\n    # Update the &lt;mp:PhoneIdentity&gt; attributes\n    $phoneId = $AppxManifestContent.SelectSingleNode('/ns:Package/mp:PhoneIdentity', $ns)\n    $phoneId.SetAttribute('PhoneProductId', $PackagePhoneProductId)\n    $phoneId.SetAttribute('PhonePublisherId', $PackagePhonePublisherId)\n\n    # Update the &lt;PublisherDisplayName&gt; element\n    $pubDisplay = $AppxManifestContent.SelectSingleNode('/ns:Package/ns:Properties/ns:PublisherDisplayName', $ns)\n    $pubDisplay.InnerText = $PackagePublisherDisplayName\n\n    $AppxManifestContent.Save($AppxManifestFilePath)\n\n    #endregion XML Modifications\n\n    # https://learn.microsoft.com/dotnet/core/tools/dotnet-build\n    # https://learn.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference\n    # https://learn.microsoft.com/visualstudio/msbuild/common-msbuild-project-properties\n\n    # Copy the X64 components to the directory before the build starts\n    Copy-Item -Path '.\\eXclude\\Shell\\x64\\Release\\Shell.dll' -Destination 'Shell' -Force\n\n    Copy-Item -Path '.\\eXclude\\ComManager\\x64\\Release\\ComManager.exe' -Destination '.\\CppInterop\\ComManager.exe' -Force\n\n    # Generate for X64 architecture\n    dotnet clean 'AppControl Manager.slnx' --configuration Release\n    dotnet build 'AppControl Manager.slnx' --configuration Release --verbosity minimal /p:Platform=x64\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building x64 AppControl Manager project. Exit Code: $LASTEXITCODE\") }\n\n    dotnet msbuild 'AppControl Manager.slnx' /p:Configuration=Release /p:AppxPackageDir=\"MSIXOutputX64\\\" /p:GenerateAppxPackageOnBuild=true /p:Platform=x64 -v:minimal /p:MsPdbCmfExeFullpath=$mspdbcmfPath -bl:X64MSBuildLog.binlog\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed packaging x64 AppControl Manager project. Exit Code: $LASTEXITCODE\") }\n\n    if (!$X64ONLY) {\n\n        # Copy the ARM64 components to the directory before the build starts\n        Copy-Item -Path '.\\eXclude\\Shell\\ARM64\\Release\\Shell.dll' -Destination 'Shell' -Force\n\n        Copy-Item -Path '.\\eXclude\\ComManager\\ARM64\\Release\\ComManager.exe' -Destination '.\\CppInterop\\ComManager.exe' -Force\n\n        # Generate for ARM64 architecture\n        dotnet clean 'AppControl Manager.slnx' --configuration Release\n        dotnet build 'AppControl Manager.slnx' --configuration Release --verbosity minimal /p:Platform=ARM64\n\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building ARM64 AppControl Manager project. Exit Code: $LASTEXITCODE\") }\n\n        dotnet msbuild 'AppControl Manager.slnx' /p:Configuration=Release /p:AppxPackageDir=\"MSIXOutputARM64\\\" /p:GenerateAppxPackageOnBuild=true /p:Platform=ARM64 -v:minimal /p:MsPdbCmfExeFullpath=$mspdbcmfPath -bl:ARM64MSBuildLog.binlog\n\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed packaging ARM64 AppControl Manager project. Exit Code: $LASTEXITCODE\") }\n    }\n\n    function Get-MSIXFile {\n        param(\n            [System.String]$BasePath,\n            [System.String]$FolderPattern,\n            [System.String]$FileNamePattern,\n            [System.String]$ErrorMessageFolder,\n            [System.String]$ErrorMessageFile\n        )\n        # Get all subdirectories in the base path matching the folder pattern\n        [System.String[]]$Folders = [System.IO.Directory]::GetDirectories($BasePath)\n        [System.String]$DetectedFolder = $null\n        foreach ($Folder in $Folders) {\n            if ([System.Text.RegularExpressions.Regex]::IsMatch($Folder, $FolderPattern)) {\n                $DetectedFolder = $Folder\n                break\n            }\n        }\n\n        if (!$DetectedFolder) {\n            throw [System.InvalidOperationException]::New($ErrorMessageFolder)\n        }\n\n        # Get the full path of the first file matching the file name pattern inside the found folder\n        [System.String[]]$Files = [System.IO.Directory]::GetFiles($DetectedFolder)\n        [System.String]$DetectedFile = $null\n        foreach ($File in $Files) {\n            if ([System.Text.RegularExpressions.Regex]::IsMatch($File, $FileNamePattern)) {\n                $DetectedFile = $File\n                break\n            }\n        }\n\n        if (!$DetectedFile) {\n            throw [System.InvalidOperationException]::New($ErrorMessageFile)\n        }\n        return $DetectedFile\n    }\n\n    #region Finding X64 outputs\n    [System.String]$FinalMSIXX64Path = Get-MSIXFile -BasePath ([System.IO.Path]::Combine($PWD.Path, 'MSIXOutputX64')) -FolderPattern 'AppControl Manager_\\d+\\.\\d+\\.\\d+\\.\\d+_Test' -FileNamePattern 'AppControl Manager_\\d+\\.\\d+\\.\\d+\\.\\d+_x64\\.msix' -ErrorMessageFolder 'Could not find the directory for X64 MSIX file' -ErrorMessageFile 'Could not find the X64 MSIX file'\n    [System.String]$FinalMSIXX64Name = [System.IO.Path]::GetFileName($FinalMSIXX64Path)\n    [System.String]$FinalMSIXX64SymbolPath = Get-MSIXFile -BasePath ([System.IO.Path]::Combine($PWD.Path, 'MSIXOutputX64')) -FolderPattern 'AppControl Manager_\\d+\\.\\d+\\.\\d+\\.\\d+_Test' -FileNamePattern 'AppControl Manager_\\d+\\.\\d+\\.\\d+\\.\\d+_x64\\.msixsym' -ErrorMessageFolder 'Could not find the directory for X64 symbol file' -ErrorMessageFile 'Could not find the X64 symbol file'\n    [System.String]$FinalMSIXX64SymbolName = [System.IO.Path]::GetFileName($FinalMSIXX64SymbolPath)\n    #endregion\n\n    if (!$X64ONLY) {\n\n        #region Finding ARM64 outputs\n        [System.String]$FinalMSIXARM64Path = Get-MSIXFile -BasePath ([System.IO.Path]::Combine($PWD.Path, 'MSIXOutputARM64')) -FolderPattern 'AppControl Manager_\\d+\\.\\d+\\.\\d+\\.\\d+_Test' -FileNamePattern 'AppControl Manager_\\d+\\.\\d+\\.\\d+\\.\\d+_arm64\\.msix' -ErrorMessageFolder 'Could not find the directory for ARM64 MSIX file' -ErrorMessageFile 'Could not find the ARM64 MSIX file'\n        [System.String]$FinalMSIXARM64Name = [System.IO.Path]::GetFileName($FinalMSIXARM64Path)\n        [System.String]$FinalMSIXARM64SymbolPath = Get-MSIXFile -BasePath ([System.IO.Path]::Combine($PWD.Path, 'MSIXOutputARM64')) -FolderPattern 'AppControl Manager_\\d+\\.\\d+\\.\\d+\\.\\d+_Test' -FileNamePattern 'AppControl Manager_\\d+\\.\\d+\\.\\d+\\.\\d+_arm64\\.msixsym' -ErrorMessageFolder 'Could not find the directory for ARM64 symbol file' -ErrorMessageFile 'Could not find the ARM64 symbol file'\n        [System.String]$FinalMSIXARM64SymbolName = [System.IO.Path]::GetFileName($FinalMSIXARM64SymbolPath)\n        #endregion\n\n    }\n\n    #region Detect and Validate File Versions\n    [System.Text.RegularExpressions.Regex]$versionRegexX64 = [System.Text.RegularExpressions.Regex]::New('AppControl Manager_(\\d+\\.\\d+\\.\\d+\\.\\d+)_x64\\.msix')\n\n    if (!$X64ONLY) {\n\n        [System.Text.RegularExpressions.Regex]$versionRegexARM64 = [System.Text.RegularExpressions.Regex]::New('AppControl Manager_(\\d+\\.\\d+\\.\\d+\\.\\d+)_arm64\\.msix')\n    }\n\n    [System.Text.RegularExpressions.Match]$MatchX64 = $versionRegexX64.Match($FinalMSIXX64Name)\n\n    if (!$X64ONLY) {\n\n        [System.Text.RegularExpressions.Match]$MatchARM64 = $versionRegexARM64.Match($FinalMSIXARM64Name)\n\n    }\n\n    if (!$MatchX64.Success) {\n        throw [System.InvalidOperationException]::New('Could not detect version from X64 file name')\n    }\n\n    if (!$X64ONLY) {\n\n        if (!$MatchARM64.Success) {\n            throw [System.InvalidOperationException]::New('Could not detect version from ARM64 file name')\n        }\n    }\n\n    [System.String]$versionX64 = $MatchX64.Groups[1].Value\n\n    if (!$X64ONLY) {\n\n        [System.String]$versionARM64 = $MatchARM64.Groups[1].Value\n\n\n        if ($versionX64 -ne $versionARM64) {\n            throw [System.InvalidOperationException]::New('The versions in X64 and ARM64 files do not match')\n        }\n\n    }\n\n    # Craft the file name for the MSIX Bundle file\n    [System.String]$FinalBundleFileName = \"AppControl Manager_$versionX64.msixbundle\"\n    #endregion\n\n    # Creating the directory where the MSIX packages will be copied to\n    [System.String]$MSIXBundleOutput = [System.IO.Directory]::CreateDirectory([System.IO.Path]::Combine($script:AppControlManagerDirectory, 'MSIXBundleOutput')).FullName\n\n    [System.IO.File]::Copy($FinalMSIXX64Path, [System.IO.Path]::Combine($MSIXBundleOutput, $FinalMSIXX64Name), $true)\n\n    if (!$X64ONLY) {\n\n        [System.IO.File]::Copy($FinalMSIXARM64Path, [System.IO.Path]::Combine($MSIXBundleOutput, $FinalMSIXARM64Name), $true)\n\n    }\n\n    # The path to the final MSIX Bundle file\n    [System.String]$MSIXBundle = [System.IO.Path]::Combine($MSIXBundleOutput, $FinalBundleFileName)\n\n    function Get-MakeAppxPath {\n        [System.String]$BasePath = 'C:\\Program Files (x86)\\Windows Kits\\10\\bin'\n\n        # Get all subdirectories under the base path\n        [System.String[]]$VersionDirs = [System.IO.Directory]::GetDirectories($BasePath)\n\n        # Initialize the highest version with a minimal version value.\n        [System.Version]$HighestVersion = [System.Version]::New('0.0.0.0')\n        [System.String]$HighestVersionFolder = $null\n\n        # Loop through each directory to find the highest version folder.\n        foreach ($Dir in $VersionDirs) {\n            # Extract the folder name\n            [System.String]$FolderName = [System.IO.Path]::GetFileName($Dir)\n            [System.Version]$CurrentVersion = $null\n            # Try parsing the folder name as a Version.\n            if ([System.Version]::TryParse($FolderName, [ref] $CurrentVersion)) {\n                # Compare versions\n                if ($CurrentVersion.CompareTo($HighestVersion) -gt 0) {\n                    $HighestVersion = $CurrentVersion\n                    $HighestVersionFolder = $FolderName\n                }\n            }\n        }\n\n        # If no valid version folder is found\n        if (!$HighestVersionFolder) {\n            throw [System.IO.DirectoryNotFoundException]::New(\"No valid version directories found in $BasePath\")\n        }\n\n        [string]$CPUArch = @{AMD64 = 'x64'; ARM64 = 'arm64' }[$Env:PROCESSOR_ARCHITECTURE]\n        if ([System.String]::IsNullOrWhiteSpace($CPUArch)) { throw [System.PlatformNotSupportedException]::New('Only AMD64 and ARM64 architectures are supported.') }\n\n        # Combine the base path, the highest version folder, the architecture folder, and the file name.\n        [System.String]$MakeAppxPath = [System.IO.Path]::Combine($BasePath, $HighestVersionFolder, $CPUArch, 'makeappx.exe')\n\n        return $MakeAppxPath\n    }\n\n    [System.String]$MakeAppxPath = Get-MakeAppxPath\n\n    if ([System.string]::IsNullOrWhiteSpace($MakeAppxPath)) {\n        throw [System.IO.FileNotFoundException]::New('Could not find the makeappx.exe')\n    }\n\n    # https://learn.microsoft.com/windows/win32/appxpkg/make-appx-package--makeappx-exe-#to-create-a-package-bundle-using-a-directory-structure\n    . $MakeAppxPath bundle /d $MSIXBundleOutput /p $MSIXBundle /o /v\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"MakeAppx failed creating the MSIXBundle. Exit Code: $LASTEXITCODE\") }\n\n    #Endregion\n\n    Write-Host -Object \"X64 MSIX File Path: $FinalMSIXX64Path\" -ForegroundColor Green\n    Write-Host -Object \"X64 MSIX File Name: $FinalMSIXX64Name\" -ForegroundColor Green\n    Write-Host -Object \"X64 Symbols: $FinalMSIXX64SymbolPath\" -ForegroundColor Green\n\n    if (!$X64ONLY) {\n\n        Write-Host -Object \"ARM64 MSIX File Path: $FinalMSIXARM64Path\" -ForegroundColor Cyan\n        Write-Host -Object \"ARM64 MSIX File Name: $FinalMSIXARM64Name\" -ForegroundColor Cyan\n        Write-Host -Object \"ARM64 Symbols: $FinalMSIXARM64SymbolPath\" -ForegroundColor Cyan\n\n    }\n\n    Write-Host -Object \"MSIX Bundle File Path: $MSIXBundle\" -ForegroundColor Yellow\n    Write-Host -Object \"MSIX Bundle File Name: $FinalBundleFileName\" -ForegroundColor Yellow\n\n    if ($Workflow) {\n\n        [XML]$CSProjXMLContent = Get-Content -Path $CsProjFilePath -Force\n        [string]$MSIXVersion = $CSProjXMLContent.Project.PropertyGroup.FileVersion\n        [string]$MSIXVersion = $MSIXVersion.Trim() # It would have trailing whitespaces\n        if ([string]::IsNullOrWhiteSpace($FinalMSIXX64Path) -or [string]::IsNullOrWhiteSpace($FinalMSIXX64Name) -or [string]::IsNullOrWhiteSpace($MSIXVersion)) { throw 'Necessary info could not be found' }\n\n        # Write the MSIXVersion to GITHUB_ENV to set it as an environment variable for the entire workflow\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"PACKAGE_VERSION=$MSIXVersion\"\n\n        # Saving the details for the MSIX Bundle file\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"MSIXBundle_PATH=$MSIXBundle\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"MSIXBundle_NAME=$FinalBundleFileName\"\n\n        # Saving the details of the log files\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"X64MSBuildLog_PATH=$((Resolve-Path -Path .\\X64MSBuildLog.binlog).Path)\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"ARM64MSBuildLog_PATH=$((Resolve-Path -Path .\\ARM64MSBuildLog.binlog).Path)\"\n\n        # Saving the details of the X64 symbol file\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"X64Symbol_PATH=$FinalMSIXX64SymbolPath\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"X64Symbol_NAME=$FinalMSIXX64SymbolName\"\n\n        # Saving the details of the ARM64 symbol file\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"ARM64Symbol_PATH=$FinalMSIXARM64SymbolPath\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"ARM64Symbol_NAME=$FinalMSIXARM64SymbolName\"\n\n        # https://github.com/microsoft/sbom-tool\n        # Generating SBOM\n        Invoke-WebRequest -Uri 'https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe' -OutFile \"${Env:RUNNER_TEMP}\\sbom-tool.exe\"\n\n        # https://github.com/microsoft/sbom-tool/blob/main/docs/sbom-tool-arguments.md\n        . \"${Env:RUNNER_TEMP}\\sbom-tool.exe\" generate -b $MSIXBundleOutput -bc .\\ -pn 'AppControl Manager' -ps 'Violet Hansen' -pv $MSIXVersion -nsb 'https://github.com/HotCakeX/Harden-Windows-Security' -V Verbose -gt true -li true -pm true -D true -lto 80\n\n        # Saving the details of the SBOM file\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"SBOM_PATH=$MSIXBundleOutput/_manifest/spdx_2.2/manifest.spdx.json\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value 'SBOM_NAME=manifest.spdx.json'\n    }\n\n    if ($Install -and $PackageFamilyName -eq 'AppControlManager_sadt7br7jpt02') {\n        (Invoke-RestMethod -Uri 'https://raw.githubusercontent.com/HotCakeX/Harden-Windows-Security/main/Harden-Windows-Security.ps1') + \"AppControl -Verbose -MSIXBundlePath '$MSIXBundle'\" | Invoke-Expression\n    }\n\n    if ($Upload) {\n        dotnet clean '.\\eXclude\\PartnerCenter\\PartnerCenter.slnx' --configuration Release\n        dotnet build '.\\eXclude\\PartnerCenter\\PartnerCenter.slnx' --configuration Release --verbosity minimal\n        dotnet msbuild '.\\eXclude\\PartnerCenter\\PartnerCenter.slnx' /p:Configuration=Release /p:Platform=x64 /p:PublishProfile=win-x64 /t:Publish -v:minimal\n\n        [System.String]$TokenEndpoint = $env:PARTNERCENTER_TOKENENDPOINT\n        [System.String]$ClientId = $env:PARTNERCENTER_CLIENTID\n        [System.String]$ClientSecret = $env:PARTNERCENTER_CLIENTSECRET\n        [System.String]$ApplicationId = $env:PARTNERCENTER_APPLICATIONID\n\n        [System.String]$PackageFilePath = $MSIXBundle\n        [System.String]$ReleaseNotesFilePath = (Resolve-Path -Path ReleaseNotes.txt).Path\n\n        . '.\\eXclude\\PartnerCenter\\X64Output\\PartnerCenter.exe' $TokenEndpoint $ClientId $ClientSecret $ApplicationId $PackageFilePath $ReleaseNotesFilePath\n    }\n\n    if ($null -ne $Stopwatch) {\n\n        $Stopwatch.Stop()\n\n        $Elapsed = $Stopwatch.Elapsed\n        [string]$Result = @\"\nExecution Time:\n----------------------------\nTotal Time   : $($Elapsed.ToString('g'))\nHours        : $($Elapsed.Hours)\nMinutes      : $($Elapsed.Minutes)\nSeconds      : $($Elapsed.Seconds)\nMilliseconds : $($Elapsed.Milliseconds)\n----------------------------\n\"@\n\n        Write-Host -Object $Result -ForegroundColor Cyan\n    }\n}\n\n# For GitHub workflow 1\n# Build_ACM -Type Self -DownloadRepo $false -InstallDeps $false -Workflow $true -UpdateWorkLoads $false -Install $false -Upload $false -X64ONLY $false\n# For GitHub workflow 2\n# Build_ACM -Type Store -DownloadRepo $false -InstallDeps $false -Workflow $true -UpdateWorkLoads $false -Install $false -Upload $true -X64ONLY $false\n# Example of building the app from the source code and installing it on a clean system with self-signed certificate\n# Build_ACM -Type Self -DownloadRepo $true -InstallDeps $true -Workflow $false -UpdateWorkLoads $false -Install $true -Upload $false -X64ONLY $false\n# Example of building the app from the source code on a clean system and uploading it to the Partner Center\n# Build_ACM -Type Store -DownloadRepo $true -InstallDeps $true -Workflow $false -UpdateWorkLoads $false -Install $false -Upload $true -X64ONLY $false\n# Local Test - X64 only\n# Build_ACM -Type Self -DownloadRepo $false -InstallDeps $false -Workflow $false -UpdateWorkLoads $false -Install $false -Upload $false -X64ONLY $true\n# Local Test - ARM64 + X64\n# Build_ACM -Type Self -DownloadRepo $false -InstallDeps $false -Workflow $false -UpdateWorkLoads $false -Install $false -Upload $false -X64ONLY $false\n</code></pre> <p></p>"},{"location":"AppControl%20Manager/Build%20New%20Certificate/","title":"Build New Certificate","text":"<p>Use this page in AppControl Manager to build a new Code Signing certificate that is suitable for signing App Control policies according to the Microsoft's requirements. This page offers multiple options to configure the generated certificate according to your needs and requirements. The keys use <code>SHA2-512</code> hashing algorithm.</p> <p>You will see a prompt asking for password during certificate building process. This is the password that will be used to protect the certificate's private key on your system. You can uncheck the box for passwords and only use confirmation prompts. The password or confirmation prompt will be displayed to you every time the private key of the certificate is going to be used to sign a file.</p> <p>After building the certificate, 2 files will be created in the <code>C:\\Program Files\\WDACConfig</code> directory with <code>.cer</code> and <code>.pfx</code> extensions and the same name as the common name you selected.</p> <ul> <li> <p>The file with the <code>.cer</code> extension contains the public key of the certificate.</p> </li> <li> <p>The file with the <code>.pfx</code> extension contains the private key of the certificate. You need make sure you will have access to these files when deploying signed policies because they will be needed whenever you need to change or remove a signed policy from the system.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Build%20New%20Certificate/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Key Size: The cryptographic key's length, measured in bits, defines the strength and security of private key encryption. Bigger key sizes take more time and processing power to generate. It uses RSA algorithm. App Control only supports key sizes up to <code>4096</code>.</p> </li> <li> <p>Common Name: The Common Name (CN) is a field in a certificate that specifies the fully qualified domain name (FQDN) or identifier the certificate is issued for.</p> </li> <li> <p>Validity: The time period (in years) during which a certificate is considered valid and trusted.</p> </li> <li> <p>PFX Encryption Password: A secure passphrase used to encrypt and protect access to the private key and certificate data within a PFX (Personal Information Exchange) file.</p> </li> </ul> <p></p> <p>Note</p> <p>HSM (Hardware Security Module)</p> <p>The most secure method of storing code signing certificates is to use a hardware security module (HSM) or a similar device. Furthermore, obtaining certificates from a regulated or publicly trusted certificate authority (CA) requires the use of an HSM. The HSMs must also comply with the Federal Information Processing Standards (FIPS).</p> <p></p>"},{"location":"AppControl%20Manager/Configure%20Policy%20Rule%20Options/","title":"Configure Policy Rule Options","text":"<p>Use this page in AppControl Manager to configure the rule options in an App Control policy. You can find all of the available rule options and their descriptions in this Microsoft Learn page.</p> <p>Additionally, this page offers policy templates. These are pre-configured set of rule options suitable for each use case. Use the drop down menu to select one and apply it to an XML policy file.</p> <p></p>"},{"location":"AppControl%20Manager/Configure%20Policy%20Rule%20Options/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Apply The Changes: Press this button to apply the changes you made to the policy rule options.</p> </li> <li> <p>Deploy After Applying: If this button is toggled, the policy will also be deployed on the system when you press the <code>Apply The Changes</code> button.</p> </li> <li> <p>Retrieve Rules States: By default, when you select an XML policy file, the checkboxes representing the rule options will be checked or unchecked according to the rule options in that file. If you want to retrieve the rule options from the XML policy file again, maybe after modifying it manually, press this button.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20AppControl%20Policy/","title":"Create App Control Policy","text":"<p>Use AppControl Manager to create new App Control policies based on the default templates.</p> <ul> <li> <p>Allow Microsoft: Only allows files signed by Microsoft certificates to run on the system.</p> </li> <li> <p>Default Windows: Only allows files that come by default with Windows OS to run on the system.</p> </li> <li> <p>Signed And Reputable: Allows files signed by Microsoft certificates to run, it also utilizes the Intelligent Security Graph to allow files that are reputable and safe.</p> </li> <li> <p>Microsoft Recommended Block Rules: It will download the latest Microsoft Recommended (User-Mode) block rules from the official source and create an App Control policy.</p> </li> <li> <p>Microsoft Recommended Driver Block Rules: It will download the latest Microsoft Recommended (Kernel-Mode) block rules from the official source and create an App Control policy.</p> </li> <li> <p>Auto update: It will create a scheduled task on the system that will check every week for the latest Microsoft Recommended block rules and update the policy automatically. Please refer to this page for more info.</p> </li> <li> <p>Strict Kernel-mode policy: It's a special kind of policy that will only enforce Kernel-mode files without blocking user-mode files. Please refer to this article for more information.</p> </li> </ul> <p></p> <p>Deploying any of them is optional. You can create the policies and then deploying them on remote systems using Intune or other methods.</p> <p></p>"},{"location":"AppControl%20Manager/Create%20AppControl%20Policy/#configuration-details","title":"Configuration Details","text":"<p>There are different settings and options you can use to fine tune the policy according to your requirements.</p> <ul> <li> <p>Audit: When a policy has Audit mode turned on for it, it will only log the events and not block any files from running.</p> </li> <li> <p>Log Size: You can configure the max capacity of the <code>Code Integrity/Operational</code> log size. It is recommended to increase it from the default <code>1MB</code> capacity if you want to begin auditing for App Control events. When the capacity is reached, the log will overwrite the oldest events.</p> </li> <li> <p>Require EVSigners: When this setting is enabled, the policy will only allow files signed by Extended Validation (EV) certificates to run on the system.</p> </li> <li> <p>Enable Script Enforcement: When this setting is enabled, the policy will only allow PowerShell scripts or modules that are signed and their signing certificates are allowed in an App Control policy to run. This greatly reduces the attack surface from the Windows script hosts.</p> </li> <li> <p>Test Mode: Boot Options Menu, such as Safe mode, is disabled for all App Control policies by default. Using Test Mode will allow access to it. It will also automatically enable the <code>Audit</code> mode for the policy in case of a failure in a driver that is critical to system boot. It's only recommended to use this setting in a test environment and not in production due to security reasons.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20AppControl%20Policy/#downloads-defense-measures","title":"Downloads Defense Measures","text":"<p>To combat the threat of more sophisticated malware, a preemptive measure is taken by creating and deploying an App Control policy on the system. This policy blocks the execution of executables and other potentially harmful file types in the Downloads folder.</p> <p>This policy defends the system from malware that can launch itself automatically after being downloaded from the Internet and has the potential to protect against zero-click exploits. The user must ensure the file's safety and explicitly transfer it to a different folder before running it.</p> <p>The App Control policy employs a wildcard pattern to prevent any file from running in the Downloads folder. Additionally, it verifies that the system downloads folder in the user directory matches the downloads folder in the Edge browser's settings. If there is a discrepancy, a warning message is displayed on the console.</p> <p></p> <p></p> <p></p> <p>Creates a custom App Control policy that blocks the execution of the following executables:</p> <ul> <li>wscript.exe</li> <li>mshta.exe</li> <li>cscript.exe</li> </ul> <p>They are insecure, unsandboxed script hosts that pose a security risk.</p> <p></p>"},{"location":"AppControl%20Manager/Create%20Deny%20Policy/","title":"Create Deny Policy","text":"<p>Use AppControl Manager to create Deny App Control policies. Keep in mind that App Control is inherently a whitelisting feature so anything that is not allowed by a policy is already automatically blocked.</p> <p>All Deny policies have Base policy types as other types such as Supplemental cannot have Deny rules in them.</p> <p>All Deny policies have 2 allow all rules so that anything not denied by them will be allowed. This is mandatory for the policy to work. This also allows Deny policies to be deployed side by side with other policies, because for a file to be allowed, it must be allowed by all deployed policies. Read more about side-by-side deployment here.</p> <p></p> <p>Important</p> <p>How to Create an App Control Deny Policy</p> <p></p>"},{"location":"AppControl%20Manager/Create%20Deny%20Policy/#create-a-deny-policy-by-files-or-folders-scan","title":"Create a Deny Policy by Files or Folders Scan","text":"<p>With AppControl Manager, you can easily create a Deny base policy by scanning files or folders.</p>"},{"location":"AppControl%20Manager/Create%20Deny%20Policy/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Browse For Files: Use this button to browse for files on the system. Multiple files can be added at once.</p> </li> <li> <p>Browse for Folders: Use this button to browse for folders on the system. Multiple folders can be added at once.</p> </li> <li> <p>Policy Name: Enter a name for the Deny policy. You will be able to use this name to detect it after deployment in the System Information section of the AppControl Manager.</p> </li> <li> <p>Scalability: Use this gauge to set the number of concurrent threads for the scan. By default, 2 threads are used. Increasing this number will speed up the scan but will also consume more system resources.</p> </li> <li> <p>Select Scan Level: You can choose from different scan levels. Refer to this page for all the information about them.</p> </li> <li> <p>Deploy After Creation: If toggled, only the Deny policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p>Tip</p> <p>Use the View Detected File Details section to view highly detailed results of the files and folder scans.</p> <p></p>"},{"location":"AppControl%20Manager/Create%20Deny%20Policy/#create-a-deny-policy-based-on-package-family-names","title":"Create a Deny Policy Based on Package Family Names","text":"<p>You can create Deny policies for the installed packaged apps. This is useful for only blocking specific apps that are installed on the system.</p>"},{"location":"AppControl%20Manager/Create%20Deny%20Policy/#configuration-details_1","title":"Configuration Details","text":"<ul> <li> <p>Policy Name: Enter a name for the Deny policy.</p> </li> <li> <p>Package Family Names: In this section, you can view the list of all installed apps. Use the search bar to looking for a specific app and after finding them, click/tap on them to select them.</p> </li> <li> <p>Use the \"Select All\" and \"Remove Selections\" buttons to select/deselect all apps currently available in the list.</p> </li> <li> <p>Use the Refresh button to refresh the list of installed apps in case you removed/installed any apps after the list was loaded.</p> </li> <li> <p>Deploy After Creation: If toggled, only the Deny policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Deny%20Policy/#create-a-deny-policy-based-on-custom-pattern-based-file-rules","title":"Create a Deny Policy Based on Custom Pattern-based File Rules","text":"<p>Use this section to create custom pattern-based file rules so that if a file or folder's path matches that pattern, it will be blocked. The pattern is based on regex and supports <code>*</code> and <code>?</code> characters. You can use this feature to create sophisticated file path rules that can dynamically match multiple files or folders.</p> <p>Keep in mind that file rules are only supported for user-mode files. Using file rules for kernel-mode files simply has no effect.</p>"},{"location":"AppControl%20Manager/Create%20Deny%20Policy/#configuration-details_2","title":"Configuration Details","text":"<ul> <li> <p>Policy Name: Enter a name for the Deny policy.</p> </li> <li> <p>Custom Pattern-based File Rule: Enter your pattern in here. It will be used as is without any further modifications to it. What you enter here will be what you see in the XML file.</p> </li> <li> <p>Deploy After Creation: If toggled, only the Deny policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p>Tip</p> <p>Use the More Information section to view examples and description of different patterns that you can use in this section.</p> <p></p>"},{"location":"AppControl%20Manager/Create%20Policy%20From%20Event%20Logs/","title":"Create Policy From Event Logs","text":"<p>This page in AppControl Manager allows you to create Application Control policies directly from local event logs or EVTX files. It focuses on processing Code Integrity and AppLocker event logs to help build tailored policies.</p> <p>This page offers a data grid that has search functionality, sorting, removal of individual logs and copying entire rows or each cell to the clipboard.</p> <p></p>"},{"location":"AppControl%20Manager/Create%20Policy%20From%20Event%20Logs/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Scan Logs: Click this button to initiate a scan of the system for relevant Code Integrity and AppLocker events and display them in the page.</p> </li> <li> <p>Browse for EVTX: Use this option to browse for Code Integrity and/or AppLocker exported EVTX log files. When EVTX log file are selected, pressing the Scan Logs button will scan those instead of the system logs.</p> </li> <li> <p>Create Policy -&gt; Add to policy: Use this option to select an existing Application Control XML policy file. The events you choose will be added directly to this file, expanding its coverage.</p> </li> <li> <p>Create Policy -&gt; Base policy file: This option allows you to specify a base XML policy file. The supplemental policy generated from the event logs will be linked to this base policy.</p> </li> <li> <p>Create Policy -&gt; Base GUID: Enter the GUID of an existing base policy here. The supplemental policy created from the event logs will be associated with this specified GUID.</p> </li> <li> <p>Policy Name: Enter the name of the policy that will be created from the event logs.</p> </li> <li> <p>Filters logs by date: Use the calendar to filter the logs based on date they were generated.</p> </li> <li> <p>Deploy policy after creation: Use this toggle button to tell the application that you want to deploy the policy after creation.</p> </li> <li> <p>Scan Level: You can choose from different scan levels. Refer to this page for all the information about them.</p> </li> <li> <p>Only Use Selected Items: If this button is toggled, only the items in the List View that are highlighted will be added to the Supplemental policy. If this button is not toggled, then everything available in the List View will be added to the Supplemental policy.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Policy%20From%20MDE%20Advanced%20Hunting/","title":"Create Policy From MDE Advanced Hunting","text":"<p>Use this AppControl Manager page to create App Control policies based on Microsoft Defender for Endpoint (MDE) Advanced Hunting exported CSV logs. Refer to this page for more information.</p> <p>This page offers a data grid that has search functionality, sorting, removal of individual logs and copying entire rows or each cell to the clipboard.</p> <p>You can also sign into your tenant to automatically retrieve Advanced Hunting logs related to Application Control and view, process, filter, search and convert them into App Control policies, all within the AppControl Manager application.</p> <p>Performing Advanced Hunting queries requires <code>ThreatHunting.Read.All</code> permission.</p> <p></p>"},{"location":"AppControl%20Manager/Create%20Policy%20From%20MDE%20Advanced%20Hunting/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Filters logs by date: Use the calendar to filter the logs based on date they were generated.</p> </li> <li> <p>Search box: Use this box to search for specific logs based on any available criteria/column.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Policy%20From%20MDE%20Advanced%20Hunting/#local-tab","title":"Local Tab","text":"<ul> <li> <p>Scan Logs: Initially disabled until you select MDE Advanced Hunting CSV logs.</p> </li> <li> <p>Browse for MDE Advanced Huntings logs: Use this button to browse for CSV files containing the Microsoft Defender for Endpoint Advanced Hunting exported CSV logs.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Policy%20From%20MDE%20Advanced%20Hunting/#cloud-tab","title":"Cloud Tab","text":"<ul> <li> <p> Microsoft Graph Button.</p> </li> <li> <p>Device Name: Use this button to display a text box where you can enter a name of a device to filter the logs by before retrieving them. The device name will be included as part of the query that will be forwarded to the MDE Advanced Hunting API and the filtering will happen on the MDE side.</p> </li> <li> <p>Retrieve The Logs: Use this button to retrieve the Advanced Hunting logs that are related to Application Control policies. The logs will be displayed in the data grid.</p> </li> <li> <p>Query Examples: Use this button to view example queries that generate standard logs compatible with the AppControl Manager. If you ever want to submit the Advanced Hunting queries directly in the Defender XDR, you can use the copy button next to each query and paste it in the portal.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Policy%20From%20MDE%20Advanced%20Hunting/#create-tab","title":"Create Tab","text":"<ul> <li> <p>Create Policy -&gt; Add to policy: Use this option to select an existing Application Control XML policy file. The events you choose will be added directly to this file, expanding its coverage.</p> </li> <li> <p>Create Policy -&gt; Base policy file: This option allows you to specify a base XML policy file. The supplemental policy generated from the event logs will be linked to this base policy.</p> </li> <li> <p>Create Policy -&gt; Base GUID: Enter the GUID of an existing base policy here. The supplemental policy created from the event logs will be associated with this specified GUID.</p> </li> <li> <p>Policy Name: Enter the name of the policy that will be created from the MDE Advanced Hunting logs.</p> </li> <li> <p>Scan Level: You can choose from different scan levels. Refer to this page for all the information about them.</p> </li> <li> <p>Actions -&gt; Select All: Use this option to select all the logs in the data grid.</p> </li> <li> <p>Actions -&gt; De-select All: Use this option to deselect all the logs in the data grid.</p> </li> <li> <p>Actions -&gt; Clear Data: Use this option to clear all of the processes and detected logs.</p> </li> <li> <p>Actions -&gt; Deploy Policy After Creation: Use this option to automatically deploy the App Control policy that you create with MDE Advanced Hunting logs to the local system.</p> </li> <li> <p>Only Use Selected Items: If this button is toggled, only the items in the List View that are highlighted will be added to the Supplemental policy. If this button is not toggled, then everything available in the List View will be added to the Supplemental policy.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/","title":"Create Supplemental App Control Policy","text":"<p>Use AppControl Manager to create Supplemental App Control policies for your base policies. Use Supplemental policies to expand the scope of your base policies by allowing more files or applications.</p> <p></p> <p>Important</p> <p>How To Create an App Control Supplemental Policy</p> <p></p> <p>This page has 2 modes of operations:</p> <ol> <li> <p>Create New Policy: In this mode, whenever you create a Supplemental policy, a new policy XML file will be created in the <code>AppControl Manager</code> directory.</p> </li> <li> <p>Add to Existing Policy: In this mode, you will have to select an existing App Control XML policy file so that any policy you create will be directly and automatically added to this policy and no new policy file will be created.</p> </li> <li> <p>When this mode is active, elements related to <code>Policy Name</code> and <code>Base Policy File</code> will be automatically hidden since they won't be needed anymore.</p> </li> </ol> <p></p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#create-a-supplemental-policy-by-files-or-folders-scan","title":"Create a Supplemental Policy by Files or Folders Scan","text":"<p>With AppControl Manager, you can easily create a supplemental policy by scanning files or folders. If an application or file is being blocked by Application Control, use this feature to scan its files or installation directory. This process enables you to generate a supplemental policy that ensures the application or file can run seamlessly on your system.</p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Browse For Files: Use this button to browse for files on the system. Multiple files can be added at once.</p> </li> <li> <p>Browse for Folders: Use this button to browse for folders on the system. Multiple folders can be added at once.</p> </li> <li> <p>Policy Name: Enter a name for the Supplemental policy. You will be able to use this name to detect it after deployment in the System Information section of the AppControl Manager.</p> </li> <li> <p>Base Policy File: Browse for the path to the base policy XML file that this Supplemental policy will be expanding.</p> </li> <li> <p>Scalability: Use this gauge to set the number of concurrent threads for the scan. By default, 2 threads are used. Increasing this number will speed up the scan but will also consume more system resources.</p> </li> <li> <p>Select Scan Level: You can choose from different scan levels. Refer to this page for all the information about them.</p> </li> <li> <p>Deploy After Creation: If toggled, only the supplemental policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p>Tip</p> <p>Use the View Detected File Details section to view highly detailed results of the files and folder scans.</p> <p></p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#create-a-supplemental-policy-from-certificate-files","title":"Create a Supplemental Policy from Certificate Files","text":"<p>If you have certificate <code>.cer</code> files, you can use this feature to scan them and create a Supplemental App Control policy based on them. Once deployed, it will allow any file signed by those certificates to run on the system.</p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#configuration-details_1","title":"Configuration Details","text":"<ul> <li> <p>Browse For Certificates: Use this button to browse for certificate <code>.cer</code> files on the system. Multiple files can be added at once.</p> </li> <li> <p>Policy Name: Enter a name for the Supplemental policy. You will be able to use this name to detect it after deployment in the System Information section of the AppControl Manager.</p> </li> <li> <p>Base Policy File: Browse for the path to the base policy XML file that this Supplemental policy will be expanding.</p> </li> <li> <p>Signing Scenario: Choose between User Mode or Kernel Mode signing scenarios. If you choose User Mode, the supplemental policy will only allow User Mode files signed by that certificate to run and Kernel mode files such as drivers will remain blocked.</p> </li> <li> <p>Deploy After Creation: If toggled, only the supplemental policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#create-isg-based-supplemental-policy","title":"Create ISG-based Supplemental Policy","text":"<p>This supplemental policy does not explicitly permit any files or applications by default. Instead, it leverages the Intelligent Security Graph (ISG) to dynamically evaluate and automatically authorize trusted files and applications.</p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#configuration-details_2","title":"Configuration Details","text":"<ul> <li> <p>Policy Name: Enter a name for the Supplemental policy. You will be able to use this name to detect it after deployment in the System Information section of the AppControl Manager.</p> </li> <li> <p>Base Policy File: Browse for the path to the base policy XML file that this Supplemental policy will be expanding.</p> </li> <li> <p>Deploy After Creation: If toggled, only the supplemental policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#create-kernel-mode-supplemental-policy","title":"Create Kernel-mode Supplemental Policy","text":"<p>This supplemental policy can be created only for Kernel-mode files/drivers, typically after creating and deploying the Strict Kernel-mode base policy. When you press the <code>Create Supplemental Policy</code> button, any logs available in the <code>View Detected Kernel-mode files</code> section will be included in the policy. You can select and delete logs that you don't want to be included.</p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#configuration-details_3","title":"Configuration Details","text":"<ul> <li> <p>Auto Driver Detection: Use this feature to automatically detect all drivers on the system. The results will be available in the <code>View Detected Kernel-mode files</code> section at the bottom.</p> </li> <li> <p>Scan for All Kernel-mode logs: Use this button to scan the entire Code Integrity logs for Kernel-mode files and display the results in the <code>View Detected Kernel-mode files</code> section.</p> </li> <li> <p>Scan for All Kernel-mode logs Since Last Reboot: Use this button to scan the Code Integrity logs that were generated since the last computer reboot for Kernel-mode files and display the results in the <code>View Detected Kernel-mode files</code> section.</p> </li> <li> <p>Policy Name: Enter a name for the Supplemental policy. You will be able to use this name to detect it after deployment in the System Information section of the AppControl Manager.</p> </li> <li> <p>Base Policy File: Browse for the path to the base policy XML file that this Supplemental policy will be expanding.</p> </li> <li> <p>Deploy After Creation: If toggled, only the supplemental policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#create-a-supplemental-policy-based-on-package-family-names","title":"Create a Supplemental Policy Based on Package Family Names","text":"<p>You can create Supplemental policies for the installed packaged apps. These are modern apps packaged in MSIX files, such as the AppControl Manager itself, or many of the apps installed from the Microsoft Store.</p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#configuration-details_4","title":"Configuration Details","text":"<ul> <li> <p>Policy Name: Enter a name for the Supplemental policy.</p> </li> <li> <p>Base Policy File: Browse for the path to the base policy XML file that this Supplemental policy will be expanding.</p> </li> <li> <p>Package Family Names: In this section, you can view the list of all installed apps. Use the search bar to looking for a specific app and after finding them, click/tap on them to select them.</p> </li> <li> <p>Use the \"Select All\" and \"Remove Selections\" buttons to select/deselect all apps currently available in the list.</p> </li> <li> <p>Use the Refresh button to refresh the list of installed apps in case you removed/installed any apps after the list was loaded.</p> </li> <li> <p>Deploy After Creation: If toggled, only the supplemental policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#create-a-supplemental-policy-based-on-custom-pattern-based-file-rules","title":"Create a Supplemental Policy Based on Custom Pattern-based File Rules","text":"<p>Use this section to create custom pattern-based file rules so that if a file or folder's path matches that pattern, it will be blocked. The pattern is based on regex and supports <code>*</code> and <code>?</code> characters. You can use this feature to create sophisticated file path rules that can dynamically match multiple files or folders.</p> <p>Keep in mind that file rules are only supported for user-mode files. Using file rules for kernel-mode files simply has no effect.</p>"},{"location":"AppControl%20Manager/Create%20Supplemental%20Policy/#configuration-details_5","title":"Configuration Details","text":"<ul> <li> <p>Policy Name: Enter a name for the Supplemental policy.</p> </li> <li> <p>Base Policy File: Browse for the path to the base policy XML file that this Supplemental policy will be expanding.</p> </li> <li> <p>Custom Pattern-based File Rule: Enter your pattern in here. It will be used as is without any further modifications to it. What you enter here will be what you see in the XML file.</p> </li> <li> <p>Deploy After Creation: If toggled, only the Supplemental policy XML file will be available in the User Configuration directory at the end of the operation. If it's not toggled, the CIP file will also be made available. Both files will have the same name as the policy name that you choose.</p> </li> </ul> <p>Tip</p> <p>Use the More Information section to view examples and description of different patterns that you can use in this section.</p> <p></p>"},{"location":"AppControl%20Manager/Deploy%20App%20Control%20Policy/","title":"Deploy App Control Policy","text":"<p>Use this AppControl Manager page to select XML policy files or <code>.cip</code> binary files to deploy on the local/cloud systems or convert XML files to CIP files for manual deployment.</p> <ul> <li> Microsoft Graph Button.</li> </ul> <p></p> <p>Important</p> <p>Intune Cloud Deployment</p> <p>Please refer to this page for details on how to upload App Control Policies to Intune using AppControl Manager.</p> <p></p>"},{"location":"AppControl%20Manager/Deploy%20App%20Control%20Policy/#configuration-details-for-unsigned-xml-policy-files-deployment","title":"Configuration Details for Unsigned XML Policy Files Deployment","text":"<ul> <li> <p>Browse: Use this button to browse for App Control XML policy files that you want to deploy as unsigned policies.</p> </li> <li> <p>Deploy: Use this button to deploy all of the XML files you selected on the local or cloud system.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Deploy%20App%20Control%20Policy/#configuration-details-for-signed-xml-policy-files-deployment","title":"Configuration Details for Signed XML Policy Files Deployment","text":"<ul> <li> <p>Browse: Use this button to browse for App Control XML policy files that you want to Sign and deploy.</p> </li> <li> <p>Deploy: Use this button to deploy all of the XML files you selected on the local or cloud system.</p> </li> <li> <p>Sign Only - No Deployment: If you only want to sign the policy without deploying it, you can use this button. It will generate the signed CIP file for you that you can use to manually deploy somewhere else.</p> </li> </ul> <p></p> <p>When signing and deploying App Control Policies, a dialog will be displayed asking for additional information required for signing the policy.</p> <ul> <li> <p>Certificate File: Provide the path to the certificate <code>.cer</code> file. It must be a code signing certificate that is either issued by a public certificate authority (CA) or a self-signed certificate. You can generate a self-signed certificate suitable for App Control policy signing in the certificate building page of the AppControl Manager. The certificate's details will be added to the XML policy as signers. The certificate must exist in the Personal store of the Current User certificate stores with private key.</p> </li> <li> <p>Certificate Common Name: The Common Name (CN) of the same certificate file you select.</p> </li> <li> <p>SignTool Path: The path to the <code>SignTool.exe</code>. If you don't have it, you can toggle the Auto Acquire switch. Auto Acquire will try to first find it on the system by checking for installed Windows SDK, if it cannot find it, it will download it from the official Microsoft server.</p> </li> </ul> <p>Once you've provided all 3 items, press the Verify button. It will verify your inputs and then the Submit button will be enabled, allowing you to proceed with policy signing and deployment.</p> <p>All of the information you submit will be saved in app settings so that the next time they will be automatically populated for you.</p> <p></p>"},{"location":"AppControl%20Manager/Deploy%20App%20Control%20Policy/#configuration-details-for-cip-binary-files-deployment","title":"Configuration Details for CIP Binary Files Deployment","text":"<p>This section can deploy <code>.CIP</code> binary files on the local or cloud system, whether they are signed or unsigned.</p> <ul> <li> <p>Browse: Use this button to browse for App Control <code>CIP</code> binary files that you want to deploy.</p> </li> <li> <p>Deploy: Use this button to deploy all of the CIP files you selected on the local or cloud system.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Deploy%20App%20Control%20Policy/#configuration-details-for-converting-xml-to-cip-files","title":"Configuration Details for Converting XML to CIP Files","text":"<p>Use this section to convert all of your XML files to CIP binaries files in bulk.</p> <ul> <li> <p>Browse: Use this button to browse for App Control XML policy files that you want to convert to <code>CIP</code> binary files.</p> </li> <li> <p>Convert: Use this button to convert all of the selected XML policy files to <code>CIP</code> binary files with the same file names.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Get%20Code%20Integrity%20Hashes/","title":"Get Code Integrity Hashes","text":"<p>Use this AppControl Manager page to calculate Code Integrity hashes of the files. Code Integrity hashes are those that the Code Integrity in Windows primarily uses: SHA1 and SHA2-256 1st page hashes, SHA1 and SHA2-256 Authenticode hashes.</p> <p>Use the browser button to select a file and the hashes will be immediately calculated and displayed on the page.</p> <p>Note</p> <p>If the selected file is non-conformant, the app will calculate the flat hashes of the file and present them as Authenticode hashes. When that happens, the page hashes will be displayed as <code>N/A</code>. This is compliant with how the App Control engine in Windows works.</p> <p></p> <p>This page also calculates the new secure SHA3-384 and SHA3-512 flat file hashes.</p> <p></p>"},{"location":"AppControl%20Manager/Get%20Secure%20Policy%20Settings/","title":"Get Secure Policy Settings","text":"<p>In this AppControl Manager page, you can verify whether a policy with certain secure settings is deployed on the system or not.</p> <p>App Control for Business policies expose a Settings section where policy authors can define arbitrary secure settings. Secure Settings provide local admin tamper-free settings for secure boot enabled systems, with policy signing enabled. Learn more about them in here.</p> <p></p>"},{"location":"AppControl%20Manager/Get%20Secure%20Policy%20Settings/#description-of-the-results","title":"Description of the Results","text":"<ul> <li>Value: The actual value of the string.</li> <li>ValueType: The type of setting: <code>WldpString</code>, <code>WldpInteger</code> or <code>WldpBoolean</code>.</li> <li>ValueSize: the size of the returned value.</li> <li>Status: True/False depending on whether the setting exists on the system.</li> <li>StatusCode: 0 if the value exists on the system, non-zero if it doesn't.</li> </ul>"},{"location":"AppControl%20Manager/Get%20Secure%20Policy%20Settings/#how-to-configure-secure-policy-settings","title":"How To Configure Secure Policy Settings","text":"<p>You can use the set-cipolicysetting PowerShell cmdlet to set a secure setting in an XML policy file.</p>"},{"location":"AppControl%20Manager/Get%20Secure%20Policy%20Settings/#example-1","title":"Example 1","text":"<pre><code>Set-CIPolicySetting -FilePath 'Policy.xml' -Provider 'WDACConfig' -ValueType 'Boolean' -Value '1' -ValueName 'IsUserModePolicy' -Key '{4a981f19-1f7f-4167-b4a6-915765e34fd6}'\n</code></pre>"},{"location":"AppControl%20Manager/Get%20Secure%20Policy%20Settings/#example-2","title":"Example 2","text":"<pre><code>Set-CIPolicySetting -FilePath 'Policy.xml' -Provider 'SomeProvider' -ValueType 'String' -Value 'HotCakeX' -ValueName 'Author' -Key '{495e96a3-f6e0-4e7e-bf48-e8b6085b824a}'\n</code></pre>"},{"location":"AppControl%20Manager/Get%20Secure%20Policy%20Settings/#example-3","title":"Example 3","text":"<pre><code>Set-CIPolicySetting -FilePath 'Policy.xml' -Provider 'Provider2' -ValueType 'DWord' -Value '66' -ValueName 'Role' -Key '{741b1fcf-e1ce-49e4-a274-5c367b46b00c}'\n</code></pre>"},{"location":"AppControl%20Manager/Get%20Secure%20Policy%20Settings/#notes","title":"Notes","text":"<ul> <li> <p><code>DWord</code> value is the same as integer or <code>WldpInteger</code>.</p> </li> <li> <p>In order to set a Boolean value using the <code>Set-CIPolicySetting</code> cmdlet, you need to use 1 for True or 0 for False, that will create a valid policy XML file that is compliant with the CI Policy Schema.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Merge%20App%20Control%20Policies/","title":"Merge App Control Policies","text":"<p>Use the Merge page in the AppControl Manager to combine multiple App Control policies into a single, unified policy. This is especially useful when you want to consolidate multiple policies into one. During the merge process, duplicate rules are automatically removed. You can even select the same policy as both the main source and the merge source to eliminate duplicate rules within a single policy.</p> <p>Additionally, this feature generates astronomically unique IDs for each entry in the policy XML file, utilizing double GUID version 7 for maximum uniqueness. Keep in mind that the length of the IDs do not affect the generated CIP file's size.</p> <p></p>"},{"location":"AppControl%20Manager/Merge%20App%20Control%20Policies/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Merge: This button will begin the merge operation.</p> </li> <li> <p>Deploy: When this toggle button is toggled, the merge operation will deploy the main policy at the end.</p> </li> <li> <p>Select Main Policy: Use this section to select a single App Control XML file. This file will serve as the main policy to which other policies will be merged. If the deploy toggle is enabled, this same policy will be deployed to the system. All rule options, settings, and PolicyIDs in the main policy will remain unchanged.</p> </li> <li> <p>Select other policies: Use this section to browse for one or more App Control XML files. They will be merged with the main policy.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Microsoft%20Graph/","title":"Microsoft Graph","text":"<p>The AppControl Manager offers integration with Microsoft Graph to allow you to manage your Microsoft 365 tenants. This integration allows you to perform various operations such as logging into multiple different tenants and user accounts, and choosing which one to use for each operation.</p> <p></p>"},{"location":"AppControl%20Manager/Microsoft%20Graph/#sign-in","title":"Sign In","text":""},{"location":"AppControl%20Manager/Microsoft%20Graph/#sign-in-button","title":"Sign In button","text":"<p>Use this button to sign in to your Microsoft 365 account. You will be prompted to enter your credentials, and once signed in, you will be able to access the features of the AppControl Manager that require Microsoft Graph access.</p>"},{"location":"AppControl%20Manager/Microsoft%20Graph/#cancel-sign-in","title":"Cancel Sign In","text":"<p>Use this button to cancel the sign-in process. This only works if you've already pressed the Sign In button to initiate the sign in process.</p>"},{"location":"AppControl%20Manager/Microsoft%20Graph/#sign-in-method","title":"Sign In Method","text":"<ul> <li> <p>WebAccountManager: This will launch a native Windows sign-in dialog, allowing you to select any existing accounts or sign into new accounts.</p> </li> <li> <p>WebBrowser: This will launch a web browser window for you to sign in. After signing in the browser, the application will receive the authentication token automatically.</p> </li> </ul>"},{"location":"AppControl%20Manager/Microsoft%20Graph/#authentication-context","title":"Authentication Context","text":"<p>Here you can select the authentication context for the sign-in process. They are groups of permissions that the application will request from Microsoft Graph in order to perform certain operations.</p> <p></p>"},{"location":"AppControl%20Manager/Microsoft%20Graph/#signed-in-accounts","title":"Signed In Accounts","text":""},{"location":"AppControl%20Manager/Microsoft%20Graph/#remove","title":"Remove","text":"<p>After selecting an account from the list, you can remove it by clicking this button. This will log you out of the selected account and remove it from the list of signed-in accounts. It will also completely remove its authentication token from the application's memory.</p>"},{"location":"AppControl%20Manager/Microsoft%20Graph/#set-active-account","title":"Set Active Account","text":"<p>After selecting an account from the list, you can set it as the active account by clicking this button. This will make the selected account the default account for all operations that require Microsoft Graph access in the page you are currently on.</p> <p></p>"},{"location":"AppControl%20Manager/Microsoft%20Graph/#active-account","title":"Active Account","text":"<p>This section shows you the details of the currently active account that will be used for all operations that require Microsoft Graph access in the page you are currently on.</p> <p></p>"},{"location":"AppControl%20Manager/PolicyEditor/","title":"Policy Editor","text":"<p>Leverage the Policy Editor page to effortlessly refine your App Control policy files. With this tool, you can remove individual rules or clear all rules in one action, while accurately displaying the count of each rule type. Seamlessly search for the rule you wish to modify, and easily update policy details such as name, type, version, policy ID info, type ID, base policy ID, and HVCI option level.</p> <p>Eliminate the need for error-prone, manual editing in a text editor. When you modify App Control policies with the Policy Editor, your policy remains fully compliant with the Code Integrity schema throughout the process.</p> <p>This feature also deduplicates any redundant rules or signers within the policy file.</p> <p>Tip</p> <p>You can use this feature to convert CIP binary files back to XML too.</p> <p></p>"},{"location":"AppControl%20Manager/PolicyEditor/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Browse for Policy: Click this button to locate an App Control policy XML or CIP file. You can right-click or tap and hold on this button to preview the selected policy file.</p> </li> <li> <p>Load Policy: Use this button to import the details of the chosen App Control policy into the user interface.</p> </li> <li> <p>Save the Changes: Click this button to commit any modifications back to the selected App Control policy. If the file you are working with is a <code>CIP</code> binary policy, then using this button will save it as XML file with the same name in the <code>AppControl Manager</code> directory in Program Files (if the app is running elevated), or it will save the XML in the same location as the CIP file (if the app is running with standard privilege).</p> </li> <li> <p>Clear the Data: Use this button to reset all data loaded in the interface as a consequence of loading the policy.</p> </li> <li> <p>Text Selection: Toggle this switch to enable or disable text selection within the List Views. When enabled, you can easily select and copy the text displayed in each cell.</p> </li> <li> <p>Search the Data: Enter a keyword in this text box to quickly locate the specific rule you wish to edit.</p> </li> <li> <p>Diamond-shaped button: Press this button to access additional information about the loaded policy, including the precise count of each rule type.</p> </li> <li> <p>Policy Details Tab: In this tab, review and update the policy\u2019s details such as Name, Policy ID, Base Policy ID, Version, HVCI Level, Type, and Policy ID Info.</p> </li> <li> <p>Signature-based Rules Tab: This tab displays rules for the following levels: Publisher, PCA Certificate, Root Certificate, WHQL, WHQL Publisher, Leaf Certificate, Update Policy Signers, and Supplemental Policy Signers.</p> </li> <li> <p>File-based Rules Tab: Here, you will find rules for various types, including Allow and Deny rules (e.g., Hash, PackagedFamilyName, or File Name levels), File Rules, SignedVersion level, File Publisher level, and WHQL File Publisher level.</p> </li> </ul> <p></p> <p>Tip</p> <p>Please note that the IDs shown in the List Views do not correspond to the current IDs in the XML file. Instead, they represent the IDs that will be incorporated once you press the \"Save the Changes\" button.</p> <p></p> <p>Note</p> <p>The Policy Editor organizes each rule for effortless adjustments. For instance, File Publisher or WHQL File Publisher rules are segmented into individual File Attributes. Removing all File Attributes at a specific level will automatically eliminate the associated Signer and any related elements, ensuring your App Control policy remains clean and precise. In essence, a WHQL File Publisher or File Publisher level without any File Attributes effectively reverts to a Publisher or WHQL Publisher.</p> <p></p>"},{"location":"AppControl%20Manager/Privacy%20Policy/","title":"Privacy Policy for the AppControl Manager","text":""},{"location":"AppControl%20Manager/Privacy%20Policy/#introduction","title":"Introduction","text":"<p>Thank you for using AppControl Manager (\"the App\"). This Privacy Policy outlines the data that is stored locally and/or collected while you interact with the App. By using the App, you agree to the terms of this Privacy Policy.</p>"},{"location":"AppControl%20Manager/Privacy%20Policy/#1-information-we-collect","title":"1. Information We Collect","text":"<p>The App stores user configurations in <code>C:\\Program Files\\AppControl Manager</code>. The User Configuration file is a JSON file that includes information such as the path to the <code>SignTool.exe</code> file or path to the XML files created by the app. User has full control over this process and can remove or replace the data at any time. No other kind of information is collected or stored.</p>"},{"location":"AppControl%20Manager/Privacy%20Policy/#2-use-of-your-data","title":"2. Use of Your Data","text":"<p>AppControl Manager offers the ability to sign into your Microsoft tenant(s) for remote policy management, deployment as well as working with the Microsoft Defender for Endpoint (MDE) Advanced Hunting data. As a result, it will receive authentication tokens from the browser you log into in order to make API requests to retrieve the data that you explicitly request. The App Adheres to the least privilege access principle. The authentication tokens are only stored securely in the App's memory and are automatically discarded when you sign out of the tenant inside of the app or exit the app, whichever of those events happens sooner. The App never stores any of such sensitive information on disk.</p>"},{"location":"AppControl%20Manager/Privacy%20Policy/#3-third-party-services","title":"3. Third-Party Services","text":"<p>AppControl Manager does not integrate with any third-party services or tools that may collect or process your personal data. All of the services and features used by the AppControl Manager are 1st party from Microsoft and no data is ever collected or transmitted to the creator of the AppControl Manager. AppControl Manager does not use any 3rd party dependency either.</p>"},{"location":"AppControl%20Manager/Privacy%20Policy/#4-security","title":"4. Security","text":"<p>We prioritize your privacy and security. AppControl Manager goes above and beyond to ensure user security through various means. Please refer to this section of the AppControl Manager's documentation for technical information regarding security.</p>"},{"location":"AppControl%20Manager/Privacy%20Policy/#5-updates-to-the-privacy-policy","title":"5. Updates to the Privacy Policy","text":"<p>We may update this Privacy Policy from time to time. Any changes will be posted on this page, with the updated date at the top. Please review this Privacy Policy periodically for any updates.</p>"},{"location":"AppControl%20Manager/Privacy%20Policy/#6-contact-us","title":"6. Contact Us","text":"<p>If you have any questions or concerns regarding this Privacy Policy or the App, feel free to reach out at the email: spynetgirl@outlook.com or use the same Email in the Microsoft Teams for communication. You can also always post in the GitHub discussions.</p>"},{"location":"AppControl%20Manager/Privacy%20Policy/#7-microsoft-privacy-policy","title":"7. Microsoft Privacy Policy","text":"<p>Please refer to the Microsoft's privacy policy for information collected when installing AppControl Manager through the Microsoft Store.</p>"},{"location":"AppControl%20Manager/Sidebar/","title":"Sidebar","text":"<p>The AppControl Manager features a versatile Sidebar designed to streamline user interactions and enhance productivity. With the Sidebar, you can select a base policy path once and seamlessly reuse it throughout the app, eliminating the need to repeatedly browse for the file.</p> <p>Pages within AppControl Manager that require an XML policy file automatically recognize when a path has been selected in the Sidebar. As you navigate to these pages, subtle indicators appear , prompting you to open the Sidebar and quickly access the pre-selected file path.</p> <p>The Sidebar also includes a toggle switch that, when enabled, automatically assigns newly created base policy paths to the Sidebar. This feature further accelerates workflow and minimizes manual input.</p> <p>By default, the Sidebar displays the XML policy path specified in the App settings, ensuring immediate access to the main policy you work with.</p> <p></p>"},{"location":"AppControl%20Manager/Sidebar/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Sidebar Guide: Use this button to open this page in the browser.</p> </li> <li> <p>Open User Config Directory: Use this button to open the User Configuration directory in File Explorer.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Simulation/","title":"Simulation","text":"<p>The Simulation page in AppControl Manager allows you to simulate an App Control for Business policy deployment. Simply select folders or files and a policy XML file, it will show you whether the selected files would be allowed or blocked by your App Control policy if it was actually deployed on a system and those files were running.</p> <p>There will be very detailed results of each file that participates in the Simulation process. You can use sorting and search features to categories and find the files quickly.</p> <p></p>"},{"location":"AppControl%20Manager/Simulation/#some-use-cases","title":"Some Use Cases","text":"<ul> <li> <p>Have an App Control policy and you want to test whether all of the files of a program will be allowed by the policy without running the program first? Use this App Control simulation to find out.</p> </li> <li> <p>Employ this simulation method to discover files that are not explicitly specified in the App Control policy but are still authorized to run by it due to implicit authorization.</p> </li> <li> <p>Identify files that have hash mismatch and will not be permitted by App Control engine using signature. These files are typically found in questionable software because they are tampered with.</p> </li> <li> <p>And many more use cases...</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/Simulation/#configuration-details","title":"Configuration Details","text":"<ul> <li> <p>Select XML File: Use this button to browse for the App Control XML policy file that will be used for the simulation.</p> </li> <li> <p>Select Files: Use this button to browse for file(s) to be tested against the selected policy.</p> </li> <li> <p>Select Folders: Use this button to browse for folder(s) the files of which will be tested against the selected policy.</p> </li> <li> <p>Scalability: Use the gauge to select the number of threads to be used for the simulation. The more threads you use, the faster the simulation will be completed and the more CPU/Disk resources will be consumed.</p> </li> <li> <p>Cat Root Paths: Browse for one or more folders that contain <code>.cat</code> security catalogs. Security catalogs are signed objects that include the hashes of other files. Code Integrity in Windows uses these files to determine the signing status of unsigned files. The security catalogs in the folders you specify will be used to determine the signing status of the files you are testing.</p> </li> </ul> <p>Tip</p> <p>Files do not need to contain a digital signature in order to be considered as signed in the OS. If a file's hash is included in one of the installed security catalogs on the system, its signing status will be acquired from the security catalog, and it will be considered a signed file.</p> <ul> <li> <p>No Cat Root Scanning: It's a toggle button. You can use it to turn off the scanning of security catalogs that are installed on the system by default. If it is turned off, the results of the simulation might not be accurate if the signing status of some of the files depend on security catalogs to be determined.</p> </li> <li> <p>Save Output to CSV: Use this toggle button to save the output of the App Control Simulation to a CSV file at the end.</p> </li> <li> <p>Clear Data: Use this button to clear the Simulation results data displayed on the page.</p> </li> </ul> <p></p>"},{"location":"AppControl%20Manager/System%20Information/","title":"System Information","text":""},{"location":"AppControl%20Manager/System%20Information/#currently-deployed-policies","title":"Currently Deployed Policies","text":"<p>Use this section in AppControl Manager to view details about the deployed App Control policies on the system.</p> <ul> <li> <p>Search through the list of policies</p> </li> <li> <p>View the rule options in each policy</p> </li> <li> <p>Determine which policy is signed or unsigned (requires Windows 11 24H2 or later/Windows Server 2025 or later, otherwise all policies will appear as <code>unsigned</code> regardless of their actual signing status)</p> </li> <li> <p>Sort the policies using multiple criteria</p> </li> <li> <p>See which policy is Base, Supplemental or System</p> </li> <li> <p>View the version of each policy</p> </li> </ul> <p></p> <p>Tip</p> <p>You can view the version of the Microsoft Vulnerable Driver Block List in this page by checking the box for including System policies in the list.</p> <p></p>"},{"location":"AppControl%20Manager/System%20Information/#policy-removal","title":"Policy Removal","text":"<p>This section also allows you to remove the deployed non-system App Control policies from the system.</p> <p>Whenever you select a policy from the list, the app will automatically present to you the best and most appropriate course of action in order to remove it.</p> <p></p>"},{"location":"AppControl%20Manager/System%20Information/#removing-unsigned-or-supplemental-policies","title":"Removing Unsigned or Supplemental Policies","text":"<p>Unsigned Base or signed/unsigned Supplemental Application Control policies can be removed with a single click/tap of a button. Simply select a policy from the list and then use the Remove button to remove it.</p> <p>Starting with Windows 11 24H2/Windows Server 2025, no reboot is required for unsigned base or supplemental policies.</p> <p></p>"},{"location":"AppControl%20Manager/System%20Information/#removing-signed-base-policies","title":"Removing Signed Base Policies","text":"<p>Signed Base policies require additional information during the removal process. Select a signed policy and then press the Remove button, you will be presented with a dialog asking for additional information.</p> <p></p> <p></p> <ul> <li> <p>Certificate File: Provide the path to the certificate <code>.cer</code> file. The certificate's details must exist in the XML policy file as signers, so ensure it is the same certificate that you used to sign the policy with. The certificate must exist in the Personal store of the Current User certificate stores with private key.</p> </li> <li> <p>Certificate Common Name: The Common Name (CN) of the same certificate file you select.</p> </li> <li> <p>SignTool Path: The path to the <code>SignTool.exe</code>. If you don't have it, you can toggle the Auto Acquire switch. Auto Acquire will try to first find it on the system by checking for installed Windows SDK, if it cannot find it, it will download it from the official Microsoft server.</p> </li> <li> <p>XML File: The path to the XML policy file of the same policy you're trying to remove from the system.</p> </li> </ul> <p>Once all four fields are populated, press the Verify button. This action validates your inputs and enables the Submit button, allowing you to proceed with the removal process. All of the information you submit will be saved in app settings so that the next time they will be automatically populated for you.</p> <p>Following this step, the policy will be re-signed and redeployed on the system with a new rule option labeled Enabled: Unsigned System Integrity Policy.</p> <p>Important</p> <p>After completing this process, restart your system. Since signed policies are tamper-resistant, they leverage Secure Boot and reside in the EFI partition. Upon reboot, select the same signed policy and press the Remove button. The AppControl Manager will detect the policy as safe for removal and delete it from the system without requiring further input. (If you do not reboot your system and attempt to remove the signed policy that was just re-signed and re-deployed, it will lead to boot failure.)</p> <p></p> <p>Note</p> <p>About the Automatic Policies filter option</p> <p>Enabling this checkbox includes supplemental policies named <code>AppControlManagerSupplementalPolicy</code> in the displayed results. Each base policy created and deployed via the AppControl Manager automatically deploys a corresponding supplemental policy with this name. This supplemental policy is essential for the operation of the AppControl Manager application itself. In addition, it contains a FilePublisher rule for <code>SignTool.exe</code>, allowing signing operations to be performed. If you intentionally remove this policy, you will no longer be able to launch the AppControl Manager or use <code>SignTool.exe</code> when certain base policies are active.</p> <p>Note that these supplemental policies are automatically removed when their associated base policy is removed from the system, so no additional action is required on your part.</p> <p>You can view the XML source of the <code>AppControlManagerSupplementalPolicy</code> supplemental policy here.</p> <p></p>"},{"location":"AppControl%20Manager/System%20Information/#swapping-policies","title":"Swapping Policies","text":"<p>You can seamlessly swap any deployed policy on the System Information page. For example, if the \"Allow Microsoft\" policy is active and you want to switch to \"Default Windows,\" simply select \"Default Windows\" from the dropdown menu and confirm your choice. All supplemental policies associated with the base policy will continue to function. Currently, this feature supports only unsigned policies; support for signed policies will be added in a future release.</p> <p></p>"},{"location":"AppControl%20Manager/System%20Information/#online-policies","title":"Online Policies","text":"<p>Use the  Microsoft Graph Button to sign into your account and then press the <code>Retrieve Online Policies</code> button to retrieve any available App Control policies from Intune. They will be populated in the List View where you can see them in detail, sort them, search through them and manage them.</p> <ul> <li>Remove Policy: After selecting an Intune policy, use this button to remove it from Intune. The devices that this policy is deployed to will have to reboot in order for the policy to be fully removed from them.</li> </ul> <p></p>"},{"location":"AppControl%20Manager/System%20Information/#code-integrity-information","title":"Code Integrity Information","text":"<p>In the Code Integrity Information section you can view advanced details about the current status of Code Integrity on the system.</p> <p>You can also check the status of Application Control for Business, including whether User-Mode or Kernel-Mode policies are deployed and whether they are set to Enforced mode or Audit mode.</p> <p></p>"},{"location":"AppControl%20Manager/Update/","title":"Update","text":"<p>Note</p> <p>This page is only available if you installed the AppControl Manager from the GitHub source. If you installed it from Microsoft Store, you will be using Microsoft Store to receive new features and updates.</p> <p>In the AppControl Manager's update page you can configure the app to automatically check for updates at startup. Alternatively, you can manually check for updates or customize the update behavior to use a hardened update procedure for enhanced security.</p> <p>Additionally, you can select an MSIXBundle to install as an update for AppControl Manager. This feature is particularly useful if you've already downloaded the MSIXBundle file from GitHub or built the application from the source code yourself.</p> <p>The update experience is very convenient and non-intrusive because when the app is updated, it won't restart itself, instead it will wait for you to close it and the next time you open it you will be automatically using the new version.</p> <p></p>"},{"location":"AppControl%20Manager/Validate%20Policies/","title":"Validate Policies","text":"<p>Use this AppControl Manager page to validate AppControl Manager XML files against the official schema that is located in <code>C:\\Windows\\schemas\\CodeIntegrity\\cipolicy.xsd</code>.</p> <p>If you manually modified some parts of an App Control policy, this is a great way to ensure your modifications are valid. If the policy is not valid, you will see an error message that will help you understand what is wrong with the policy so you can fix it.</p> <p></p>"},{"location":"AppControl%20Manager/View%20File%20Certificates/","title":"View File Certificates","text":"<p>Use this AppControl Manager page to view highly detailed information about the certificates that are embedded in the signed files on your system. This feature will display the complete chains of all of the signers of a signed file.</p> <p></p> <p>Tip</p> <p>This feature allows you to verify the signing certificates in the <code>.CIP</code> files of signed App Control policies as well.</p> <p></p> <p>Note</p> <p>This feature supports displaying the certificates of the files signed by Security Catalogs.</p> <p></p> <p>The following data is displayed for each member of the certificate chain:</p> Name Description Signer Number A unique identifier assigned to the certificate's signer. If the file is signed by multiple certificates, then each of them will have a different number, allowing you to easily differentiate between them. Type Specifies the type of certificate: root, intermediate, or leaf. Subject Common Name The Common Name (CN) field in the certificate's subject. Issuer Common Name The Common Name (CN) field of the certificate's issuer. Not Before The starting date and time when the certificate becomes valid. Not After The expiration date and time when the certificate is no longer valid. Hashing Algorithm The cryptographic algorithm used to create a hash of the certificate's contents. Serial Number A unique numeric identifier assigned to the certificate by the issuing Certificate Authority (CA). Thumbprint A unique hash value (fingerprint) derived from the entire certificate, used to verify integrity. TBS Hash The hash of the \"To Be Signed\" (TBS) portion of the certificate, ensuring its integrity before signing. Extension OIDs Object Identifiers (OIDs) that define optional extensions, such as key usage, policies, or constraints. <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/","title":"Clean Source principle, Azure and Privileged Access","text":""},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#clean-source-principle","title":"Clean Source principle","text":"<p>The clean source principle states that all security dependencies must be as trustworthy as the object being secured. The source of the control and/or trust must have an equal or higher level of trustworthiness and/or security than the destination.</p> <p>This article reveals the significance of the clean source principle, common short comings, and how it radically transforms the security architecture paradigm.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#a-case-study-of-using-bitlocker-and-tpm-with-nested-vms-in-azure","title":"A Case Study of Using BitLocker and TPM with Nested VMs in Azure","text":"<p>Now that you are generally aware of the Clean Source principle, you might want to try to make an architecture that is resistant to tamper/compromise from upstream systems or identities.</p> <p>We will examine a scenario that may appear very secure and advanced but is still susceptible to side channel attacks because of not adhering to the clean source principle. In this hypothetical scenario, the Global Admin account is compromised, and we want to safeguard our data from admin abuse.</p> <p>Let us assume that you create an Azure VM, which we will refer to as the \u201cHost VM\u201d. We will also create another virtual machine inside of the Host VM using Hyper-V. We will refer to this new guest VM as the \u201cNested VM\u201d. The nested VM\u2019s operating system volume is encrypted with BitLocker. You configure the Key Protectors to be Startup PIN, TPM and a recovery password. Only you have access to the PIN and recovery password of the BitLocker encrypted drive.</p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#how-to-use-bitlocker-in-azure","title":"How to Use BitLocker in Azure","text":"<p>You can utilize Bitlocker in Azure to encrypt the disks of the virtual machines. The service is called Azure Disk Encryption, and it employs Key Vault to store the key instead of a TPM.</p> <p>Key Vaults are extremely economical, and disk encryption does not incur any licensing fees, only Key Vault hosting, which is negligible.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#flaws-of-the-above-mentioned-scenario","title":"Flaws of the Above-Mentioned Scenario","text":"<p>None of the protections mentioned in the scenario can defend against a compromised admin which has gotten Host VM admin permissions. They can install Command and Control (C2) software using the Azure VM guest agent.</p> <p>Once the host VM is compromised, the C2 software can be used as a key logger to steal the startup PIN and authentication credentials of the Nested VM. After the PIN and/or the credentials are stolen, the threat actor can use \u202fPowerShell Direct\u202f to access the virtual machine through the host's hypervisor if it is already booted, or they can boot the Nested VM themselves using the PIN they skimmed.</p> <p>At this point, the nested virtual machine can be booted up, and no brute forcing is needed.</p> <p>Another attack path is if they download the Nested VM\u2019s disks, they can offline attack the VM once they gain access to the recovery key or the key that is stored in the vTPM of the Nested VM\u2019s hypervisor which is on the disk of the host VM. All software based KSPs just get decoded at runtime and there are tools to skim the decoded value.</p> <p>When the nested VM is running, the system sees the disk as plain text, not encrypted. BitLocker encryption is transparent drive encryption, not encryption in use. (For encryption in use, I recommend something like Microsoft Purview\u202fon the data itself.)</p> <p>BitLocker is not easy to brute force if the right algorithms are configured (XTS-AES-256) so they would not want to go that direction in most cases.</p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#what-if-you-deploy-a-signed-wdac-policy-on-the-host-vm","title":"What if You Deploy a Signed WDAC Policy on the Host VM?","text":"<p>You could, but what would prevent the threat actor from disabling it on the host? The host is controlled by the threat actor in this scenario and not having the private keys of the deployed signed policy won't matter.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#so-what-alternative-will-the-threat-actor-pursue","title":"So, What Alternative Will the Threat Actor Pursue?","text":"<p>They could simply download the VHDX of the main host (Azure virtual machine), extract the nested VHDX that pertains to the guest operating system, construct a new operating system with your data in it but devoid of security, upload that and await your login. You would remain oblivious to the tampering since the operating system is identical but bereft of security, or the threat actor can even deploy their own signed policy on the new operating system.</p> <p>Bear in mind, host compromise entails all security dependencies are also compromised. So, you must presume through some black magic that your guest is compromised. What happens if they alter Hyper-V's binaries to perform custom stuff?</p> <p>You can technically insert custom guest firmware. Custom firmware is not officially supported and is usually used by pirates to get ACPI tables altered to activate Windows for free.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#clean-source-and-assume-breach-principle-a-match-made-in-heaven","title":"Clean Source and Assume Breach Principle, a Match Made in Heaven","text":"<p>It is not only virtual machines that are mistaken to be secure, but also jump boxes (RDP) and session manager apps (PAM) are insufficiently secure. The problem with RDP and PAMs is session hijacking. You can use keyboard and mouse takeover capabilities to control anything downstream without having to install any malware, because the system that is running the RDP client / session manager app is technically in charge of the secure system.</p> <p>The control and/or trust that is being originated from hardware is insecure and propagated downstream through the remote-control apps. So, all insecure states can be transmitted onto the secure systems, and you do not even have to install anything on the remote systems to compromise them.</p> <p>Clean source done right will prevent session takeovers, because the system hosting the session will be as secure as the upstream system requires.</p> <p>However, on Azure, things are much superior. Azure is a hosting fabric that receives commands from an admin. The admin must be hosted on a secure system, which is where the PAW comes in. Azure fabric itself is more secure than anything you can provide.</p> <p>The guest has to abide by the rules of its host, and the host has to conform to the rules of Azure, and Azure adheres to the rules of the admins, so by proxy, the guest complies with the rules of the admins, because the chain of control/trust flows through the host virtual machine. Any type of direct guest guarding is futile.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#so-what-is-the-solution","title":"So, What Is the Solution?","text":"<p>What you desire is to create something that can remain protected in most hostile environment and preserve its integrity.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#introducing-privileged-access-workstations-paw","title":"Introducing Privileged Access Workstations (PAW)","text":"<p>PAW is the highest security configuration designed for extremely sensitive roles that would have a significant or material impact on the organization if their account was compromised. The PAW configuration includes security controls and policies that restrict local administrative access and productivity tools to minimize the attack surface to only what is absolutely needed for performing sensitive jobs or tasks.</p> <p>Often, the servers are considerably less secure than the PAW itself. Likewise with intermediaries, they are usually less secure than the PAW itself. Consequently, the session host and/or client is not the weakest chain link. Which also implies that the clean source principle is kept at least on the start of the chain.</p> <p>For more of a do-it-your-self experience, check out my harden windows security repository over at GitHub.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#azure-confidential-compute","title":"Azure Confidential Compute","text":"<p>Confidential computing is an industry term defined by the Confidential Computing Consortium (CCC) - a foundation dedicated to defining and accelerating the adoption of confidential computing. The CCC defines confidential computing as: The protection of data in use by performing computations in a hardware-based Trusted Execution Environment (TEE).</p> <p>Unlike Guarded hosts, Azure confidential compute VMs use Intel SGX or AMD's Secure Encrypted Virtualization-Secure Nested Paging, or SEV-SNP.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#conclusion","title":"Conclusion","text":"<p>In this article, we have explored the clean source principle, which states that all security dependencies must be as trustworthy as the object being secured. We have seen how this principle can help us design more secure architectures and avoid common pitfalls that can compromise our data and systems.</p> <p>We have also learned about some of the solutions that Microsoft offers to help us achieve clean source, such as Privileged Access Workstations (PAW) and Azure Confidential Compute. These solutions leverage advanced technologies such as Intel SGX and AMD SEV-SNP to protect our sensitive workloads from upstream attacks and side channel threats.</p> <p>By following the clean source principle and using these solutions, we can enhance our security posture and reduce our risk exposure in the cloud and beyond.</p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/","title":"How to Securely Connect to Azure VMs and Use RDP","text":""},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#what-are-azure-vms","title":"What Are Azure VMs","text":"<p>Azure Virtual Machines (VMs) run on Microsoft\u2019s cloud computing platform, Azure. They allow users to create, manage, and scale their own virtualized infrastructure in the cloud, without having to invest in physical hardware or deal with maintenance issues.</p> <p>To establish a secure connection to your Azure VM, you need to make some preparations. You can avoid exposing your VM\u2019s RDP port to the Internet, which reduces the risk of port scanning and brute force attacks.</p> <p>None of the methods described below require you to assign a public IP address or open inbound ports in your Azure VM. They only need a virtual network with a private IP address assigned to the Azure VM.</p> <p></p> <p></p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#bastion","title":"Bastion","text":"<p>Azure Bastion uses TLS encryption and firewall traversal for RDP connections, which means your traffic is more secure and less vulnerable to attacks. You also don\u2019t need to manage network security groups (NSGs) for your VM, as you can configure them to allow RDP only from Azure Bastion</p> <ul> <li> <p>What is Azure Bastion?</p> </li> <li> <p>Azure Bastion FAQ</p> </li> </ul> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#there-are-many-ways-to-use-bastion-to-connect-to-your-azure-vm","title":"There Are Many Ways to Use Bastion to Connect to Your Azure VM","text":"<ul> <li> <p>Use your browser in Azure portal to access your VM using web technologies. Bastion from the web browser is as secure as using it with native client.</p> </li> <li> <p>With Shareable link, you just go to Bastion in Azure portal, select the Bastion instance, navigate to Shareable links and create a new link.</p> </li> <li> <p>Bastion and the Windows native client, the reason we use native client, in this article, is because it allows us to copy and paste files between our local computer and the Azure VM.</p> </li> <li> <p>And more...</p> </li> </ul> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#lets-get-started-with-using-bastion-with-native-client","title":"Let's Get Started With Using Bastion with Native Client","text":"<ol> <li>First get the Bastion ready by Configuring it for native client connections</li> </ol>  Screenshots  <ol> <li>Install Azure CLI on your computer. There are many ways to do that but the easiest way is using Winget:</li> </ol> <pre><code>winget install -e --id Microsoft.AzureCLI\n</code></pre> <ol> <li>Log in to your Azure account, a web page will open.</li> </ol> <pre><code>az login\n</code></pre> <ol> <li> <p>Gather the following details needed for the next command</p> <ul> <li>Bastion name, you can find it by going to your Azure VM and search for \"Bastion\"</li> <li>Azure Resource Group name</li> <li>The VM's Resource ID. The Resource ID can be easily located in the Azure portal. Go to the Overview page for your VM and select the JSON View link to open the Resource JSON. Copy the Resource ID at the top of the page.</li> </ul> </li> <li> <p>Log into RDP, paste this in PowerShell</p> </li> </ol> <pre><code>az network bastion rdp --name \"&lt;BastionName&gt;\" --resource-group \"&lt;ResourceGroupName&gt;\" --target-resource-id \"&lt;VMResourceId&gt;\"\n</code></pre> <p></p> <p>You now have a secure connection to your Azure VM using Bastion Native Client.</p> <p></p> <p></p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#using-azure-vpn-gui-method","title":"Using Azure VPN - GUI Method","text":"<p>Azure VPN Gateway connects your on-premises networks to Azure, or connects Azure virtual networks together, through VPN setups such as Site-to-Site, Point-to-Site etc. The connectivity is secure and uses the industry-standard protocols such as SSTP, IKEv2, OpenVPN etc.</p> <p>We need a resource group first because we're going to need a few components: Azure Virtual Network, Azure Public IP address, Azure VPN Gateway. We can either install everything in a separate group or install them in the same resource group as Azure VMs. It will work either way. For this guide, all of the resources reside in the same location, which is UK South.</p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-resource-group","title":"Create a Resource Group","text":"<ul> <li>Create a new Resource Group named <code>ResourceGroup1</code></li> <li>Set its location to <code>UK South</code> (you can set it to somewhere else that is closer to your physical location).</li> </ul>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-virtual-network-with-subnets","title":"Create a Virtual Network With Subnets","text":"<ul> <li> <p>From Azure Portal &gt; Virtual Networks &gt; Create Virtual Network</p> </li> <li> <p>Name it <code>VirtualNetwork1</code></p> </li> <li> <p>Set the IP address space of the Virtual Network to something like <code>10.0.0.0/14</code></p> </li> <li> <p>Create a new subnet named <code>Default</code> and set its address range to <code>10.0.0.0/24</code></p> </li> <li> <p>Create another subnet named <code>GatewaySubnet</code>. Set its address range to <code>10.0.1.0/24</code>. This is for Azure Virtual Network Gateway.</p> </li> </ul>  Screenshots  <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-vm-skip-if-you-already-have-one","title":"Create a VM - Skip if You Already Have One","text":"<p>Create a VM in Azure and do not allow any open ports from Internet. Do not assign any public IP to the VM.</p> <p>In the Virtual Network section, choose the <code>VirtualNetwork1</code> for the VM and set its <code>Default</code> Subnet accordingly.</p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-virtual-network-gateway","title":"Create a Virtual Network Gateway","text":"<ul> <li> <p>From Azure Portal &gt; Virtual Network Gateways &gt; Create Virtual Network Gateway</p> </li> <li> <p>Name it <code>VNGateWay1</code></p> </li> <li> <p>Select a Generation 2 SKU such as <code>VpnGw2</code></p> </li> <li> <p>In the Virtual Network section, select the Virtual Network that we created earlier, called \"VirtualNetwork1\"</p> </li> <li> <p>Create a new Public IP address called <code>PublicIP1</code></p> </li> <li> <p>Configure Active-Active mode based on your preference. More info</p> <ul> <li>It provides redundancy and failover feature by establishing 2 simultaneous connections from your local machine to Azure network. The VPN Gateway will have 2 public IP addresses and your computer will connect to both of them at the same time.</li> </ul> </li> <li> <p>Create the Virtual Network Gateway now</p> </li> <li> <p>Wait for it to complete</p> </li> </ul>  Screenshot  <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-point-to-site-vpn-connection","title":"Create a Point-To-Site VPN Connection","text":"<ul> <li> <p>Go to the VNGateWay1, Access \"Point-to-site configuration\" under settings section</p> </li> <li> <p>Select Configure Now.</p> </li> <li> <p>Enter <code>20.20.0.0/16</code> in the Address pool.</p> </li> <li> <p>Set Tunnel type to <code>IKEv2 and SSTP</code>. The VPN will use secure built-in protocols in Windows without the need for any 3rd party software.</p> </li> <li> <p>Set Authentication Type to Azure Certificate.</p> </li> <li> <p>Create self-signed Root and Client certificates on your local computer if you don't already have the required certificates.</p> <ul> <li> <p>Use the PowerShell Code below to automate it.</p> </li> <li> <p>Generate and export certificates for point-to-site using PowerShell</p> </li> <li> <p>Step-By-Step: Creating an Azure Point-to-Site VPN</p> </li> <li> <p>Configure server settings for P2S VPN Gateway connections - certificate authentication - Azure portal</p> </li> </ul> </li> <li> <p>In the Root Certificates section, enter a name such as <code>RootCertificate1</code> and in the \"Public certificate data\" field enter the root certificate's <code>.cer</code> file content, by copying and pasting it from the file and excluding <code>-----BEGIN CERTIFICATE-----</code> and <code>-----END CERTIFICATE-----</code>.</p> <ul> <li> <p>Export the Root certificate from the Users Personal certificates store, without private keys, as <code>Base-64 encoded X.509 (.CER)</code>, and open it with Notepad.</p> </li> <li> <p>Export the Client certificate from the Users Personal certificates store, with private keys, as <code>PKCS #12 (.PFX)</code>. You need to install it on the computer that you're going to use to connect to the VPNGateway and Azure VM.</p> </li> </ul> </li> <li> <p>Save the configurations and wait for it to complete.</p> </li> <li> <p>Now access the VPNGateway again, navigate to the \"Point-to-site configuration\" section, Use the \"Download VPN Client\" button to download the required files.</p> </li> <li> <p>Run the VPN client on the same computer you install the <code>.pfx</code> certificate on.</p> </li> </ul>  Screenshot  <p></p> <p>You can connect to other VMs (using RDP) on the same subnet using their private IPs from inside a VM.</p> <p>When you don't assign a public IP to a VM, it will only have a private IP address; You can verify this from Control Panel inside the OS.</p>  Screenshots  <p></p> <p></p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#using-azure-vpn-cloud-powershell-method","title":"Using Azure VPN - Cloud PowerShell Method","text":""},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#run-on-azure-cloud-powershell","title":"Run on Azure Cloud PowerShell","text":"<pre><code># get all of the available location for Azure resources\nGet-AzLocation | Format-Table -Property Location, DisplayName\n\n# Create a new Resource Group\nNew-AzResourceGroup -Name 'ResourceGroup1' -Location uksouth\n\n# Create a new Virtual Network\nNew-AzVirtualNetwork -ResourceGroupName 'ResourceGroup1' -Location 'uksouth' -Name 'VirtualNetwork1' -AddressPrefix '10.0.0.0/14'\n\n# Get the virtual network we created\n$VirtualNetwork1 = Get-AzVirtualNetwork -ResourceGroupName 'ResourceGroup1' -Name 'VirtualNetwork1'\n\n# Add a new subnet to the virtual network named default\nAdd-AzVirtualNetworkSubnetConfig -Name 'Default' -AddressPrefix '10.0.0.0/24' -VirtualNetwork $VirtualNetwork1\n\n# Add the GateWay subnet to the virtual network\nAdd-AzVirtualNetworkSubnetConfig -Name 'GatewaySubnet' -AddressPrefix '10.0.1.0/24' -VirtualNetwork $VirtualNetwork1\n\n# Apply the configurations to the virtual network\n$VirtualNetwork1 | Set-AzVirtualNetwork\n\n# Create a public IP address\nNew-AzPublicIpAddress -Name 'PublicIP1' `\n    -ResourceGroupName 'ResourceGroup1' `\n    -Location 'uksouth' `\n    -AllocationMethod 'Static'\n\n# Get the Public IP address\n$PublicIP1 = Get-AzPublicIpAddress -Name 'PublicIP1' -ResourceGroupName 'ResourceGroup1'\n\n# Get the virtual network\n$VirtualNetwork1 = Get-AzVirtualNetwork -ResourceGroupName 'ResourceGroup1' -Name 'VirtualNetwork1'\n\n# Get the subnet that belongs to Virtual network Gateway from our Virtual Network\n$VN1GatewaySubnet = Get-AzVirtualNetworkSubnetConfig -Name 'GatewaySubnet' -VirtualNetwork $VirtualNetwork1\n\n# Specify the details of the IP Config for the Virtual Network Gateway\n$IpConfigurations1 = New-AzVirtualNetworkGatewayIpConfig -Name 'IpConfigurations1' -Subnet $VN1GatewaySubnet -PublicIpAddress $PublicIP1\n\n# Create the Virtual Network Gateway - This can take a few minutes to complete\nNew-AzVirtualNetworkGateway -Name 'VNGateWay1' `\n    -ResourceGroupName 'ResourceGroup1' `\n    -Location 'uksouth' `\n    -IpConfigurations $IpConfigurations1  `\n    -GatewayType 'Vpn' `\n    -VpnType 'RouteBased' `\n    -GatewaySku 'VpnGw2' `\n    -VpnGatewayGeneration 'Generation2'\n</code></pre>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#run-on-your-local-computer","title":"Run on Your Local Computer","text":"<pre><code># Create Root Certificate\n$RootCert = New-SelfSignedCertificate -Type Custom -KeySpec Signature `\n    -Subject 'CN=AzureVirtualGateway1RootCert' -KeyExportPolicy Exportable `\n    -HashAlgorithm sha512 -KeyLength 4096 `\n    -CertStoreLocation 'Cert:\\CurrentUser\\My' -KeyUsageProperty Sign -KeyUsage CertSign `\n    -NotAfter (Get-Date).AddYears(10)\n\n# Create Client Certificate\n$ClientCert = New-SelfSignedCertificate -Type Custom -DnsName 'AzureVirtualGateway' -KeySpec Signature `\n    -Subject 'CN=AzureVirtualGateway1ClientCert' -KeyExportPolicy Exportable `\n    -HashAlgorithm sha512 -KeyLength 4096 `\n    -CertStoreLocation 'Cert:\\CurrentUser\\My' `\n    -Signer $RootCert -TextExtension @('2.5.29.37={text}1.3.6.1.5.5.7.3.2') `\n    -NotAfter (Get-Date).AddYears(10)\n\n# Get the RAW content of the Root certificate for upload to Azure - will be copied to your clipboard\n[System.Convert]::ToBase64String($RootCert.RawData) | clip\n\n# Export the Client certificate with private keys as PFX file\nExport-PfxCertificate -Cert $ClientCert `\n-FilePath \".\\P2SClientCert.pfx\" `\n-Password $(ConvertTo-SecureString -String \"123\" -Force -AsPlainText) -CryptoAlgorithmOption AES256_SHA256 -Force\n</code></pre>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#run-on-azure-cloud-powershell_1","title":"Run on Azure Cloud PowerShell","text":"<pre><code>$p2srootcert = \"&lt;Root certificate's .cer file's content that is between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----&gt;\"\n\n$RootCertificateAzure = New-AzVpnClientRootCertificate -PublicCertData $p2srootcert -Name 'VPNRootCertificate'\n\n$Gateway = Get-AzVirtualNetworkGateway -ResourceGroupName 'ResourceGroup1' -Name 'VNGateWay1'\n\nSet-AzVirtualNetworkGateway -VirtualNetworkGateway $Gateway `\n    -VpnClientRootCertificate $RootCertificateAzure `\n    -VpnClientAddressPool '20.20.0.0/16' `\n    -VpnAuthenticationType 'Certificate' `\n    -VpnClientProtocol 'SSTP', 'IkeV2'\n\n# Download the VPN client using Azure CLI command\naz network vnet-gateway vpn-client generate --resource-group ResourceGroup1 --name VNGateWay1\n</code></pre>  \u26a1 Click/Tap here for info about Cmdlets used in the PowerShell commands \u26a1  <ul> <li><p>Get-AzLocation</p> </li> <li><p>New-AzResourceGroup</p> </li> <li><p>New-AzVirtualNetwork</p> </li> <li><p>Get-AzVirtualNetwork</p> </li> <li><p>Add-AzVirtualNetworkSubnetConfig</p> </li> <li><p>Set-AzVirtualNetwork</p> </li> <li><p>New-AzVirtualNetworkGateway</p> </li> <li><p>New-AzVirtualNetworkGatewayIpConfig</p> </li> <li><p>Get-AzVirtualNetworkSubnetConfig</p> </li> <li><p>Get-AzPublicIpAddress</p> </li> <li><p>New-AzPublicIpAddress</p> </li> <li><p>New-AzVpnClientRootCertificate</p> </li> <li><p>Get-AzVirtualNetworkGateway</p> </li> <li><p>Set-AzVirtualNetworkGateway</p> </li> <li><p>New-SelfSignedCertificate</p> </li> <li><p>Export-PfxCertificate</p> </li> <li><p>az network vnet-gateway vpn-client</p> </li> </ul> <p></p>"},{"location":"C%23/C%23%20Tips%20And%20Tricks%20Part%201/","title":"C# Tips And Tricks Part 1","text":"<p>This is part 1 of the C# Tips And Tricks series. These are not tutorials, but rather a collection of notes and tips that can be useful for beginners. They are updated regularly with more info.</p> <p></p>"},{"location":"C%23/C%23%20Tips%20And%20Tricks%20Part%201/#do-not-manually-reference-assemblies-or-dlls","title":"Do Not Manually Reference Assemblies or DLLs","text":"<p>When working in the modern IDE, Visual Studio 2022 and with .NET, you do not need to reference .NET dlls manually, they will be available to your project automatically.</p> <p>If you need to reference a DLL that is not part of the .NET by default, then use the Nuget package manager to add it.</p> <p>So if you have lines like this in your <code>.csproj</code> file, remove them completely.</p> <pre><code>&lt;ItemGroup&gt;\n   &lt;Reference Include=\"Security.Cryptography\"&gt;\n       &lt;HintPath&gt;\"Path To .DLL file\"&lt;/HintPath&gt;\n   &lt;/Reference&gt;\n   &lt;Reference Include=\"System\"&gt;\n       &lt;HintPath&gt;\"Path To .DLL file\"&lt;/HintPath&gt;\n   &lt;/Reference&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <p></p> <p>Nuget Package references look like this</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"System.Management\" Version=\"9.0.0\" /&gt;\n    &lt;PackageReference Include=\"System.Management.Automation\" Version=\"7.5.\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <p></p>"},{"location":"C%23/C%23%20Tips%20And%20Tricks%20Part%201/#how-to-activate-wpf-and-winforms-in-your-c-project","title":"How To Activate WPF and WinForms in Your C# Project","text":"<p>When working with WPF or Windows Forms, additional assemblies need to be made available to your project.</p> <p>Use the following line in your <code>.csproj</code> file to enable WPF assemblies</p> <pre><code>&lt;UseWpf&gt;true&lt;/UseWpf&gt;\n</code></pre> <p>Use the following line in your <code>.csproj</code> file to enable Windows Forms assemblies</p> <pre><code>&lt;UseWindowsForms&gt;true&lt;/UseWindowsForms&gt;\n</code></pre> <p>They are MSBuild properties, you can read more about them on this page.</p> <p></p>"},{"location":"C%23/C%23%20Tips%20And%20Tricks%20Part%201/#how-to-make-non-code-files-in-your-solution-available-to-your-code-after-compilation","title":"How To Make Non-Code Files In Your Solution Available To Your Code After Compilation","text":"<p>If you have non-code files in your solution explorer, such as <code>.XML</code>, <code>.CSV</code>, <code>.JSON</code> files etc. that you want to be available to your code after compilation, maybe because they rely on them and they are important resources for your application, you can configure your project to automatically copy them to the output folder after compilation.</p> <p>For example, use the following code in your <code>.csproj</code> file to make everything in the <code>Resources</code> folder, which is in the <code>Main</code> folder, copied to the output folder after compilation. The exact folder structure will be preserved.</p> <pre><code>&lt;ItemGroup&gt;\n    &lt;Content Include=\"Main\\Resources\\**\"&gt;\n        &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;\n    &lt;/Content&gt;\n&lt;/ItemGroup&gt;\n</code></pre> <p></p>"},{"location":"C%23/C%23%20Tips%20And%20Tricks%20Part%201/#alternative-way-copying-to-the-output-directory","title":"Alternative Way | Copying To The Output Directory","text":"<p>You can navigate to an individual file in your solution explorer, right-click on it and select Properties, in the Copy To Output Directory property select Copy always.</p> <p></p> <p>You can access the output directory using the following variable</p> <pre><code>AppDomain.CurrentDomain.BaseDirectory\n</code></pre> <p>So in the example above, the files will be in the following directory</p> <pre><code>Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"Main\", \"Resources\")\n</code></pre> <p></p>"},{"location":"C%23/C%23%20Tips%20And%20Tricks%20Part%201/#alternative-way-embedding","title":"Alternative Way | Embedding","text":"<p>There are of course other options, such as designating/embedding the file as a resource of your application.</p> <p>To do that first navigate to the file and right-click on it, select Properties, and in the Build Action property select Embedded Resource.</p> <p>Then you can access the file using the following code</p> <pre><code>using System;\nusing System.IO;\nusing System.Reflection;\n\nnamespace HardenWindowsSecurity\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Specify the resource name\n            string resourceName = \"HardenWindowsSecurity.Main_files.Resources.XAML.Main.xaml\";\n\n            // Load the resource from the assembly\n            var assembly = Assembly.GetExecutingAssembly();\n            using (Stream stream = assembly.GetManifestResourceStream(resourceName))\n            using (StreamReader reader = new StreamReader(stream))\n            {\n                // Read the content of the XAML file as a string\n                string xamlContent = reader.ReadToEnd();\n                // Print the content to the console\n                Console.WriteLine(xamlContent);\n            }\n        }\n    }\n}\n</code></pre> <p></p> <p>Or use this code to load the XAML GUI</p> <pre><code>using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Windows;\nusing System.Windows.Markup;\n\nnamespace HardenWindowsSecurity\n{\n    class Program\n    {\n        [STAThread]\n        static void Main()\n        {\n            System.Windows.Application app = new System.Windows.Application();\n\n            // Get the current assembly\n            Assembly assembly = Assembly.GetExecutingAssembly();\n\n            // Define the resource path\n            string resourcePath = \"HardenWindowsSecurity.Main_files.Resources.XAML.Main.xaml\";\n\n            // Load the XAML file as a stream\n            using (Stream stream = assembly.GetManifestResourceStream(resourcePath))\n            {\n                if (stream == null)\n                {\n                    Console.WriteLine(\"Failed to load XAML resource.\");\n                    return;\n                }\n\n                // Load the XAML from the stream\n                Window window = (Window)XamlReader.Load(stream);\n\n                // Show the window as a dialog\n                window.ShowDialog();\n            }\n        }\n    }\n}\n</code></pre> <p></p> <p>Or use this code to get the name of the embedded resources</p> <pre><code>using System;\nusing System.Reflection;\n\nnamespace HardenWindowsSecurity\n{\n    class Program\n    {\n        [STAThread]\n        static void Main()\n        {\n            // Get the current assembly\n            Assembly assembly = Assembly.GetExecutingAssembly();\n\n            // List all resource names\n            foreach (string resourceName in assembly.GetManifestResourceNames())\n            {\n                Console.WriteLine(resourceName);\n            }\n        }\n    }\n}\n</code></pre> <p></p> <ul> <li> <p>When you set a file as an Embedded Resource in Visual Studio, it gets compiled into the assembly (i.e., your project's output file, such as .exe or .dll). This means the file becomes a part of the compiled binary and can be accessed programmatically using reflection.</p> </li> <li> <p>The resource name is critical as it follows a specific pattern: Namespace.FolderStructure.Filename.</p> </li> <li> <p>If your project's default namespace is <code>YourNamespace</code>, and your XAML file is located in <code>\"Main files\"/Resources/XAML/Main.xaml</code>, the resource name would be <code>YourNamespace.Main_files.Resources.XAML.Main.xaml</code>.</p> </li> <li> <p><code>Assembly.GetExecutingAssembly()</code>: This method returns the assembly that contains the code currently executing. This is important because your embedded resource is part of this assembly.</p> </li> <li> <p><code>GetManifestResourceStream</code>: This method retrieves the resource stream (a sequence of bytes) of the embedded resource based on its name. The method returns a Stream object that you can use to read the content of the resource.</p> </li> <li> <p><code>StreamReader</code>: This class is used to read characters from a stream. Since <code>GetManifestResourceStream</code> returns a stream, we wrap it in a <code>StreamReader</code> to easily read the text content.</p> </li> </ul> <p></p>"},{"location":"C%23/C%23%20Tips%20And%20Tricks%20Part%201/#why-use-embedded-resources","title":"Why Use Embedded Resources?","text":"<ul> <li> <p>Portability: Since the resource is embedded in the assembly, you don't have to worry about distributing external files with your application.</p> </li> <li> <p>Security: The resource is somewhat protected since it\u2019s part of the compiled binary, making it harder (though not impossible) for others to tamper with the file.</p> </li> <li> <p>Ease of Access: Accessing resources via the assembly makes it straightforward, as you don't need to deal with file paths, especially when deploying your application.</p> </li> <li> <p>This method is powerful for scenarios where you want to package files directly within your application and access them as needed.</p> </li> </ul> <p></p>"},{"location":"C%23/C%23%20Tips%20And%20Tricks%20Part%201/#static-vs-non-static-classes","title":"Static vs Non-Static Classes","text":"<p>Static classes have fewer functionalities compared to non-static classes. They are designed to serve specific purposes, such as defining global constants, variables, utility functions, or methods that perform similar operations. Because a static class is meant to be a container for these static members, it cannot be instantiated. This means that you cannot create objects from a static class. Instead, all its members must be accessed using the class name itself.</p> <p>Non-static classes, on the other hand, are much more versatile. They can do everything a static class can do and offer many additional features. For example, non-static classes can be instantiated, meaning you can create objects from them. These objects can represent custom types, holding state and behavior specific to each instance. This allows you to create multiple objects from the same class, each with its own unique state and/or property.</p> <p>Non-static classes can contain both static and non-static members. Static members of a non-static class are shared among all instances and are accessed using the class name, just like in a static class. Instance members, however, belong to each specific object and are accessed through that object.</p> <p>To access static members in both static and non-static classes, you use the same syntax: <code>ClassName.Member</code>. This allows consistent access patterns, regardless of whether the class is static or not.</p> <p></p>"},{"location":"C%23/C%23%20Tips%20And%20Tricks%20Part%201/#a-less-known-reason-why-xaml-hot-reload-might-not-work-in-visual-studio-and-visual-studio-blend","title":"A Less Known Reason Why XAML Hot Reload Might Not Work In Visual Studio And Visual Studio Blend","text":"<p>Microsoft has a troubleshooting documentation for XAML Hot Reload feature but there is one important thing they don't mention, your WPF GUI needs to be using the Application context/object, not Window, for Hot Reload feature to function.</p> <p>If your WPF GUI only uses the Window object, then the Hot Reload feature will not work.</p> <p></p>"},{"location":"GitHub/Cloning%20Personal%20and%20Enterprise%20Repositories%20Using%20GitHub%20Desktop/","title":"Cloning Personal and Enterprise Repositories Using GitHub Desktop","text":"<p>GitHub Desktop enables you to effortlessly clone and manage repositories using a user-friendly graphical interface. GitHub offers various types of repositories, such as personal, Enterprise Cloud and Enterprise Server (Self-Hosted). All of them can either be configured as public or private.</p> <p>Cloning a GitHub Enterprise Cloud repository differs from cloning a personal repository. GitHub personal repositories necessitate you to provide the clone URL or simply authenticate with your personal GitHub account credentials.</p> <p>GitHub Enterprise Cloud repositories, however, require SSO (Single Sign-On) claim to be added to GitHub Desktop before you can access those repositories. GitHub Desktop runs a loopback token collection server when you sign in.</p> <p>If you attempt to sign in without SSO claim, it will be absent from the GitHub Desktop app and you will not be able to clone GitHub Enterprise Cloud repositories.</p> <p>At this point, you have to:</p> <ol> <li>Sign out of GitHub Desktop</li> <li>Go to GitHub.com</li> <li>Use the \"Single Sign-on\" link at the top to sign in to your Enterprise Cloud</li> <li>Now go back again to GitHub Desktop -&gt; Options</li> <li>Use the Sign in button; The browser will be opened and this time when you sign in to GitHub Desktop, the SSO claim to your existing account that grants you access to Enterprise Cloud repositories will be appended as well.</li> </ol> <p></p>"},{"location":"GitHub/Git%20GitHub%20Desktop%20and%20Mandatory%20ASLR/","title":"Git GitHub Desktop and Mandatory ASLR","text":"<p>Git executables are among few poorly written programs that have problem with Mandatory ASLR (Address Space Layout Randomization) Exploit protection feature. When you turn on Mandatory ASLR in Microsoft Defender (which is off by default), those executables fail to run.</p> <p>The same Git executables are bundled with GitHub desktop app. In order to use Git in Visual Studio Code or use GitHub desktop app, we need to exclude Git executables from Mandatory ASLR and let them bypass it. Executables can be excluded from Mandatory ASLR rebootlessly.</p> <p>You can use the following PowerShell commands to automatically add all Git executables bundled with GitHub desktop or Git itself, to the exclusion for Mandatory ASLR</p> <p></p>"},{"location":"GitHub/Git%20GitHub%20Desktop%20and%20Mandatory%20ASLR/#for-github-desktop-git-binaries","title":"For GitHub desktop Git binaries","text":"<pre><code>Get-ChildItem -Recurse -Path \"C:\\Users\\$env:username\\AppData\\Local\\GitHubDesktop\\*\\resources\\app\\git\\*.exe\" | ForEach-Object -Process { Set-ProcessMitigation -Name $_.Name -Disable ForceRelocateImages }\n</code></pre>"},{"location":"GitHub/Git%20GitHub%20Desktop%20and%20Mandatory%20ASLR/#for-git-binaries-installed-using-standalone-installer","title":"For Git binaries installed using standalone installer","text":"<pre><code>Get-ChildItem -Recurse -File -Path 'C:\\Program Files\\Git\\*.exe' | ForEach-Object -Process { Set-ProcessMitigation -Name $_.Name -Disable ForceRelocateImages }\n</code></pre>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/","title":"Signed and Verified commits with GitHub desktop","text":"<p>Web commits, the commits you perform using GitHub website, are automatically verified, but the ones you do from GitHub desktop need to be manually signed.</p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#signing-using-gpg-key","title":"Signing using GPG key","text":""},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#setting-up-gpg","title":"Setting up GPG","text":"<p>Download gpg4win from their official website</p> <p>(suggested by GitHub too)</p> <p>Begin the installation, choose to only install GnuPG and Kleopatra, don't need any other component.</p> <p></p> <p>After installation, open Kleopatra and create a new GPG key pair by selecting \"New Key Pair\"</p> <p></p> <p>Enter your real name and the email address that is added as one your verified email addresses in your GitHub account settings.</p> <p>Select advanced settings and here you can optionally check the box next to \"Authentication\" and also increase the validity period of your GPG key.</p> <p></p> <p>Choosing a passphrase is not mandatory.</p> <p>Export the public key by right-clicking on the GPG key and selecting Export. Open the exported file in Notepad or VS code, copy its content and paste it in your GitHub profile's GPG key section so it can be added as a new GPG key to your GitHub account.</p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#configuring-gitconfig-file","title":"Configuring .gitconfig file","text":"<p>Assuming GitHub desktop is installed and logged in on your system, open the <code>.gitconfig</code> file, usually located in User's folder, and add the following items to it.</p> <p>Add this section to the end of the file</p> <pre><code>[commit]\n  gpgsign = true\n</code></pre> <p>And then add this to the <code>[user]</code> section</p> <pre><code>signingkey = YourGPGSigningkeyID\n</code></pre> <p>Replace <code>YourGPGSigningkeyID</code> with your actual GPG key ID. You can get it from Kleopatra GUI in Key-ID column (enter them without spaces in the <code>.gitconfig</code> file) or you can get it from your GPG keys section in GitHub account settings, Key ID will be visible for you after adding your GPG public key.</p> <p>You can set the validity period of your GPG certificate to unlimited, set/change/remove its passphrase and other modifications. You can publish it on the GPG server too so others can look it up and verify it.</p> <p>Make sure you backup your secret key using Kleopatra and store it in a safe place, you can import it again on another machine to continue signing your GitHub commits. Public key doesn't need to be backed up as you can regenerate it again by importing the secret GPG key on a different machine.</p> <p>Now every time you commit using GitHub desktop, your commits will be signed. If your GPG key has a passphrase, you will be asked to enter it before committing and pushing in GitHub desktop, otherwise signing will happen automatically. Your repository commit history on GitHub website will show verified badge next to them.</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#how-to-restore-gpg-for-commit-signing-using-your-current-key-on-a-new-environment","title":"How to restore GPG for commit signing using your current key on a new environment","text":"<ol> <li>Install GitHub desktop and log in with your GitHub account</li> <li>Configure the .gitconfig file as explained above</li> <li>install gpg4win as explained above</li> <li>Open Kleopatra GUI and use the Import button to import your GPG secret key backup to the program. You can also double-click on your GPG secret key backup file and add it to the program that way.</li> <li>Start committing and pushing changes to your repository using GitHub desktop app, your commits will have a verified badge on GitHub website commit history.</li> </ol>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#official-resources","title":"Official resources","text":"<p>Telling Git about your signing key</p> <p></p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#signing-using-ssh-key","title":"Signing using SSH key","text":""},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#generating-the-key-pair","title":"Generating the key pair","text":"<p>Run this command to create a new SSH key pair, using the provided email as a label. It should be one of the emails added to your account as a verified emails.</p> <pre><code>ssh-keygen -t ed25519 -C \"spynetgirl@outlook.com\"\n</code></pre> <p>Replace spynetgirl@outlook.com with your own email address</p> <p>When asked, enter a file name, don't need to specify a file extension (such as .txt). 2 files will be created in User folder. The one with <code>.pub</code> extension contains your public key, the other one contains your private keys. Both of them must be backed up and stored in a safe place.</p> <p>Set a passphrase when asked, not mandatory so you can just press enter when asked for a passphrase.</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#configuring-ssh-windows-service","title":"Configuring SSH Windows service","text":"<pre><code>Set-Service -Name ssh-agent -StartupType Automatic\nSet-Service -Name ssh-agent -Status Running\n</code></pre> <p>First make sure you've moved the generated SSH key pair from the default User folder location and stored them somewhere else, can be OneDrive's personal vault, and then run the following command to add the private key of your SSH key pair to the SSH agent.</p> <pre><code>ssh-add \"Path/To/SSH/Privatekey\"\n</code></pre> <p>If you set a passphrase for your private key from previous steps then you'll be asked to enter it, otherwise you will see the successful message saying \"Identity added\".</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#add-your-ssh-public-key-to-github-account","title":"Add your SSH public key to GitHub account","text":"<p>Open the file containing your SSH public key, which has a <code>.pub</code> extension, using a text editor such as Notepad or VS code, copy its content and paste it in your GitHub account settings and save.</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#configuring-gitconfig-file_1","title":"Configuring .gitconfig file","text":"<p>Add these new sections to the end of your <code>.gitconfig</code> file. It's usually located in User folder <code>C:\\Users\\YourUserName</code></p> <pre><code>[gpg]\n    format = ssh\n[commit]\n    gpgsign = true\n</code></pre> <p>and add this to the <code>[user]</code> section to define your SSH public key, it's a direct path to that file.</p> <pre><code>signingkey = \"Path/To/SSH/SSHKey.pub\"\n</code></pre> <p>You must replace all of the normal backward slashes <code>\\</code> to forward slash <code>/</code> in your path, otherwise GitHub desktop throws an error.</p> <p>Now every time you commit using GitHub desktop, your commits will be signed. If your SSH key has a passphrase, you will be asked to enter it before committing and pushing in GitHub desktop, otherwise signing will happen automatically. Your repository commit history on GitHub website will show verified badge next to them.</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#how-to-restore-ssh-for-commit-signing-using-your-current-key-on-a-new-environment","title":"How to restore SSH for commit signing using your current key on a new environment","text":"<ol> <li>Install GitHub desktop and log in with your GitHub account</li> <li>Configure the .gitconfig file as explained above</li> <li>Turn on the <code>ssh-agent</code> Windows service</li> <li>Add your SSH private key to <code>ssh-agent</code> using <code>ssh-add \"Path/To/SSH/Privatekey\"</code> command</li> <li>Start committing and pushing changes to your repository, your commits will have a verified badge on GitHub website commit history.</li> </ol>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#official-resources_1","title":"Official resources","text":"<p>Telling Git about your SSH key</p> <p>Key-based authentication in OpenSSH for Windows</p> <p>About commit signature verification</p> <p>Adding a new SSH key to your GitHub account</p> <p>Generating a new SSH key and adding it to the ssh-agent</p> <p></p>"},{"location":"Harden%20System%20Security/Attack%20Surface%20Reduction/","title":"Attack Surface Reduction Rules | Harden System Security","text":"<p> Attack surface reduction rules target certain software behaviors, such as:  CSP</p> <ul> <li>Launching executable files and scripts that attempt to download or run files</li> <li>Running obfuscated or otherwise suspicious scripts</li> <li>Performing behaviors that apps don't usually initiate during normal day-to-day work</li> </ul> <p>Such software behaviors are sometimes seen in legitimate applications. However, these behaviors are often considered risky because they are commonly abused by attackers through malware. Attack surface reduction rules can constrain software-based risky behaviors and help keep your organization safe.</p> <p>Reducing your attack surface means protecting your devices and network, which leaves attackers with fewer ways to perform attacks. Configuring attack surface reduction rules in Windows can help!</p> <p>Tip</p> <p>all 19 available Attack Surface Reduction rules shown in the official chart will be enabled. The Harden System Security application also allows you to individually configure each Attack Surface Reduction rule.</p> <p></p>"},{"location":"Harden%20System%20Security/Audit%20Policies/","title":"Audit Policies","text":"<p>Use this page in the Harden System Security App to retrieve every audit policy on the system. You can search, sort, and modify each policy's state individually.</p> <p>You can export all Audit Policies from a system to a file after retrieving them. Additionally, you can import this file back into the app to automatically apply the same policies on another system. This allows you to create a custom Audit Policies template once and effortlessly re-use it across multiple systems using the Harden System Security app.</p> <p></p>"},{"location":"Harden%20System%20Security/BitLocker/","title":"BitLocker | Harden System Security","text":"<ul> <li> <p> The app sets up and configures Bitlocker using official documentation, with the most secure configuration and military grade encryption algorithm, XTS-AES-256, to protect the confidentiality and integrity of all information at rest.  CSP CSP</p> <ul> <li> <p>It offers 2 security levels for OS drive encryption: Enhanced and Normal.</p> </li> <li> <p>In Normal security level, the OS drive is encrypted with TPM and Startup PIN. This provides very high security for your data, specially with a PIN that's long, complicated (uppercase and lowercase letters, symbols, numbers, spaces) and isn't the same as your Windows Hello PIN.</p> </li> <li> <p>In Enhanced security level, the OS drive is encrypted with TPM and Startup PIN and Startup key. This provides the highest level of protection by offering Multifactor Authentication. You will need to enter your PIN and also plug in a flash drive, containing a special BitLocker key, into your device in order to unlock it. Continue reading more about it here.</p> </li> <li> <p>Once the OS drive is encrypted, for every other non-OS drive, there will be prompts for confirmation before encrypting it. The encryption will use the same algorithm as the OS drive and uses Auto-unlock key protector. Removable flash drives are skipped.</p> </li> <li> <p>The recovery information of all of the drives are saved in a single well-formatted text file in the root of the OS drive <code>C:\\BitLocker-Recovery-Info-All-Drives.txt</code>. It's very important to keep it in a safe and reachable place as soon as possible, e.g., in OneDrive's Personal Vault which requires additional authentication to access. See here and here for more info. You can use it to unlock your drives if you ever forget your PIN, lose your Startup key (USB Flash Drive) or TPM no longer has the correct authorization (E.g., after a firmware change).</p> </li> <li> <p>TPM has special anti-hammering logic which prevents malicious user from guessing the authorization data indefinitely. Microsoft defines that maximum number of failed attempts in Windows is 32 and every single failed attempt is forgotten after 2 hours. This means that every continuous two hours of powered on (and successfully booted) operation without an event which increases the counter will cause the counter to decrease by 1. You can view all the details using this PowerShell command: <code>Get-TPM</code>.</p> </li> <li> <p>Check out Lock Screen category for more info about the recovery password and the 2nd anti-hammering mechanism.</p> </li> <li> <p>BitLocker will bring you a real security against the theft of your device if you strictly abide by the following basic rules:</p> <ul> <li> <p>As soon as you have finished working, either Hibernate or shut Windows down and allow for every shadow of information to disappear from RAM within 2 minutes. This practice is recommended in High-Risk Environments.</p> </li> <li> <p>Do not mix 3rd party encryption software and tools with Bitlocker. Bitlocker creates a secure end-to-end encrypted ecosystem for your device and its peripherals, this secure ecosystem is backed by things such as software, Virtualization Technology, TPM 2.0 and UEFI firmware, Bitlocker protects your data and entire device against real-life attacks and threats. You can encrypt your external SSDs and flash drives with Bitlocker too.</p> </li> </ul> </li> </ul> </li> </ul> <p></p> <p>Important</p> <p>AMD Zen 2 and 3 CPUs have a vulnerability in them, if you use one of them, make sure your Bitlocker Startup PIN is at least 16 characters long (max is 20).</p> <p></p> <ul> <li> <p> Enables or disables DMA protection from Bitlocker Countermeasures based on the status of Kernel DMA protection. Kernel DMA Protection is not compatible with other BitLocker DMA attacks countermeasures. It is recommended to disable the BitLocker DMA attacks countermeasures if the system supports Kernel DMA Protection (The Harden System Security App does that exactly). Kernel DMA Protection provides higher security bar for the system over the BitLocker DMA attack countermeasures, while maintaining usability of external peripherals. you can check the status of Kernel DMA protection using this official guide.  CSP</p> <ul> <li>Kernel DMA Protection (Memory Access Protection) for OEMs page shows the requirements for Kernel DMA Protection. for Intel CPUs, support for requirements such as VT-X and VT-D can be found in each CPU's respective product page. e.g. Intel i7 13700K</li> </ul> </li> </ul> <p></p> <ul> <li> Disallows standard (non-Administrator) users from changing the Bitlocker Startup PIN or password  CSP</li> </ul> <p></p> <ul> <li> Requires you to choose a PIN that contains at least 10 characters CSP</li> </ul> <p></p> <ul> <li> <p> (Only on Physical machines) Enables Hibernate and adds Hibernate to Start menu's power options.  CSP</p> <ul> <li>Devices that support Modern Standby have the most security because (S1-S3) power states which belong to the legacy sleep modes are not available. In Modern Standby, security components remain vigilant and the OS stays protected. Applying Microsoft Security Baselines also automatically disables the legacy (S1-S3) sleep states.</li> </ul> </li> </ul> <p></p> <ul> <li> sets Hibernate to full</li> </ul> <p></p> <ul> <li> Disallows access to Bitlocker-protected removable data drives from earlier versions of Windows.</li> </ul> <p>Refer to this official documentation about the countermeasures of Bitlocker</p> <p></p>"},{"location":"Harden%20System%20Security/BitLocker/#bitlocker-management","title":"BitLocker Management","text":""},{"location":"Harden%20System%20Security/BitLocker/#full-drive-encryption","title":"Full Drive Encryption","text":"<p>You can enable BitLocker encryption for the Operating System (OS) drive, fixed drives, and removable drives via a guided, safety-first workflow. All messages and UI elements related to BitLocker are localized for the languages supported by the app. BitLocker management is implemented in the low-level ComManager component of Harden System Security.</p>"},{"location":"Harden%20System%20Security/BitLocker/#add-or-modify-key-protectors","title":"Add or Modify Key Protectors","text":"<p>A step-by-step workflow allows you to add and modify a variety of key protectors for BitLocker-protected volumes, making key management straightforward and auditable.</p>"},{"location":"Harden%20System%20Security/BitLocker/#suspend-bitlocker-encryption","title":"Suspend BitLocker Encryption","text":"<p>Need to update firmware or perform maintenance? Use the Suspend feature to temporarily suspend BitLocker protection on the OS drive. You may optionally specify the number of restarts after which protection will be automatically resumed.</p>"},{"location":"Harden%20System%20Security/BitLocker/#resume-bitlocker-encryption","title":"Resume BitLocker Encryption","text":"<p>Quickly resume protection for drives whose BitLocker state was previously suspended.</p>"},{"location":"Harden%20System%20Security/BitLocker/#backup-bitlocker-key-protectors","title":"Backup BitLocker Key Protectors","text":"<p>Back up recovery passwords and key protector details for your drives so you have access to the required 48-character recovery keys when needed.</p> <p>After enabling BitLocker for a drive or adding a new Key Protector, the Export button will light up briefly, giving you a subtle reminder that it's best to export the data and back them up so you don't forget that.</p> <p></p> <p></p> <p>Tip</p> <p>Because BitLocker operations can be consequential, every action requires explicit confirmation before proceeding. Additionally, the preselected (focused) button in each confirmation dialog is Cancel to further reduce the chance of accidental acceptance.</p> <p></p>"},{"location":"Harden%20System%20Security/Certificate%20Checking/","title":"Certificate Checking | Harden System Security","text":"<p>This page in the Harden System Security App is dedicated to enumerating every certificate across all stores in the Local Machine and Current User scopes. Certificates can be sorted, searched, and removed as needed.</p> <p>There is a key capability identifying certificates that are not rooted to the Microsoft's Trusted Roots list and presents options for remediation. When evaluating trust, the app does not rely on the system's certificate store; it uses an independent, built-in trust anchor to validate certificates, so its checks remain unaffected by a potentially compromised system store.</p> <p></p>"},{"location":"Harden%20System%20Security/Country%20IP%20Blocking/","title":"Country IP Blocking | Harden System Security","text":""},{"location":"Harden%20System%20Security/Country%20IP%20Blocking/#targeted-lists","title":"Targeted Lists","text":"<p>The Harden System Security App uses the newest range of <code>IPv4</code> and <code>IPv6</code> addresses of State Sponsors of Terrorism and OFAC Sanctioned Countries, directly from official IANA sources repository, then creates 2 rules (inbound and outbound) for each list in Windows firewall, completely blocking connections to and from those countries.</p> <p>Once you have those Firewall rules added, you can use this method to see if any of the blocked connections were from/to those countries.</p> <p>Note</p> <p>Threat actors can use VPN, VPS etc. to mask their originating IP address and location. So don't take this category as the perfect solution for network protection.</p> <p></p>"},{"location":"Harden%20System%20Security/Country%20IP%20Blocking/#individual-country-ip-blocking","title":"Individual Country IP Blocking","text":"<p>You can use this feature to block individual countries in Windows Firewall. Simply search for a country's name in the list and block/unblock all of its IPv4 and IPV6 ranges in just a few seconds.</p> <p></p>"},{"location":"Harden%20System%20Security/Device%20Guard/","title":"Device Guard | Harden System Security","text":"<ul> <li> <p> Virtualization-Based Security + UEFI Lock CSP</p> <ul> <li>Validate enabled Windows Defender Device Guard hardware-based security features</li> </ul> </li> </ul> <p></p> <ul> <li> <p> Secure boot (without requiring DMA protection) for Virtualization-Based Security CSP</p> <ul> <li> <p>This is in accordance with Microsoft's recommendation. This option provides Secure Boot with as much protection as is supported by a given computer\u2019s hardware. A computer with input/output memory management units (IOMMUs) will have Secure Boot with DMA protection. A computer without IOMMUs will simply have Secure Boot enabled.</p> </li> <li> <p>Secure boot has 2 parts, part 1 is enforced using the Group Policy by this app, but for part 2, you need to enable Secure Boot in your UEFI firmware settings if it's not enabled by default (which is the case on older hardware).</p> </li> <li> <p>(Kernel) DMA protection hardware requirements</p> </li> </ul> </li> </ul> <p></p> <ul> <li> Virtualization-based protection of Code Integrity + UEFI Lock  CSP</li> </ul> <p></p> <ul> <li> Require UEFI Memory Attributes Table (MAT) CSP</li> </ul> <p></p> <ul> <li> <p> Windows Defender Credential Guard + UEFI Lock CSP</p> <ul> <li> <p>Windows Defender Device Guard and Windows Defender Credential Guard hardware readiness tool</p> </li> <li> <p>Windows Defender Credential Guard requirements</p> </li> </ul> </li> </ul> <p></p> <ul> <li> <p> System Guard Secure Launch and SMM protection (Firmware Protection) CSP</p> <ul> <li>How to verify System Guard Secure Launch is configured and running</li> </ul> </li> </ul> <p></p> <ul> <li> Kernel Mode Hardware Enforced Stack Protection</li> </ul> <p></p> <ul> <li> Local Security Authority (LSA) process Protection + UEFI Lock  CSP</li> </ul> <p></p> <ul> <li> Enables Machine Identity Isolation Configuration in Enforcement mode.</li> </ul> <p></p> <ul> <li> <p>  Enables Virtualization-based Security and Memory Integrity in Mandatory mode.</p> </li> <li> <p>Special care should be used before enabling this mode, since, in case of any failure of the virtualization modules, the system will refuse to boot.</p> </li> </ul> <p></p> <p>Tip</p> <p>Most of the Device Guard and Virtualization-Based Security features are Automatically enabled by default on capable and modern hardware. The rest of them will be enabled and configured to the most secure state after you apply the Microsoft Security Baselines and the Harden Windows Security policies.</p> <ul> <li> <p>Check out Secured-Core PC requirements.</p> </li> <li> <p>Memory integrity and VBS enablement</p> </li> </ul> <p></p> <p>Important</p> <p>About UEFI Lock</p> <p>UEFI locked security measures are rooted in Proof of Physical Presence and they can't be disabled by modifying Group Policy, registry keys or other Administrative tasks. The only way to disable UEFI locked security measures is to have physical access to the computer, reboot and access the UEFI settings, supply the credentials to access the UEFI, turn off Secure Boot, reboot the system and then you will be able to disable those security measures with Administrator privileges.</p> <p></p> <p>Note</p> <p>Device Protection in Windows Security Gives You One of These 4 Hardware Scores</p> <p><ol> <li>Standard hardware security not supported</li> <ul> <li>This means that your device does not meet at least one of the requirements of Standard Hardware Security.</li> </ul> <li>Your device meets the requirements for Standard Hardware Security. </li> <ul> <li>TPM 2.0</li> <li>Secure boot</li> <li>DEP</li> <li>UEFI MAT</li> </ul> <li>Your device meets the requirements for Enhanced Hardware Security</li> <ul> <li>TPM 2.0</li> <li>Secure boot</li> <li>DEP</li> <li>UEFI MAT</li> <li>Memory Integrity</li> </ul> <li>Your device has all Secured-core PC features enabled</li> <ul> <li>TPM 2.0</li> <li>Secure boot</li> <li>DEP</li> <li>UEFI MAT</li> <li>Memory Integrity</li> <li>System Management Mode (SMM)</li> </ul> </ol></p> <p></p>"},{"location":"Harden%20System%20Security/Edge%20Browser/","title":"Edge Browser | Harden System Security","text":"<ul> <li> Block 3rd party cookies - Recommendatory policy</li> </ul> <ul> <li> Set Edge to use system's DNS over HTTPS</li> </ul> <ul> <li> Enable Encrypted Client Hello</li> </ul> <ul> <li> Disable Basic HTTP authentication scheme</li> </ul> <ul> <li> Allow devices using this hardening category to receive new features and experimentations like normal devices</li> </ul> <ul> <li> Enforce the audio process to run sandboxed</li> </ul> <ul> <li> Sets the share additional operating system region setting to never - Recommendatory policy</li> </ul> <ul> <li> <p> Disables the following weak Cipher Suites</p> <ul> <li> <p>Site 1 to test TLS in your browser</p> </li> <li> <p>Site 2 to test TLS in your browser</p> </li> </ul> </li> </ul> <p></p> <ul> <li> Policy that automatically denies the window management permission to sites by default. This limits the ability of sites to see information about the device's screens and use that information to open and place windows or request fullscreen on specific screens.</li> </ul> <p></p> <ul> <li> <p> Policy that will keep support for Manifest V2 extensions enabled even after its depreciation. Manifest V2 extension support is vital for proper functioning of ublock origin (and similar extensions) which is beyond a simple adblocker and can provide lots of protection when browsing the web through its custom lists.</p> </li> <li> <p>Note that this is something being pushed by Google through their controlling power of Chromium, not Microsoft.</p> </li> </ul> <p></p> <ul> <li> Policy that will prevent websites to even request access to the local connected USB devices.</li> </ul> <p></p> <ul> <li> Policy that will disable dynamic code in Edge browser which is a security feature that prevents the browser process from creating dynamic code. The default value of this policy is not explicitly defined, it could be enable or could be disabled. Setting it explicitly to enabled via this policy ensures that no dynamic code is created by the browser process.</li> </ul> <p></p> <ul> <li> CSP</li> </ul> <pre><code>TLS_RSA_WITH_AES_256_CBC_SHA  Reason: NO Perfect Forward Secrecy, CBC, SHA1\nTLS_RSA_WITH_AES_128_CBC_SHA  Reason: NO Perfect Forward Secrecy, CBC, SHA1\nTLS_RSA_WITH_AES_128_GCM_SHA256  Reason: NO Perfect Forward Secrecy\nTLS_RSA_WITH_AES_256_GCM_SHA384  Reason: NO Perfect Forward Secrecy\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA  Reason: CBC, SHA1\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA  Reason: CBC, SHA1\n</code></pre> <p></p> <p>Due to security reasons, many policies cannot be used when you are signed into Edge browser using personal Microsoft account. This app does not use any of those policies. When those policies are applied, they are ignored by the browser and <code>edge://policy/</code> shows an error for them.</p> <p></p> <ul> <li>You can view all of the policies being applied to your Edge browser by visiting this page: <code>edge://policy/</code></li> <li>You can find all of the available internal Edge pages in here: <code>edge://about/</code></li> </ul> <p></p> <ul> <li>Useful links:<ul> <li>Microsoft Edge stable channel change log</li> <li>Microsoft Edge Security updates change log</li> <li>Microsoft Edge Beta channel change log</li> <li>Microsoft Edge Mobile stable channel change log</li> <li>Edge Insider for Beta/Dev/Canary channels</li> <li>Microsoft Edge Security baselines - Work without ingesting ADMX policy files first<ul> <li>Reason why this app doesn't use it.</li> </ul> </li> </ul> </li> </ul> <p></p>"},{"location":"Harden%20System%20Security/File%20Reputation/","title":"File Reputation | Harden System Security","text":"<p>In this page of the Harden System Security, you're able to query any file on the system to retrieve its reputation information. The source of this data is Microsoft's Intelligent Security Graph when the Smart App Control is enabled or in Evaluation Mode, otherwise it will be the SmartScreen who supplies the reputation data for this feature.</p> <p>Simply browse for a file or drag and drop it into the page to evaluate its reputation. The drag and drop feature only works when the app is not running with elevated privileges.</p> <p></p>"},{"location":"Harden%20System%20Security/Group%20Policy%20Editor/","title":"Group Policy Editor | Harden System Security","text":"<p>The Group Policy Editor page enables you to retrieve the effective policies on the system. You can sort and search through this data via the available UI controls. You can also browse for <code>.POL</code> group policy files on your system or a shared network location in order to inspect it.</p> <p>Since the Harden System Security app can be set as the default handler of the <code>.POL</code> files, this page is also displayed when you double-click or tap on any <code>.POL</code> file in the File Explorer.</p> <p>You may remove any policy from a <code>.POL</code> file \u2014 whether a system <code>.POL</code> or one you opened in the app. All edits are correctly persisted back to the selected <code>.POL</code> file.</p>"},{"location":"Harden%20System%20Security/Group%20Policy%20Editor/#merge-multiple-group-policy-files-into-one","title":"Merge Multiple Group Policy Files Into One","text":"<p>If you have multiple <code>.POL</code> Group Policy files, you can quickly and accurately merge them into a single <code>.POL</code> file. The result will not have any duplicate policies in it. Select one main <code>.POL</code> file and then select other <code>.POL</code> files you want to merged with the main one. If 2 or more items with the same <code>KeyName</code> and <code>ValueName</code> exist, the ones from the <code>other</code> files will take precedence and overwrite the ones in the main file. This way you can consolidate your group policies without losing any important settings. This logic closely follows other merging strategies used in tools such as <code>LGPO.exe</code>.</p>"},{"location":"Harden%20System%20Security/Group%20Policy%20Editor/#convert-group-policy-files-to-json","title":"Convert Group Policy Files To JSON","text":"<p>You can convert your <code>.POL</code> files into JSON format. The Harden System Security app defines a JSON schema that preserves all of the policy details during conversion. You can reuse and import the same JSON files later in the app.</p>"},{"location":"Harden%20System%20Security/Group%20Policy%20Editor/#convert-json-files-to-group-policy-files","title":"Convert JSON Files To Group Policy Files","text":"<p>You can convert the JSON files created by the Harden System Security app back to <code>.POL</code> files in a lossless manner.</p>"},{"location":"Harden%20System%20Security/Group%20Policy%20Editor/#convert-security-inf-files-to-json","title":"Convert Security INF Files To JSON","text":"<p>Security INF files generated by the <code>Secedit</code> tool can be converted to JSON file format defined by the Harden System Security app. Please keep in mind that only the <code>[Registry Values]</code> section of the INF files are converted to JSON at the moment.</p>"},{"location":"Harden%20System%20Security/Group%20Policy%20Editor/#retrieve-system-security-policy","title":"Retrieve System Security Policy","text":"<p>Use this feature to create a very comprehensive security and policy report of the system and export them to a file. The report contains all of the security policies normally generated by <code>Secedit</code>, plus additional information about the current system.</p> <p></p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/","title":"Harden System Security","text":"<p>Harden System Security is a modern secure lightweight application that can help you harden, secure and lock down your system. It is designed to be user-friendly and efficient, providing a range of features to enhance the security of your Windows operating system.</p> <p>It always stays up to date with the latest security patches and provides constant and consistent maintenance and support.</p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#how-to-install-or-update-the-app","title":"How To Install or Update The App","text":""},{"location":"Harden%20System%20Security/Harden%20System%20Security/#use-the-microsoft-store","title":"Use The Microsoft Store","text":""},{"location":"Harden%20System%20Security/Harden%20System%20Security/#use-winget","title":"Use Winget","text":"<p>You can utilize Winget to automate the installation of the Harden System Security.</p> <pre><code>winget install --id 9p7ggfl7dx57 --exact --accept-package-agreements --accept-source-agreements --force --source msstore\n</code></pre> <p></p> <p>Please feel free to open a discussion if you have any questions about the build process, security, how to use or have feedbacks. Source code on this repository</p> <p></p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#supported-operation-systems","title":"Supported Operation Systems","text":"<ul> <li>Windows 11 24H2</li> <li>Windows 11 23H2</li> <li>Windows 11 22H2</li> <li>Windows Server 2025</li> </ul>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#preview-of-the-app","title":"Preview of the App","text":""},{"location":"Harden%20System%20Security/Harden%20System%20Security/#technical-details-of-the-app","title":"Technical Details of The App","text":"<ul> <li>Secure and transparent development and build process.</li> <li>Built using WinUI3 / XAML / C#.</li> <li>Built using the latest .NET SDK.</li> <li>Powered by the WinAppSDK (formerly Project Reunion).</li> <li>Packaged with the modern MSIX format.</li> <li>Incorporates the Mica material design for backgrounds.</li> <li>Adopts the Windows 11 Fluent design system.</li> <li>Fast execution and startup time.</li> <li>0 required dependency.</li> <li>0 Third-party library or file used.</li> <li>0 Telemetry or data collection.</li> <li>100% clean uninstallation.</li> <li>100% open-source and free to use.</li> <li>Natively supports X64 and ARM64 architectures.</li> <li>Full Trimming and Native AOT support.</li> </ul>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#features","title":"Features","text":"<p> Everything always stays up-to-date with the newest proactive security measures that are industry standards and scalable.</p> <p> No Windows functionality is removed/disabled against Microsoft's recommendations.</p> <p> All of the links in the documentations and sources are from official Microsoft websites, straight from the source. No bias, No FUD, No misinformation and definitely No old obsolete methods. That's why there are no links to 3rd party news websites, forums, made up blogs/articles, and such.</p> <p> When a security measure is no longer necessary because it's applied by default by Microsoft on new builds of Windows, it will also be removed from the app in order to prevent any problems and because it won't be necessary anymore. Community feedback will always be taken into account when doing so.</p> <p> Applying the security measures can make your system compliant with Microsoft Security Baselines and Secured-core PC specifications (provided that you use modern hardware that supports the latest Windows security features) - See what makes a Secured-core PC - Check Device Guard category for more info</p> <p>Secured-core \u2013 recommended for the most sensitive systems and industries like financial, healthcare, and government agencies. Builds on the previous layers and leverages advanced processor capabilities to provide protection from firmware attacks.</p> <p> Since I originally created this repository for myself and people I care about, I always maintain it to the highest possible standard.</p> <p> If you have multiple accounts on your device, you only need to apply the security measures 1 time with Admin privileges, that will make system-wide changes. Then you can optionally run the app, without Admin privileges, for each standard user to apply the Non-Admin category.</p> <p></p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#security","title":"Security","text":"<p>Important</p> <p>The Harden System Security application is built publicly using a GitHub Workflow and uploaded to the Microsoft Partner Center for validation and signing. The action uses SBOM (Software Bill of Materials) generation to comply with the highest security standards such as SLSA level 3. GitHub's CodeQL Advanced workflow with extended security model scans the entire repository. All of the dependencies of any project in this repository are uploaded to GitHub and are available in the Dependency Graph.</p> <p></p> <p>Harden System Security is architected with a security-first philosophy from its inception. Every feature is designed and implemented with an offensive security mindset, ensuring that security is never an afterthought\u2014and never will be. When selecting a solution tasked with defending critical systems, the last thing you want is a so\u2011called security tool that silently broadens your attack surface or neglects foundational safeguards. This application is built to be inherently trustworthy, defensible, and resilient.</p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#dependencies","title":"Dependencies","text":"<p>Harden System Security explicitly and unequivocally maintains zero third\u2011party dependencies. It relies solely on the .NET SDK, the Windows App SDK, and a minimal set of small trusted Microsoft platform components for the User Interface. This deliberate constraint sharply reduces the attack surface and virtually eliminates common software supply chain attack vectors. Rather than pulling transient packages to satisfy feature gaps, required capabilities are purpose\u2011built in-house\u2014implemented correctly, audibly, and securely. While this increases development effort and time, the mission and deployment contexts of this application more than justify the investment.</p> <p>Leveraging GitHub's native automation (including Dependabot) alongside Microsoft's patch cadence, security and platform updates can be integrated and released rapidly, preserving both stability and assurance.</p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#exploit-protection","title":"Exploit Protection","text":"<p>The application avoids dynamic code generation, enhancing security posture and reducing vulnerability exposure. This design ensures compatibility with advanced OS-level exploit mitigation. The Harden System Security supports process mitigations / Exploit Protections such as: <code>Blocking low integrity images</code>, <code>Blocking remote images</code>, <code>Blocking untrusted fonts</code>, <code>Strict Control Flow Guard</code>, <code>Disabling extension points</code>, <code>Export Address Filtering</code>, <code>Hardware enforced stack protection</code>, <code>Import Address Filtering</code>, <code>Validate handle usage</code>, <code>Validate stack integrity</code>.</p> <p>This disciplined approach bolsters resistance against memory corruption, injection, and tampering techniques frequently leveraged by sophisticated adversaries.</p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#code-review","title":"Code Review","text":"<p>The codebase is extensively and thoughtfully documented, enabling reviewers to trace logic, validate control flows, and assess security-relevant decisions with minimal friction. I remain fully available to clarify design rationale, threat assumptions, or implementation details whenever deeper scrutiny is desired.</p> <p></p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#documentation","title":"Documentation","text":"<p>Note</p> <p>Mixing 3rd party security solutions with advanced Microsoft Defender features or other features offered by the Harden System Security app is not recommended as it can create conflicts.</p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#symbols-reference","title":"Symbols Reference","text":"<p>The following chart explains various symbols you will see throughout the documentations for the Harden System Security app, helping you understand how they are each applied.</p> Indicator Description Security measure is applied via Registry/API/COM etc. Security measure is applied via Group Policies CSP for the security measure Sub-category <ul> <li> <p> Protect</p> <ul> <li> Microsoft Security Baselines</li> <li> Microsoft Security Baselines Overrides</li> <li> Microsoft 365 Apps Security Baseline</li> <li> Microsoft Defender</li> <li> Attack Surface Reduction</li> <li> Bitlocker</li> <li> Device Guard</li> <li> TLS Security</li> <li> Lock Screen</li> <li> User Account Control</li> <li> Windows Firewall</li> <li> Optional Windows Features</li> <li> Windows Networking</li> <li> Miscellaneous Configurations</li> <li> Windows Update</li> <li> Edge Browser</li> <li> Certificate Checking</li> <li> Country IP Blocking</li> <li> Non Admin Measures</li> <li> Group Policy Editor</li> <li> Manage Installed Apps</li> <li> File Reputation</li> <li> Audit Policies</li> </ul> </li> </ul> <p></p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#supported-languages","title":"Supported Languages","text":"<p>The Harden System Security fully supports the following languages.</p> <ul> <li> English</li> <li> Hebrew</li> <li> Greek</li> <li> Hindi</li> <li> Malayalam</li> <li> Arabic</li> <li> Spanish</li> <li> Polish</li> </ul> <p></p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#under-the-hood-files-and-directories-structures-explained","title":"Under the Hood: Files and Directories Structures Explained","text":"<p>Here are the breakdown of some of the directories and files used by the Harden System Security app.</p> <ul> <li> <p>Animated Icon Sources is the location hosting JSON content of the Lottie animations used for the animated buttons.</p> </li> <li> <p>Animated Icons contain source generated files used for animated icons in various parts of the app.</p> </li> <li> <p>Resources directory contains JSON data used by the app to apply Security Measures for the following sources: <code>Group Policies</code>, <code>Registry Keys</code>, <code>Security Policies Registry Keys</code>.</p> </li> <li> <p>CountryIPsData contains the JSON files used by the app in the Country IP Blocking page.</p> </li> <li> <p>Mitigations contains files used by the app to apply, verify or remove Exploit Protection for different processes defined in it.</p> </li> <li> <p>DISMService.exe is one of the components of the Harden System Security app that provides DISM functionalities via named pipe.</p> </li> <li> <p>CppInterop directory contains parts of the Harden System Security app written in C++.</p> </li> </ul> <p></p> <p>If you'd like to know more about a specific file or directory please feel free to reach out.</p> <p></p>"},{"location":"Harden%20System%20Security/Harden%20System%20Security/#how-to-build-the-harden-system-security-locally","title":"How To Build The Harden System Security Locally?","text":"<p>You can build the Harden System Security application directly from the source code locally on your device without using any 3rd party tools in a completely automated way. It will create the MSIXBundle file containing the X64 and ARM64 MSIX packages.</p> <p>The build process will generate complete log files and you can use the MSBuild Structured Log Viewer to inspect them.</p>  \u2728 Click/Tap here to see the PowerShell code \u2728  <pre><code># Requires -Version 7.5\n# Requires -RunAsAdministrator\nfunction Build_HSS {\n    param(\n        [bool]$DownloadRepo,\n        [bool]$InstallDeps,\n        [bool]$Workflow,\n        [bool]$UpdateWorkLoads,\n        [bool]$Upload\n    )\n\n    $ErrorActionPreference = 'Stop'\n    $Stopwatch = [System.Diagnostics.Stopwatch]::StartNew()\n\n    Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -Value 1 -Force\n\n    [System.String]$script:AppControlManagerDirectory\n\n    if ($DownloadRepo) {\n\n        [System.String]$BranchName = 'main'\n        [System.String]$RepoName = 'Harden-Windows-Security'\n        [System.String]$RepoUrl = \"https://github.com/HotCakeX/$RepoName/archive/refs/heads/$BranchName.zip\"\n        [System.String]$ZipPath = [System.IO.Path]::Combine($env:TEMP, \"$RepoName.zip\")\n        [System.String]$InitialWorkingDirectory = $PWD.Path\n        $script:AppControlManagerDirectory = [System.IO.Path]::Combine($InitialWorkingDirectory, \"$RepoName-$BranchName\", 'Harden System Security')\n\n        if (Test-Path -Path $script:AppControlManagerDirectory -PathType Container) {\n            Remove-Item -Path $script:AppControlManagerDirectory -Recurse -Force\n        }\n\n        Invoke-WebRequest -Uri $RepoUrl -OutFile $ZipPath\n        Expand-Archive -Path $ZipPath -DestinationPath $InitialWorkingDirectory -Force\n        Remove-Item -Path $ZipPath -Force\n        Set-Location -Path $script:AppControlManagerDirectory\n    }\n    else {\n        $script:AppControlManagerDirectory = $PWD.Path\n    }\n\n    if ($InstallDeps) {\n\n        # Install Winget if it doesn't exist\n        if (!(Get-Command -Name 'winget.exe' -ErrorAction Ignore)) {\n\n            # Retrieve the latest Winget release information\n            $WingetReleases = Invoke-RestMethod -Uri 'https://api.github.com/repos/microsoft/winget-cli/releases'\n            $LatestRelease = $WingetReleases | Select-Object -First 1\n            # Direct links to the latest Winget release assets\n            [string]$WingetURL = $LatestRelease.assets.browser_download_url | Where-Object -FilterScript { $_.EndsWith('.msixbundle') } | Select-Object -First 1\n            [string]$WingetLicense = $LatestRelease.assets.browser_download_url | Where-Object -FilterScript { $_.EndsWith('License1.xml') } | Select-Object -First 1\n            [string]$LatestWingetReleaseDependenciesZipURL = $LatestRelease.assets.browser_download_url | Where-Object -FilterScript { $_.EndsWith('DesktopAppInstaller_Dependencies.zip') } | Select-Object -First 1\n            [hashtable]$Downloads = @{\n                # 'Winget.msixbundle'                 = 'https://aka.ms/getwinget' This is updated slower than the GitHub release\n                'DesktopAppInstaller_Dependencies.zip' = $LatestWingetReleaseDependenciesZipURL\n                'Winget.msixbundle'                    = $WingetURL\n                'License1.xml'                         = $WingetLicense\n            }\n            $Downloads.GetEnumerator() | ForEach-Object -Parallel {\n                Invoke-RestMethod -Uri $_.Value -OutFile $_.Key\n            }\n\n            Expand-Archive -Path 'DesktopAppInstaller_Dependencies.zip' -DestinationPath .\\ -Force\n\n            # Required to update the Winget\n            Stop-Process -Name 'WindowsTerminal' -Force -ErrorAction Ignore\n\n            # Get the paths to all of the dependencies\n            [string[]]$DependencyPaths = (Get-ChildItem -Path .\\x64 -Filter '*.appx' -File -Force).FullName\n            Add-AppxProvisionedPackage -Online -PackagePath 'Winget.msixbundle' -DependencyPackagePath $DependencyPaths -LicensePath 'License1.xml'\n\n            Add-AppPackage -Path 'Winget.msixbundle' -DependencyPath \"$($DependencyPaths[0])\", \"$($DependencyPaths[1])\" -ForceTargetApplicationShutdown -ForceUpdateFromAnyVersion\n\n        }\n\n        Write-Host -Object 'The version of the Winget currently in use:'\n        Write-Host -Object (winget --version)\n\n        winget source update\n\n        Write-Host -Object \"`nInstalling Rust toolchain\" -ForegroundColor Magenta\n        $null = winget install --id Rustlang.Rustup --exact --accept-package-agreements --accept-source-agreements --uninstall-previous --force --source winget\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed to install the Rust toolchain: $LASTEXITCODE\") }\n\n        Write-Host -Object \"`nInstalling .NET SDK\" -ForegroundColor Magenta\n        $null = winget install --id Microsoft.DotNet.SDK.Preview --exact --accept-package-agreements --accept-source-agreements --uninstall-previous --force --source winget\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed to install .NET SDK: $LASTEXITCODE\") }\n\n        Write-Host -Object \"`nInstalling Visual Studio Build Tools\" -ForegroundColor Magenta\n        # Downloads the online installer and automatically runs it and installs the build tools\n        # https://learn.microsoft.com/windows/apps/windows-app-sdk/set-up-your-development-environment\n        # https://learn.microsoft.com/visualstudio/install/workload-component-id-vs-build-tools\n        # https://learn.microsoft.com/visualstudio/install/use-command-line-parameters-to-install-visual-studio\n        # https://learn.microsoft.com/visualstudio/install/workload-component-id-vs-community\n        winget install --id Microsoft.VisualStudio.2022.BuildTools --exact --accept-package-agreements --accept-source-agreements --uninstall-previous --force --source winget --override '--force --wait --passive --add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Workload.MSBuildTools --add Microsoft.VisualStudio.Workload.UniversalBuildTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows11SDK.26100 --includeRecommended --add Microsoft.VisualStudio.Component.VC.Tools.ARM64'\n\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New('Failed to install Visual Studio Build Tools') }\n\n        winget install --id Microsoft.VCRedist.2015+.x64 --exact --accept-package-agreements --accept-source-agreements --uninstall-previous --force --source winget\n    }\n\n    # Refresh the environment variables so the current session detects the new dotnet installation\n    $Env:Path = [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine) + ';' +\n    [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::User)\n\n    # https://github.com/Microsoft/vswhere/wiki/Start-Developer-Command-Prompt#using-powershell\n    $installationPath = . 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe' -prerelease -latest -property installationPath\n    if ($installationPath -and (Test-Path -Path \"$installationPath\\Common7\\Tools\\vsdevcmd.bat\" -PathType Leaf)) {\n        &amp; \"${env:COMSPEC}\" /s /c \"`\"$installationPath\\Common7\\Tools\\vsdevcmd.bat`\" -no_logo &amp;&amp; set\" | ForEach-Object -Process {\n            $name, $value = $_ -split '=', 2\n            Set-Content -Path env:\\\"$name\" -Value $value -Force\n            Write-Host -Object \"Setting environment variable: $name=$value\"\n        }\n    }\n\n    # Remove any possible existing directories\n    Remove-Item -Path .\\MSIXOutputX64 -Recurse -Force -ErrorAction Ignore\n    Remove-Item -Path .\\MSIXOutputARM64 -Recurse -Force -ErrorAction Ignore\n    Remove-Item -Path .\\MSIXBundleOutput -Recurse -Force -ErrorAction Ignore\n    Remove-Item -Path .\\bin -Recurse -Force -ErrorAction Ignore\n    Remove-Item -Path .\\obj -Recurse -Force -ErrorAction Ignore\n\n    if ($UpdateWorkLoads) {\n        # Update the workloads\n        dotnet workload update\n        dotnet workload config --update-mode workload-set\n        dotnet workload update\n        if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed updating the workloads. Exit Code: $LASTEXITCODE\") }\n    }\n\n    Write-Host -Object \"`nChecking .NET info`n`n\" -ForegroundColor Magenta\n    dotnet --info\n    Write-Host -Object \"`nListing installed .NET SDKs`n`n\" -ForegroundColor Magenta\n    dotnet --list-sdks\n\n    function Find-mspdbcmf {\n        # \"-products *\" is necessary to detect BuildTools too\n        [string]$VisualStudioPath = . 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe' -prerelease -latest -property resolvedInstallationPath -products *\n\n        [string]$BasePath = [System.IO.Path]::Combine($VisualStudioPath, 'VC', 'Tools', 'MSVC')\n\n        # Get all subdirectories under the base path\n        [System.String[]]$VersionDirs = [System.IO.Directory]::GetDirectories($BasePath)\n\n        # Initialize the highest version with a minimal version value.\n        [System.Version]$HighestVersion = [System.Version]::New('0.0.0.0')\n        [System.String]$HighestVersionFolder = $null\n\n        # Loop through each directory to find the highest version folder.\n        foreach ($Dir in $VersionDirs) {\n            # Extract the folder name\n            [System.String]$FolderName = [System.IO.Path]::GetFileName($Dir)\n            [System.Version]$CurrentVersion = $null\n            # Try parsing the folder name as a Version.\n            if ([System.Version]::TryParse($FolderName, [ref] $CurrentVersion)) {\n                # Compare versions\n                if ($CurrentVersion.CompareTo($HighestVersion) -gt 0) {\n                    $HighestVersion = $CurrentVersion\n                    $HighestVersionFolder = $FolderName\n                }\n            }\n        }\n\n        # If no valid version folder is found\n        if (!$HighestVersionFolder) {\n            throw [System.IO.DirectoryNotFoundException]::New(\"No valid version directories found in $BasePath\")\n        }\n\n        # Combine the base path, the highest version folder, the architecture folder, and the file name.\n        [System.String]$mspdbcmfPath = [System.IO.Path]::Combine($BasePath, $HighestVersionFolder, 'bin', 'Hostx64', 'x64', 'mspdbcmf.exe')\n\n        if (![System.IO.File]::Exists($mspdbcmfPath)) {\n            throw [System.IO.FileNotFoundException]::New(\"mspdbcmf.exe not found at $mspdbcmfPath\")\n        }\n\n        return $mspdbcmfPath\n    }\n\n    [string]$mspdbcmfPath = Find-mspdbcmf\n\n    function Find-MSBuild {\n        # \"-products *\" is necessary to detect BuildTools too\n        [string]$VisualStudioPath = . 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe' -prerelease -latest -property resolvedInstallationPath -products *\n\n        [string]$MSBuildPath = [System.IO.Path]::Combine($VisualStudioPath, 'MSBuild', 'Current', 'Bin', 'MSBuild.exe')\n\n        if (![System.IO.File]::Exists($MSBuildPath)) {\n            throw [System.IO.FileNotFoundException]::New(\"MSBuild.exe not found at $MSBuildPath\")\n        }\n\n        return $MSBuildPath\n    }\n\n    [string]$MSBuildPath = Find-MSBuild\n\n    #region --- Compile C++ projects ---\n\n    ### ComManager\n\n    . $MSBuildPath '..\\AppControl Manager\\eXclude\\ComManager\\ComManager.slnx' /p:Configuration=Release /p:Platform=x64 /target:\"clean;Rebuild\"\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building MS Defender solution for X64. Exit Code: $LASTEXITCODE\") }\n\n    . $MSBuildPath '..\\AppControl Manager\\eXclude\\ComManager\\ComManager.slnx' /p:Configuration=Release /p:Platform=arm64 /target:\"clean;Rebuild\"\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building MS Defender solution for ARM64. Exit Code: $LASTEXITCODE\") }\n\n    #region --- RUST projects ---\n\n    # Uncomment this once stable toolchain supports ehcont security feature, till then we use nightly only\n    # rustup default stable\n    rustup default nightly\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed setting Rust toolchain to Stable. Exit Code: $LASTEXITCODE\") }\n\n    rustup target add aarch64-pc-windows-msvc\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed adding aarch64-pc-windows-msvc target to Rust toolchain. Exit Code: $LASTEXITCODE\") }\n\n    rustup target add x86_64-pc-windows-msvc\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed adding x86_64-pc-windows-msvc target to Rust toolchain. Exit Code: $LASTEXITCODE\") }\n\n    rustup update\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed updating Rust. Exit Code: $LASTEXITCODE\") }\n\n    cargo version\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed checking for Rust version. Exit Code: $LASTEXITCODE\") }\n\n    [string]$Current_Location = (Get-Location).Path\n\n    Set-Location -Path '..\\AppControl Manager\\eXclude\\Rust Interop Library'\n\n    if (Test-Path -PathType Leaf -LiteralPath 'Cargo.lock') {\n        Remove-Item -Force -LiteralPath 'Cargo.lock'\n    }\n\n    rustup toolchain install nightly\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed installing nightly Rust toolchain. Exit Code: $LASTEXITCODE\") }\n\n    rustup default nightly\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed setting Rust toolchain to Nightly. Exit Code: $LASTEXITCODE\") }\n\n    rustup component add rust-src --toolchain nightly-x86_64-pc-windows-msvc\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed adding rust-src component to Nightly toolchain. Exit Code: $LASTEXITCODE\") }\n\n    rustup update\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed updating Rust. Exit Code: $LASTEXITCODE\") }\n\n    cargo version\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed checking for Rust version. Exit Code: $LASTEXITCODE\") }\n\n    cargo clean\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed cleaning the Rust project. Exit Code: $LASTEXITCODE\") }\n\n    cargo update --verbose\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed updating Rust. Exit Code: $LASTEXITCODE\") }\n\n    cargo tree\n\n    rustup show active-toolchain\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed showing active Rust toolchain. Exit Code: $LASTEXITCODE\") }\n\n    cargo build_x64\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building x64 Rust Interop project. Exit Code: $LASTEXITCODE\") }\n\n    cargo build_arm64\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building ARM64 Rust Interop project. Exit Code: $LASTEXITCODE\") }\n\n    Set-Location -Path $Current_Location\n\n    #endregion\n\n    #region --- C# projects ---\n\n    dotnet restore '..\\AppControl Manager\\eXclude\\DISMService\\DISMService.csproj' -r win-x64\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed restoring DISMService for x64. Exit Code: $LASTEXITCODE\") }\n\n    dotnet restore '..\\AppControl Manager\\eXclude\\DISMService\\DISMService.csproj' -r win-arm64\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed restoring DISMService for ARM64. Exit Code: $LASTEXITCODE\") }\n\n    dotnet clean '..\\AppControl Manager\\eXclude\\DISMService\\DISMService.slnx' --configuration Release\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed cleaning DISMService (first pass). Exit Code: $LASTEXITCODE\") }\n\n    dotnet build '..\\AppControl Manager\\eXclude\\DISMService\\DISMService.slnx' --configuration Release --verbosity minimal\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building DISMService (first pass). Exit Code: $LASTEXITCODE\") }\n\n    dotnet msbuild '..\\AppControl Manager\\eXclude\\DISMService\\DISMService.slnx' /p:Configuration=Release /restore /p:Platform=x64 /p:PublishProfile=\"..\\AppControl Manager\\eXclude\\DISMService\\Properties\\PublishProfiles\\win-x64.pubxml\" /t:Publish -v:minimal\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed publishing DISMService for x64. Exit Code: $LASTEXITCODE\") }\n\n    dotnet clean '..\\AppControl Manager\\eXclude\\DISMService\\DISMService.slnx' --configuration Release\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed cleaning DISMService (second pass). Exit Code: $LASTEXITCODE\") }\n\n    dotnet build '..\\AppControl Manager\\eXclude\\DISMService\\DISMService.slnx' --configuration Release --verbosity minimal\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building DISMService (second pass). Exit Code: $LASTEXITCODE\") }\n\n    dotnet msbuild '..\\AppControl Manager\\eXclude\\DISMService\\DISMService.slnx' /p:Configuration=Release /restore /p:Platform=arm64 /p:PublishProfile=\"..\\AppControl Manager\\eXclude\\DISMService\\Properties\\PublishProfiles\\win-arm64.pubxml\" /t:Publish -v:minimal\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed publishing DISMService for ARM64. Exit Code: $LASTEXITCODE\") }\n\n    #endregion\n\n    [string]$CsProjFilePath = (Resolve-Path -Path '.\\Harden System Security.csproj').Path\n\n    # https://learn.microsoft.com/dotnet/core/tools/dotnet-build\n    # https://learn.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference\n    # https://learn.microsoft.com/visualstudio/msbuild/common-msbuild-project-properties\n\n    # Copy the X64 components to the directory before the build starts\n\n    Copy-Item -Path '..\\AppControl Manager\\eXclude\\ComManager\\x64\\Release\\ComManager.exe' -Destination '.\\CppInterop\\ComManager.exe' -Force\n\n    Copy-Item -Path '..\\AppControl Manager\\eXclude\\DISMService\\OutputX64\\DISMService.exe' -Destination '.\\DISMService.exe' -Force\n\n    # Generate for X64 architecture\n    dotnet clean 'Harden System Security.slnx' --configuration Release\n    dotnet build 'Harden System Security.slnx' --configuration Release --verbosity minimal /p:Platform=x64\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building x64 Harden System Security project. Exit Code: $LASTEXITCODE\") }\n\n    dotnet msbuild 'Harden System Security.slnx' /p:Configuration=Release /p:AppxPackageDir=\"MSIXOutputX64\\\" /p:GenerateAppxPackageOnBuild=true /p:Platform=x64 -v:minimal /p:MsPdbCmfExeFullpath=$mspdbcmfPath -bl:X64MSBuildLog.binlog\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed packaging x64 Harden System Security project. Exit Code: $LASTEXITCODE\") }\n\n    # Copy the ARM64 components to the directory before the build starts\n\n    Copy-Item -Path '..\\AppControl Manager\\eXclude\\ComManager\\ARM64\\Release\\ComManager.exe' -Destination '.\\CppInterop\\ComManager.exe' -Force\n\n    Copy-Item -Path '..\\AppControl Manager\\eXclude\\DISMService\\OutputARM64\\DISMService.exe' -Destination '.\\DISMService.exe' -Force\n\n    # Generate for ARM64 architecture\n    dotnet clean 'Harden System Security.slnx' --configuration Release\n    dotnet build 'Harden System Security.slnx' --configuration Release --verbosity minimal /p:Platform=ARM64\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed building ARM64 Harden System Security project. Exit Code: $LASTEXITCODE\") }\n\n    dotnet msbuild 'Harden System Security.slnx' /p:Configuration=Release /p:AppxPackageDir=\"MSIXOutputARM64\\\" /p:GenerateAppxPackageOnBuild=true /p:Platform=ARM64 -v:minimal /p:MsPdbCmfExeFullpath=$mspdbcmfPath -bl:ARM64MSBuildLog.binlog\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"Failed packaging ARM64 Harden System Security project. Exit Code: $LASTEXITCODE\") }\n\n    function Get-MSIXFile {\n        param(\n            [System.String]$BasePath,\n            [System.String]$FolderPattern,\n            [System.String]$FileNamePattern,\n            [System.String]$ErrorMessageFolder,\n            [System.String]$ErrorMessageFile\n        )\n        # Get all subdirectories in the base path matching the folder pattern\n        [System.String[]]$Folders = [System.IO.Directory]::GetDirectories($BasePath)\n        [System.String]$DetectedFolder = $null\n        foreach ($Folder in $Folders) {\n            if ([System.Text.RegularExpressions.Regex]::IsMatch($Folder, $FolderPattern)) {\n                $DetectedFolder = $Folder\n                break\n            }\n        }\n\n        if (!$DetectedFolder) {\n            throw [System.InvalidOperationException]::New($ErrorMessageFolder)\n        }\n\n        # Get the full path of the first file matching the file name pattern inside the found folder\n        [System.String[]]$Files = [System.IO.Directory]::GetFiles($DetectedFolder)\n        [System.String]$DetectedFile = $null\n        foreach ($File in $Files) {\n            if ([System.Text.RegularExpressions.Regex]::IsMatch($File, $FileNamePattern)) {\n                $DetectedFile = $File\n                break\n            }\n        }\n\n        if (!$DetectedFile) {\n            throw [System.InvalidOperationException]::New($ErrorMessageFile)\n        }\n        return $DetectedFile\n    }\n\n    #region Finding X64 outputs\n    [System.String]$FinalMSIXX64Path = Get-MSIXFile -BasePath ([System.IO.Path]::Combine($PWD.Path, 'MSIXOutputX64')) -FolderPattern 'Harden System Security_\\d+\\.\\d+\\.\\d+\\.\\d+_Test' -FileNamePattern 'Harden System Security_\\d+\\.\\d+\\.\\d+\\.\\d+_x64\\.msix' -ErrorMessageFolder 'Could not find the directory for X64 MSIX file' -ErrorMessageFile 'Could not find the X64 MSIX file'\n    [System.String]$FinalMSIXX64Name = [System.IO.Path]::GetFileName($FinalMSIXX64Path)\n    [System.String]$FinalMSIXX64SymbolPath = Get-MSIXFile -BasePath ([System.IO.Path]::Combine($PWD.Path, 'MSIXOutputX64')) -FolderPattern 'Harden System Security_\\d+\\.\\d+\\.\\d+\\.\\d+_Test' -FileNamePattern 'Harden System Security_\\d+\\.\\d+\\.\\d+\\.\\d+_x64\\.msixsym' -ErrorMessageFolder 'Could not find the directory for X64 symbol file' -ErrorMessageFile 'Could not find the X64 symbol file'\n    [System.String]$FinalMSIXX64SymbolName = [System.IO.Path]::GetFileName($FinalMSIXX64SymbolPath)\n    #endregion\n\n    #region Finding ARM64 outputs\n    [System.String]$FinalMSIXARM64Path = Get-MSIXFile -BasePath ([System.IO.Path]::Combine($PWD.Path, 'MSIXOutputARM64')) -FolderPattern 'Harden System Security_\\d+\\.\\d+\\.\\d+\\.\\d+_Test' -FileNamePattern 'Harden System Security_\\d+\\.\\d+\\.\\d+\\.\\d+_arm64\\.msix' -ErrorMessageFolder 'Could not find the directory for ARM64 MSIX file' -ErrorMessageFile 'Could not find the ARM64 MSIX file'\n    [System.String]$FinalMSIXARM64Name = [System.IO.Path]::GetFileName($FinalMSIXARM64Path)\n    [System.String]$FinalMSIXARM64SymbolPath = Get-MSIXFile -BasePath ([System.IO.Path]::Combine($PWD.Path, 'MSIXOutputARM64')) -FolderPattern 'Harden System Security_\\d+\\.\\d+\\.\\d+\\.\\d+_Test' -FileNamePattern 'Harden System Security_\\d+\\.\\d+\\.\\d+\\.\\d+_arm64\\.msixsym' -ErrorMessageFolder 'Could not find the directory for ARM64 symbol file' -ErrorMessageFile 'Could not find the ARM64 symbol file'\n    [System.String]$FinalMSIXARM64SymbolName = [System.IO.Path]::GetFileName($FinalMSIXARM64SymbolPath)\n    #endregion\n\n    #region Detect and Validate File Versions\n    [System.Text.RegularExpressions.Regex]$versionRegexX64 = [System.Text.RegularExpressions.Regex]::New('Harden System Security_(\\d+\\.\\d+\\.\\d+\\.\\d+)_x64\\.msix')\n\n    [System.Text.RegularExpressions.Regex]$versionRegexARM64 = [System.Text.RegularExpressions.Regex]::New('Harden System Security_(\\d+\\.\\d+\\.\\d+\\.\\d+)_arm64\\.msix')\n    [System.Text.RegularExpressions.Match]$MatchX64 = $versionRegexX64.Match($FinalMSIXX64Name)\n\n    [System.Text.RegularExpressions.Match]$MatchARM64 = $versionRegexARM64.Match($FinalMSIXARM64Name)\n\n    if (!$MatchX64.Success) {\n        throw [System.InvalidOperationException]::New('Could not detect version from X64 file name')\n    }\n\n    if (!$MatchARM64.Success) {\n        throw [System.InvalidOperationException]::New('Could not detect version from ARM64 file name')\n    }\n\n    [System.String]$versionX64 = $MatchX64.Groups[1].Value\n\n    [System.String]$versionARM64 = $MatchARM64.Groups[1].Value\n\n\n    if ($versionX64 -ne $versionARM64) {\n        throw [System.InvalidOperationException]::New('The versions in X64 and ARM64 files do not match')\n    }\n\n    # Craft the file name for the MSIX Bundle file\n    [System.String]$FinalBundleFileName = \"Harden System Security_$versionX64.msixbundle\"\n    #endregion\n\n    # Creating the directory where the MSIX packages will be copied to\n    [System.String]$MSIXBundleOutput = [System.IO.Directory]::CreateDirectory([System.IO.Path]::Combine($script:AppControlManagerDirectory, 'MSIXBundleOutput')).FullName\n\n    [System.IO.File]::Copy($FinalMSIXX64Path, [System.IO.Path]::Combine($MSIXBundleOutput, $FinalMSIXX64Name), $true)\n\n    [System.IO.File]::Copy($FinalMSIXARM64Path, [System.IO.Path]::Combine($MSIXBundleOutput, $FinalMSIXARM64Name), $true)\n\n    # The path to the final MSIX Bundle file\n    [System.String]$MSIXBundle = [System.IO.Path]::Combine($MSIXBundleOutput, $FinalBundleFileName)\n\n    function Get-MakeAppxPath {\n        [System.String]$BasePath = 'C:\\Program Files (x86)\\Windows Kits\\10\\bin'\n\n        # Get all subdirectories under the base path\n        [System.String[]]$VersionDirs = [System.IO.Directory]::GetDirectories($BasePath)\n\n        # Initialize the highest version with a minimal version value.\n        [System.Version]$HighestVersion = [System.Version]::New('0.0.0.0')\n        [System.String]$HighestVersionFolder = $null\n\n        # Loop through each directory to find the highest version folder.\n        foreach ($Dir in $VersionDirs) {\n            # Extract the folder name\n            [System.String]$FolderName = [System.IO.Path]::GetFileName($Dir)\n            [System.Version]$CurrentVersion = $null\n            # Try parsing the folder name as a Version.\n            if ([System.Version]::TryParse($FolderName, [ref] $CurrentVersion)) {\n                # Compare versions\n                if ($CurrentVersion.CompareTo($HighestVersion) -gt 0) {\n                    $HighestVersion = $CurrentVersion\n                    $HighestVersionFolder = $FolderName\n                }\n            }\n        }\n\n        # If no valid version folder is found\n        if (!$HighestVersionFolder) {\n            throw [System.IO.DirectoryNotFoundException]::New(\"No valid version directories found in $BasePath\")\n        }\n\n        [string]$CPUArch = @{AMD64 = 'x64'; ARM64 = 'arm64' }[$Env:PROCESSOR_ARCHITECTURE]\n        if ([System.String]::IsNullOrWhiteSpace($CPUArch)) { throw [System.PlatformNotSupportedException]::New('Only AMD64 and ARM64 architectures are supported.') }\n\n        # Combine the base path, the highest version folder, the architecture folder, and the file name.\n        [System.String]$MakeAppxPath = [System.IO.Path]::Combine($BasePath, $HighestVersionFolder, $CPUArch, 'makeappx.exe')\n\n        return $MakeAppxPath\n    }\n\n    [System.String]$MakeAppxPath = Get-MakeAppxPath\n\n    if ([System.string]::IsNullOrWhiteSpace($MakeAppxPath)) {\n        throw [System.IO.FileNotFoundException]::New('Could not find the makeappx.exe')\n    }\n\n    # https://learn.microsoft.com/windows/win32/appxpkg/make-appx-package--makeappx-exe-#to-create-a-package-bundle-using-a-directory-structure\n    . $MakeAppxPath bundle /d $MSIXBundleOutput /p $MSIXBundle /o /v\n\n    if ($LASTEXITCODE -ne 0) { throw [System.InvalidOperationException]::New(\"MakeAppx failed creating the MSIXBundle. Exit Code: $LASTEXITCODE\") }\n\n    #Endregion\n\n    Write-Host -Object \"X64 MSIX File Path: $FinalMSIXX64Path\" -ForegroundColor Green\n    Write-Host -Object \"X64 MSIX File Name: $FinalMSIXX64Name\" -ForegroundColor Green\n    Write-Host -Object \"X64 Symbols: $FinalMSIXX64SymbolPath\" -ForegroundColor Green\n\n    Write-Host -Object \"ARM64 MSIX File Path: $FinalMSIXARM64Path\" -ForegroundColor Cyan\n    Write-Host -Object \"ARM64 MSIX File Name: $FinalMSIXARM64Name\" -ForegroundColor Cyan\n    Write-Host -Object \"ARM64 Symbols: $FinalMSIXARM64SymbolPath\" -ForegroundColor Cyan\n\n    Write-Host -Object \"MSIX Bundle File Path: $MSIXBundle\" -ForegroundColor Yellow\n    Write-Host -Object \"MSIX Bundle File Name: $FinalBundleFileName\" -ForegroundColor Yellow\n\n    if ($Workflow) {\n\n        [XML]$CSProjXMLContent = Get-Content -Path $CsProjFilePath -Force\n        [string]$MSIXVersion = $CSProjXMLContent.Project.PropertyGroup.FileVersion\n        [string]$MSIXVersion = $MSIXVersion.Trim() # It would have trailing whitespaces\n        if ([string]::IsNullOrWhiteSpace($FinalMSIXX64Path) -or [string]::IsNullOrWhiteSpace($FinalMSIXX64Name) -or [string]::IsNullOrWhiteSpace($MSIXVersion)) { throw 'Necessary info could not be found' }\n\n        # Write the MSIXVersion to GITHUB_ENV to set it as an environment variable for the entire workflow\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"PACKAGE_VERSION=$MSIXVersion\"\n\n        # Saving the details for the MSIX Bundle file\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"MSIXBundle_PATH=$MSIXBundle\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"MSIXBundle_NAME=$FinalBundleFileName\"\n\n        # Saving the details of the log files\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"X64MSBuildLog_PATH=$((Resolve-Path -Path .\\X64MSBuildLog.binlog).Path)\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"ARM64MSBuildLog_PATH=$((Resolve-Path -Path .\\ARM64MSBuildLog.binlog).Path)\"\n\n        # Saving the details of the X64 symbol file\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"X64Symbol_PATH=$FinalMSIXX64SymbolPath\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"X64Symbol_NAME=$FinalMSIXX64SymbolName\"\n\n        # Saving the details of the ARM64 symbol file\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"ARM64Symbol_PATH=$FinalMSIXARM64SymbolPath\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"ARM64Symbol_NAME=$FinalMSIXARM64SymbolName\"\n\n        # https://github.com/microsoft/sbom-tool\n        # Generating SBOM\n        Invoke-WebRequest -Uri 'https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe' -OutFile \"${Env:RUNNER_TEMP}\\sbom-tool.exe\"\n\n        # https://github.com/microsoft/sbom-tool/blob/main/docs/sbom-tool-arguments.md\n        . \"${Env:RUNNER_TEMP}\\sbom-tool.exe\" generate -b $MSIXBundleOutput -bc .\\ -pn 'Harden System Security' -ps 'Violet Hansen' -pv $MSIXVersion -nsb 'https://github.com/HotCakeX/Harden-Windows-Security' -V Verbose -gt true -li true -pm true -D true -lto 80\n\n        # Saving the details of the SBOM file\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value \"SBOM_PATH=$MSIXBundleOutput/_manifest/spdx_2.2/manifest.spdx.json\"\n        Add-Content -Path ($env:GITHUB_ENV, $env:GITHUB_OUTPUT) -Value 'SBOM_NAME=manifest.spdx.json'\n    }\n\n    if ($Upload) {\n        dotnet clean '..\\AppControl Manager\\eXclude\\PartnerCenter\\PartnerCenter.slnx' --configuration Release\n        dotnet build '..\\AppControl Manager\\eXclude\\PartnerCenter\\PartnerCenter.slnx' --configuration Release --verbosity minimal\n        dotnet msbuild '..\\AppControl Manager\\eXclude\\PartnerCenter\\PartnerCenter.slnx' /p:Configuration=Release /p:Platform=x64 /p:PublishProfile=win-x64 /t:Publish -v:minimal\n\n        [System.String]$TokenEndpoint = $env:PARTNERCENTER_TOKENENDPOINT\n        [System.String]$ClientId = $env:PARTNERCENTER_CLIENTID\n        [System.String]$ClientSecret = $env:PARTNERCENTER_CLIENTSECRET\n        [System.String]$ApplicationId = $env:PARTNERCENTER_APPLICATIONID_HSS\n\n        [System.String]$PackageFilePath = $MSIXBundle\n        [System.String]$ReleaseNotesFilePath = (Resolve-Path -Path ReleaseNotes.txt).Path\n\n        . '..\\AppControl Manager\\eXclude\\PartnerCenter\\X64Output\\PartnerCenter.exe' $TokenEndpoint $ClientId $ClientSecret $ApplicationId $PackageFilePath $ReleaseNotesFilePath\n    }\n\n    if ($null -ne $Stopwatch) {\n\n        $Stopwatch.Stop()\n\n        $Elapsed = $Stopwatch.Elapsed\n        [string]$Result = @\"\n                  Execution Time:\n                  ----------------------------\n                  Total Time   : $($Elapsed.ToString('g'))\n                  Hours        : $($Elapsed.Hours)\n                  Minutes      : $($Elapsed.Minutes)\n                  Seconds      : $($Elapsed.Seconds)\n                  Milliseconds : $($Elapsed.Milliseconds)\n                  ----------------------------\n\"@\n\n        Write-Host -Object $Result -ForegroundColor Cyan\n    }\n}\n\n# For GitHub workflow\n# Build_HSS -DownloadRepo $false -InstallDeps $false -Workflow $true -UpdateWorkLoads $false -Upload $true\n# Local - ARM64 + X64\nBuild_HSS -DownloadRepo $true -InstallDeps $true -Workflow $false -UpdateWorkLoads $false -Upload $false\n</code></pre> <p></p>"},{"location":"Harden%20System%20Security/Lock%20Screen/","title":"Lock Screen | Harden System Security","text":"<ul> <li> Automatically locks device after X seconds of inactivity (just like mobile phones), which is set to 120 seconds (2 minutes) in this app, you can change that to any value you like.  CSP</li> </ul> <ul> <li> <p> Requires CTRL+ALT+DEL on the lock screen, kernel protected set of key strokes. The reason and logic behind it is:  CSP</p> <ul> <li>A malicious user might install malware that looks like the standard sign-in dialog box for the Windows operating system and capture a user's password. The attacker can then sign into the compromised account with whatever level of user rights that user has.</li> </ul> </li> </ul> <p></p> <ul> <li> <p> Enables a security anti-hammering feature that sets a threshold of 5 for the number of failed sign-in attempts that causes the device to be locked by using BitLocker. Sign-in attempts include Windows password or Windows Hello authentication methods. This threshold means, if the specified maximum number of failed sign-in attempts is exceeded, the device will invalidate the Trusted Platform Module (TPM) protector and any other protector except the 48-digit recovery password, and then reboot. During Device Lockout mode, the computer or device only boots into the touch-enabled Windows Recovery Environment (WinRE) until an authorized user enters the recovery password to restore full access.</p> <ul> <li>The Harden System Security App automatically saves the 48-digit recovery password of each drive in itself, the location of it will also be visible on the PowerShell console when you run it. It is very important to keep it in a safe and reachable place, e.g. in OneDrive's Personal Vault which requires authentication to access. See Here and Here for more info about OneDrive's Personal Vault</li> </ul> </li> </ul> <p></p> <ul> <li> Configures account lockout policy: Account lockout threshold, Sets the number of allowed failed sign-in attempts to 5. In combination with other policies in this category, this means every 5 failed sign-in attempts will need a full day to pass before 5 more attempts can be made, otherwise Bitlocker will engage, system will be restarted and 48-digit Bitlocker code will be asked. This policy greatly prevents brute force attempts. CSP</li> </ul> <p></p> <ul> <li> Configures account lockout policy: Sets Account lockout duration to 1440 minutes or 1 day. In combination with other policies in this category, this means every 5 failed sign-in attempts will need a full day to pass before 5 more attempts can be made, otherwise Bitlocker will engage, system will be restarted and 48-digit Bitlocker code will be asked.  CSP</li> </ul> <p></p> <ul> <li> Configures account lockout policy: Sets Reset account lockout counter to 1440 minutes or 1 day. In combination with other policies in this category, this means every 5 failed sign-in attempts will need a full day to pass before 5 more attempts can be made, otherwise Bitlocker will engage, system will be restarted and 48-digit Bitlocker code will be asked.  CSP</li> </ul> <p></p> <ul> <li> Hides email address of the Microsoft account on lock screen, if your device is in a trusted place like at home then this isn't necessary.</li> </ul> <p></p> <ul> <li> <p> Don't display username at sign-in; If a user signs in as Other user, the full name of the user isn't displayed during sign-in. In the same context, if users type their email address and password at the sign-in screen and press Enter, the displayed text \"Other user\" remains unchanged, and is no longer replaced by the user's first and last name, as in previous versions of Windows 10. Additionally, if users enter their domain user name and password and click Submit, their full name isn't shown until the Start screen displays.  CSP</p> <ul> <li>Useful If you have devices that store sensitive data, with monitors displayed in unsecured locations, or if you have devices with sensitive data that are remotely accessed, revealing logged on user's full names or domain account names</li> </ul> </li> </ul> <p></p> <ul> <li> <p> Don't display last signed-in; This security policy setting determines whether the name of the last user to sign in to the device is displayed on the Secure Desktop. If this policy is enabled, the full name of the last user to successfully sign in isn't displayed on the Secure Desktop, nor is the user's sign-in tile displayed. Additionally, if the Switch user feature is used, the full name and sign-in tile aren't displayed. The sign-in screen requests both Username + Windows Hello credentials.  CSP</p> <ul> <li> <p>This feature can be useful to enable if you live in High-Risk Environments and you don't want anyone to get any information about your accounts when you aren't logged-in.</p> </li> <li> <p>This policy will prevent you from using \"Forgot my PIN\" feature in lock screen or logon screen. If you forget your PIN, you won't be able to recover it.</p> </li> <li> <p>If you use Windows Hello Face or Fingerprint, you can easily login using those credential providers without the need to supply username first.</p> </li> </ul> </li> </ul> <p></p> <ul> <li> Don't Display Network Selection UI on Lock Screen (like WIFI Icon); This setting allows you to control whether anyone can interact with available networks UI on the logon screen. Once enabled, the device's network connectivity state cannot be changed without signing into Windows. Suitable for High-Risk Environments.  CSP</li> </ul> <p></p> <ul> <li> <p> Applies the following PIN Complexity rules to Windows Hello  CSP. Please note that, by default, any character can be set as a PIN. However, the following policies ensure that certain characters are always included as a minimum requirement.</p> <ul> <li> <p>Must include digits CSP</p> </li> <li> <p>Expires every 180 days (default behavior is to never expire)  CSP</p> </li> <li> <p>Setting an expiration date ensures that, in the event of theft, a threat actor cannot indefinitely attempt to guess the PIN. After 180 days, the PIN expires, rendering it unusable even if guessed correctly. To reset the PIN, authentication via a Microsoft account or EntraID\u2014likely inaccessible to the attacker\u2014will be required. Combined with anti-hammering and BitLocker policies, this expiration guarantees that a threat actor cannot endlessly persist in guessing the PIN.</p> </li> <li> <p>History of the 1 most recent selected PIN is preserved to prevent the user from reusing it  CSP</p> </li> <li> <p>Must include lower-case letters CSP</p> </li> </ul> </li> </ul> <p></p>"},{"location":"Harden%20System%20Security/Manage%20Installed%20Apps/","title":"Manage Installed Apps | Harden System Security","text":"<p>In this page, you are able to retrieve the complete list of installed applications on the system along with their full details, including version numbers, installation dates, installation paths and more. You can uninstall any app(s) you don't want to be on your system. If the app(s) you selected are uninstallable then the Harden System Security will try to uninstall them for all users first and if that fails then it will uninstall them for the current user only. The actions it takes are logged in the Logs page for you to review. Use the search bar to easily find the app(s) you are looking for.</p> <p></p>"},{"location":"Harden%20System%20Security/Microsoft%20365%20Apps%20Security%20Baseline/","title":"Microsoft 365 Apps Security Baseline | Harden System Security","text":"<p>The security baseline for Microsoft 365 Apps for enterprise is published twice a year, usually in June and December. Use the Harden System Security App to effortlessly apply them onto your system.</p> <p>In this page, the Harden System Security app enables you to apply the Microsoft 365 Apps Security Baselines on your system, verify compliance, and remove the applied policies.</p> <p>You can measure the compliance level of your system using the built-in compliance assessment functionality by simply pressing the Verify button on this page. You will receive a detailed report of every security measure inside the Microsoft 365 Apps Security Baseline and you will be able to export this security report to a properly formatted JSON file as well.</p> <p>Each security measure has the following details:</p> <ol> <li><code>Friendly Name</code>: Helps you easily identify the security measure and its purpose.</li> <li><code>Source</code>: Shows you which part of the Microsoft 365 Apps Security Baseline this security measure belongs to.</li> <li><code>Status</code>: Whether the current system applies the security measure or not.</li> <li><code>Current Value</code>: The current value of the security measure on the system.</li> <li><code>Expected Value</code>: The correct and secure value the security measure should be in order to be compliant.</li> </ol> <p></p> <p>You can change the download URL of the Microsoft 365 Apps Security Baselines in this page too if you need. This can come handy if you want to apply an older baseline on your system or to just change the URL to point to another address such as an alternative mirror.</p> <p></p> <p>Note</p> <p>When applying the Microsoft 365 Apps Security Baseline, Harden System Security app will automatically download the latest version directly from Microsoft's servers or from the URL you provided, process it entirely in memory, and apply it without writing any temporary files to disk. The same is true for verification or removal processes.</p> <p>While this approach increases development complexity, it significantly improves security by preventing malicious interference with temporary files before application.</p> <p>The app caches the baseline in memory to avoid unnecessary re-downloads. The cache expires every 2 hours, after which it is refreshed with the latest data from the Microsoft Server/Custom URL you provided, and this only happens if the app is open. The cache is compressed to minimize memory usage.</p> <p></p> <p></p> <p>Tip</p> <p>More info in Microsoft Learn</p> <p>Microsoft Security Baselines Version Matrix</p> <p></p>"},{"location":"Harden%20System%20Security/Microsoft%20Defender/","title":"Microsoft Defender | Harden System Security","text":"<ul> <li> <p> Extends the Cloud Security Scan time to the maximum amount of 60 seconds, by default it is 10 seconds. You need to be aware that this means actions like downloading and opening an unknown file will make Microsoft Defender send samples of it to the Cloud for more advanced analysis and it can take a maximum of 60 seconds from the time you try to open that unknown file to the time when it will be opened (if deemed safe).  CSP</p> </li> <li> <p>Here is an example of the notification you will see in Windows 11 if that happens.</p> <p><p></p></p> </li> </ul> <p></p> <ul> <li> Configures the Cloud Block/Protection Level to the maximum level of Zero Tolerance and Block At First Sight. No unknown file can run on your system without first being recognized by the Microsoft's Security Graph and other globally omniscient systems.  CSP</li> </ul> <p></p> <ul> <li> Configures the Microsoft Defender to send all samples automatically. Increasing protection by participating in the SpyNet / MAPS network.  CSP</li> </ul> <p></p> <ul> <li> Sets the SpyNet membership to Advanced, improving Cloud Protection.  CSP</li> </ul> <p></p> <ul> <li> Enables file hash computation; designed to allow admins to force the anti-malware solution to \"compute file hashes for every executable file that is scanned if it wasn't previously computed\" to \"improve blocking for custom indicators in Microsoft Defender Advanced Threat Protection (Microsoft Defender ATP).  CSP</li> </ul> <p></p> <ul> <li> <p> Clears Quarantined items after 1 day instead of the default behavior of keeping them indefinitely.  CSP</p> </li> <li> <p>Quarantine involves isolating potentially harmful files in a non-executable area of your system to prevent any risk of execution. To further minimize potential threats, quarantined files are automatically removed after 1 day, rather than being retained indefinitely. This precaution helps mitigate the possibility of these files exploiting unforeseen vulnerabilities in the future, ensuring a proactive approach to system security.</p> </li> </ul> <p></p> <ul> <li> Allows Microsoft Defender to download security updates even on a metered connection.  CSP</li> </ul> <p></p> <ul> <li> Enables Microsoft Defender to scan mapped network drives during full scan.  CSP</li> </ul> <p></p> <ul> <li> Enables Microsoft Defender to scan emails. The engine will parse the mailbox and mail files.  CSP</li> </ul> <p></p> <ul> <li> Enables Microsoft Defender to scan Removable Drives.  CSP</li> </ul> <p></p> <ul> <li> Enables Microsoft Defender to scan Reparse Points.  CSP</li> </ul> <p></p> <ul> <li> Forces Microsoft Defender to scan network files.   CSP</li> </ul> <p></p> <ul> <li> <p> Sets the Signature Update Interval to every 3 hours instead of automatically.  CSP</p> <ul> <li> <p>Change logs for security intelligence updates</p> </li> <li> <p>Configure and validate Microsoft Defender Antivirus network connections</p> </li> <li> <p>Security intelligence updates for Microsoft Defender Antivirus and other Microsoft antimalware</p> </li> <li> <p>Microsoft Safety Scanner</p> </li> <li> <p>Paste the following PowerShell code to retrieve the latest available online versions of the Platform, Signatures, and Engine for Microsoft Defender   - <pre><code>$X = irm \"https://www.microsoft.com/security/encyclopedia/adlpackages.aspx?action=info\"\n@{Engine = $X.versions.engine; Signatures = $X.versions.signatures.'#text'; Platform = $X.versions.platform} | ft -AutoSize\n</code></pre></p> </li> </ul> </li> </ul> <p></p> <ul> <li> Forces Microsoft Defender to check for new virus and spyware definitions before it runs a scan.  CSP</li> </ul> <p></p> <ul> <li> Makes Microsoft Defender run catch-up scans for scheduled quick scans. A computer can miss a scheduled scan, usually because the computer is off at the scheduled time, but now after the computer misses two scheduled quick scans, Microsoft Defender runs a catch-up scan the next time someone logs onto the computer.  CSP</li> </ul> <p></p> <ul> <li> Enables Network Protection of Microsoft Defender CSP</li> </ul> <p></p> <ul> <li> Enables scanning of restore points CSP</li> </ul> <p></p> <ul> <li> Makes sure Async Inspection for Network protection of Microsoft Defender is turned on - Network protection now has a performance optimization that allows Block mode to start asynchronously inspecting long connections after they're validated and allowed by SmartScreen, which might provide a potential reduction in the cost that inspection has on bandwidth and can also help with app compatibility problems.  CSP</li> </ul> <p></p> <ul> <li> <p>  Enables Smart App Control (if it's in Evaluation mode): adds significant protection from new and emerging threats by blocking apps that are malicious or untrusted. Smart App Control also helps to block potentially unwanted apps, which are apps that may cause your device to run slowly, display unexpected ads, offer extra software you didn't want, or do other things you don't expect.</p> <ul> <li> <p>Smart App Control is User-Mode (and enforces Kernel-Mode) App Control for Business, more info in the Wiki. You can see its status in System Information and enable it manually from Microsoft Defender app's GUI. It is very important for Windows and Windows Defender intelligence updates to be always up-to-date in order for Smart App Control to work properly as it relies on live intelligence and definition data from the cloud and other sources to make a Smart decision about programs and files it encounters.</p> </li> <li> <p>Smart App Control uses ISG (Intelligent Security Graph). The ISG isn't a \"list\" of apps. Rather, it uses the same vast security intelligence and machine learning analytics that power Microsoft Defender SmartScreen and Microsoft Defender Antivirus to help classify applications as having \"known good\", \"known bad\", or \"unknown\" reputation. This cloud-based AI is based on trillions of signals collected from Windows endpoints and other data sources and processed every 24 hours. As a result, the decision from the cloud can change.</p> </li> <li> <p>Smart App Control can block a program entirely from running or only some parts of it in which case your app or program will continue working just fine most of the time. It's improved a lot since it was introduced, and it continues doing so. Consider turning it on after clean installing a new OS and fully updating it.</p> </li> <li> <p>Smart App Control enforces the Microsoft Recommended Driver Block rules and the Microsoft Recommended Block Rules</p> </li> <li> <p>Once you turn Smart App Control off, it can't be turned on without resetting or reinstalling Windows.</p> </li> </ul> </li> </ul> <p></p> <ul> <li>  Enables \"Send optional diagnostic data\" because it is required for Smart App Control to operate when it's in evaluation mode or turned on, and for communication with Intelligent Security Graph (ISG). This setting will be automatically applied if Smart App Control is already turned on or you choose to turn it on.  CSP</li> </ul> <p></p> <ul> <li> <p> Enables Controlled Folder Access. It helps protect your valuable data from malicious apps and threats, such as ransomware. Controlled folder access protects your data by checking apps against a list of known, trusted apps. Due to the recent wave of global ransomware attacks, it is important to use this feature to protect your valuables files, specially OneDrive folders.  CSP</p> <ul> <li> <p>If it blocks a program from accessing one of your folders it protects, and you absolutely trust that program, then you can add it to exclusion list using Microsoft Defender GUI or PowerShell. you can also query the list of allowed apps using PowerShell (commands below). with these commands, you can backup your personalized list of allowed apps, that are relevant to your system, and restore them in case you clean install your Windows.</p> </li> <li> <p> The root of the OneDrive folders of all the user accounts will be added to the protected folders list of Controlled Folder Access, to provide Ransomware protection for the entire OneDrive folder.  CSP</p> </li> </ul> </li> </ul> <p>-     <pre><code># Add multiple programs to the exclusion list of Controlled Folder Access\nAdd-MpPreference -ControlledFolderAccessAllowedApplications 'C:\\Program Files\\App\\app.exe','C:\\Program Files\\App2\\app2.exe'\n</code></pre></p> <p>-     <pre><code># Get the list of all allowed apps\n(Get-MpPreference).ControlledFolderAccessAllowedApplications\n</code></pre></p> <p></p> <ul> <li> <p> Enables Mandatory ASLR, It might cause compatibility issues only for some poorly-made 3rd party programs, specially portable ones.  CSP</p> <ul> <li> <p>Automatically detects and excludes the Git executables of GitHub Desktop and Git (Standalone version) from mandatory ASLR if they are installed on the system. More info here</p> </li> <li> <p>You can add Mandatory ASLR override for a trusted program using the PowerShell command below or in the Program Settings section of Exploit Protection in Microsoft Defender app.</p> <ul> <li><code>Set-ProcessMitigation -Name \"C:\\TrustedApp.exe\" -Disable ForceRelocateImages</code></li> </ul> </li> </ul> </li> </ul> <p></p> <ul> <li> <p> Applies Exploit Protections/Process Mitigations from this list to the following programs:  CSP</p> <ul> <li> <p>All channels of Microsoft Edge browser</p> </li> <li> <p>Quick Assist app</p> </li> <li> <p>Some System processes</p> </li> <li> <p>Microsoft 365 apps</p> </li> <li> <p>More apps and processes will be added to the list over time once they are properly validated to be fully compatible.</p> </li> <li> <p>Exploit Protection configurations are also accessible in XML format within this repository. When implementing exploit protections using an XML file, the existing exploit mitigations will seamlessly integrate rather than being overwritten. Should there be pre-existing exploit protections applied to an executable on the system, and the XML file specifies different mitigations for the same executable, these protections will be merged and applied collectively.</p> </li> </ul> </li> </ul> <p></p> <ul> <li> Turns on Data Execution Prevention (DEP) for all applications, including 32-bit programs. By default, the output of <code>BCDEdit /enum \"{current}\"</code> (in PowerShell) for the NX bit is <code>OptIn</code> but the Harden System Security app sets it to <code>AlwaysOn</code></li> </ul> <p></p> <ul> <li> Check for the latest virus and spyware security intelligence on startup.  CSP</li> </ul> <p></p> <ul> <li> Specifies the maximum depth to scan archive files to the maximum possible value of <code>4,294,967,295</code> CSP</li> </ul> <p></p> <ul> <li> Defines the maximum size of downloaded files and attachments to be scanned and set it to the maximum possible value of <code>10,000,000 KB</code> or <code>10 GB</code>. the default is <code>20480 KB</code> or <code>~20MB</code> CSP</li> </ul> <p></p> <ul> <li> Enables the Enhanced Phishing Protection service.  CSP</li> </ul> <p></p> <ul> <li> Enables notifying user of malicious and phishing scenarios in Microsoft Defender Enhanced Phishing Protection.  CSP</li> </ul> <p></p> <ul> <li> Enables the feature in Enhanced Phishing Protection in Microsoft Defender SmartScreen that warns users if they reuse their work or school password.  CSP</li> </ul> <p></p> <ul> <li> Enables warning users if they type their work or school passwords in unsafe apps.  CSP</li> </ul> <p></p> <ul> <li> Enables automatic data collection (formerly known as Capture Threat Window) of Enhanced Phishing Protection in Microsoft Defender SmartScreen for security analysis from a suspicious website or app.  CSP</li> </ul> <p></p> <ul> <li> Creates scheduled task for fast weekly Microsoft recommended driver block list update.. You won't see this prompt if the task already exists and is enabled or running.</li> </ul> <p></p> <ul> <li>  Set Microsoft Defender engine and platform update channel to beta.  CSP CSP</li> </ul> <p></p> <ul> <li> Defines the number of days before spyware security intelligence is considered out of date to 2. The default is 7.  CSP</li> </ul> <p></p> <ul> <li> Defines the number of days before virus security intelligence is considered out of date to 2. The default is 7.  CSP</li> </ul> <p></p> <ul> <li> Sets the default action for Severe and High threat levels to Remove, for Medium and Low threat levels to Quarantine.  CSP</li> </ul> <p></p> <ul> <li> Configures real-time protection and Security Intelligence Updates to be enabled during OOBE.  CSP</li> </ul> <p></p> <ul> <li> Enables the Intel TDT (Intel\u00ae Threat Detection Technology) integration with Microsoft Defender.  CSP</li> </ul> <p></p> <ul> <li> Disables Performance Mode - Security risks in relation to Dev Drive CSP</li> </ul> <p></p> <ul> <li> Enables a network protection setting that blocks malicious network traffic instead of displaying a warning.  CSP</li> </ul> <p></p> <ul> <li> Configures the Brute-Force Protection to use cloud aggregation to block IP addresses that are over 99% likely malicious  CSP</li> </ul> <p></p> <ul> <li> Configures the Brute-Force Protection to detect and block attempts to forcibly sign in and initiate sessions  CSP</li> </ul> <p></p> <ul> <li> Sets the internal feature logic to determine blocking time for the Brute-Force Protections  CSP</li> </ul> <p></p> <ul> <li> Configures the Remote Encryption Protection to use cloud intel and context, and block when confidence level is above 90%.  CSP</li> </ul> <p></p> <ul> <li> Configures the Remote Encryption Protection to detect and block attempts to replace local files with encrypted versions from another device  CSP</li> </ul> <p></p> <ul> <li> Sets the internal feature logic to determine blocking time for the Remote Encryption Protection  CSP</li> </ul> <p></p> <ul> <li> Extends the brute-force protection coverage in the Microsoft Defender Antivirus to block local network addresses.  CSP</li> </ul> <p></p> <ul> <li> Enables ECS Configurations in the Microsoft Defender. They improve product health and security by automatically fixing any possible issues/bugs that may arise, in a timely manner.</li> </ul> <p></p> <ul> <li> Enables Network Protection to be configured into block or audit mode on Windows Server.  CSP</li> </ul> <p></p> <p>Tip</p> <p>Performance analyzer for Microsoft Defender Antivirus</p> <p></p>"},{"location":"Harden%20System%20Security/Microsoft%20Security%20Baselines/","title":"Microsoft Security Baselines | Harden System Security","text":"<p>A security baseline is a group of Microsoft-recommended configuration settings that explains their security implications. These settings are based on feedback from Microsoft security engineering teams, product groups, partners, and customers.</p> <p>In this page, the Harden System Security app enables you to apply the Microsoft Security Baselines on your system, verify compliance, and remove the applied policies.</p> <p>You can measure the compliance level of your system using the built-in compliance assessment functionality by simply pressing the Verify button on this page. You will receive a detailed report of every security measure inside the Microsoft Security Baseline and you will be able to export this security report to a properly formatted JSON file as well.</p> <p>Each security measure has the following details:</p> <ol> <li><code>Friendly Name</code>: Helps you easily identify the security measure and its purpose.</li> <li><code>Source</code>: Shows you which part of the Microsoft Security Baseline this security measure belongs to.</li> <li><code>Status</code>: Whether the current system applies the security measure or not.</li> <li><code>Current Value</code>: The current value of the security measure on the system.</li> <li><code>Expected Value</code>: The correct and secure value the security measure should be in order to be compliant.</li> </ol> <p></p> <p>You can change the download URL of the Microsoft Security Baselines in this page too if you need. This can come handy if you want to apply an older baseline on your system or to just change the URL to point to another address such as an alternative mirror.</p> <p></p> <p>Note</p> <p>When applying the Microsoft Security Baseline, Harden System Security app will automatically download the latest version directly from Microsoft's servers or from the URL you provided, process it entirely in memory, and apply it without writing any temporary files to disk. The same is true for verification or removal processes.</p> <p>While this approach increases development complexity, it significantly improves security by preventing malicious interference with temporary files before application.</p> <p>The app caches the baseline in memory to avoid unnecessary re-downloads. The cache expires every 2 hours, after which it is refreshed with the latest data from the Microsoft Server/Custom URL you provided, and this only happens if the app is open. The cache is compressed to minimize memory usage.</p> <p></p> <p></p> <p>Tip</p> <p>Official Documentation for the Microsoft Security Baseline</p> <p>Optional Overrides for Microsoft Security Baselines</p> <p>Highly recommended to apply these overrides. Use Optional Overrides when applying the hardening measures on Azure VMs.</p> <p></p>"},{"location":"Harden%20System%20Security/Miscellaneous%20Configurations/","title":"Miscellaneous Configurations | Harden System Security","text":"<ul> <li> <p> Sets Early launch antimalware engine's status to <code>8</code> which is Good only. The default value is <code>3</code>, which allows good, unknown and 'bad but critical'. that is the default value, because setting it to <code>8</code> can prevent your computer from booting if the driver it relies on is critical but at the same time unknown or bad.  CSP</p> <ul> <li>By being launched first by the kernel, ELAM is ensured to be launched before any third-party software and is therefore able to detect malware in the boot process and prevent it from initializing. ELAM drivers must be specially signed by Microsoft to ensure they are started by the Windows kernel early in the boot process.</li> </ul> </li> </ul> <p></p> <ul> <li> Disables location services (Location, Windows Location Provider, Location Scripting) system wide. Websites and apps won't be able to use your precise location, however they will still be able to detect your location using your IP address.  CSP CSP CSP</li> </ul> <p></p> <ul> <li> <p> Enables <code>svchost.exe</code> mitigations. built-in system services hosted in <code>svchost.exe</code> processes will have stricter security policies enabled on them. These stricter security policies include a policy requiring all binaries loaded in these processes to be signed by Microsoft, and a policy disallowing dynamically generated code.  CSP</p> <ul> <li>Requires Business Windows licenses. e.g., Windows 11 pro for Workstations, Enterprise or Education.</li> </ul> </li> </ul> <p></p> <ul> <li> Turns on Enhanced mode search for Windows indexer. The default is classic mode.  CSP<ul> <li>This causes some UI elements in the search settings in Windows settings to become unavailable for Standard user accounts to view, because it will be a managed feature by an Administrator.</li> </ul> </li> </ul> <p></p> <ul> <li> Enforce the Administrator role for adding printer drivers CSP</li> </ul> <p></p> <ul> <li> Enables SMB/LDAP Signing CSP CSP</li> </ul> <p></p> <ul> <li> Enables Edge browser (stable/beta/dev channels) to download and install updates on any network, metered or not; because the updates are important and should not be suppressed.</li> </ul> <p></p> <ul> <li> Enables all Windows users to use Hyper-V and Windows Sandbox by adding all Windows users to the \"Hyper-V Administrators\" security group using its SID. By default, only Administrators can use Hyper-V or Windows Sandbox.</li> </ul> <p></p> <ul> <li> <p> Creates custom views for Windows Event Viewer to help keep tabs on important security events:</p> <ul> <li> <p>Attack Surface Reduction Rules</p> </li> <li> <p>Controlled Folder Access</p> </li> <li> <p>Exploit Protection</p> </li> <li> <p>Network Protection</p> </li> <li> <p>MSI and Scripts for App Control Auditing</p> </li> <li> <p>Sudden Shut down events (due to power outage)</p> </li> <li> <p>Code Integrity Operational</p> </li> <li> <p>Restarts (By user or by the System/Apps)</p> </li> <li> <p>Workstation Locks and Unlocks</p> </li> <li> <p>Checks to make sure Other Logon/Logoff Events Audit is active CSP</p> </li> <li> <p>Failed Login attempts via PIN at lock screen</p> <ul> <li>Error/Status code <code>0xC0000064</code> indicates wrong PIN entered at lock screen</li> </ul> </li> <li> <p>USB storage Connects &amp; Disconnects (Flash drives, phones etc.)</p> </li> </ul> </li> </ul> <p></p> <ul> <li> Enables WinVerifyTrust Signature Validation, a security feature related to WinVerifyTrust function that handles Windows Authenticode signature verification for portable executable (PE) files.</li> </ul> <p></p> <ul> <li> Enables Command line process auditing.  CSP</li> </ul> <p></p> <ul> <li> Enables a policy that requests claims and compound authentication for Dynamic Access Control and Kerberos armoring.  CSP</li> </ul> <p></p> <ul> <li>  Enables Windows Protected Print.  CSP</li> </ul> <p></p> <ul> <li> Configures the SSH client's configurations to use the following secure MACs (Message Authentication Codes): <code>MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com</code>.</li> </ul> <p></p> <ul> <li>  Enables support for long paths.</li> </ul> <p></p> <ul> <li> Force strong key protection for user keys stored on the computer. User is prompted when the key is first used.</li> </ul> <p></p> <ul> <li> <p>  Reduced Telemetry. This sub-category applies all of the policies mentioned below. They do not have any effect on security.</p> </li> <li> <p>Disable Online Tips.  CSP</p> </li> <li> <p>Disable Find My Device feature.  CSP</p> </li> <li> <p>Disable Automatic Update of Speech Data.  CSP</p> </li> <li> <p>Turn off the advertising ID.  CSP</p> </li> <li> <p>Turn off cloud optimized content.  CSP</p> </li> <li> <p>Do not show Windows tips.  CSP</p> </li> <li> <p>Do not show feedback notifications.  CSP</p> </li> <li> <p>Turn off Automatic Download and Update of Map Data.  CSP</p> </li> <li> <p>Disable Message Service Cloud Sync for cellular text messages.  CSP</p> </li> <li> <p>Disable support for web-to-app linking with app URI handlers.  CSP</p> </li> <li> <p>Disable \"Continue experiences on this device\" feature.  CSP</p> </li> <li> <p>Disable Font Providers.  CSP</p> </li> <li> <p>Don't search the web or display web results in Search.  CSP</p> </li> <li> <p>Do not allow web search. More Info</p> </li> </ul> <p></p>"},{"location":"Harden%20System%20Security/Non%20Admin%20Measures/","title":"Non-Admin Measures | Harden System Security","text":"<p>You don't need Admin privileges to run this category, because no system-wide changes is made. Changes in this category only apply to the current user account that is running the Harden System Security App.</p> <ul> <li> Shows known file extensions in File explorer</li> </ul> <p></p> <ul> <li> Shows hidden files, folders and drives (toggles the control panel folder options item)</li> </ul> <p></p> <ul> <li> Disables websites accessing local language list - good for privacy</li> </ul> <p></p> <ul> <li> Turns off safe search in Windows search, will enable +18 content to appear in searches; essentially toggles the button in: Windows settings &gt; privacy and security &gt; search permissions &gt; safe search</li> </ul> <p></p> <ul> <li> Enables Clipboard History</li> </ul> <p></p> <ul> <li> Turns on text suggestions when typing on the physical keyboard</li> </ul> <p></p> <ul> <li> Turns on \"Multilingual text suggestions\" for the current user, toggles the option in Windows settings</li> </ul> <p></p> <ul> <li> Turns off sticky key shortcut of pressing shift key 5 times fast</li> </ul> <p></p> <ul> <li> Disables Show reminders and incoming VoIP calls on the lock screen</li> </ul> <p></p>"},{"location":"Harden%20System%20Security/Optional%20Windows%20Features/","title":"Optional Windows Features | Harden System Security","text":""},{"location":"Harden%20System%20Security/Optional%20Windows%20Features/#full-customization","title":"Full Customization","text":"<p>In this page, the Harden System Security app offers a fully featured list of every single Windows Feature and Capability with searching and sorting functionalities, allowing you to easily enable or disable each of them with real time progress display.</p> <p></p>"},{"location":"Harden%20System%20Security/Optional%20Windows%20Features/#recommended-configurations","title":"Recommended Configurations","text":"<p>Use the 3 apply, undo or verify buttons in this page to apply the security configurations states explained below. They enable/disable only specific Windows Features and capabilities to provide optimal security for your system:</p> <ul> <li> <p>The Harden System Security app disables the following rarely used features in Windows optional features (Control Panel):</p> <ul> <li> <p>PowerShell v2: because it's old and doesn't support AMSI.</p> </li> <li> <p>Work Folders client: not used when your computer is not part of a domain or enterprise network.</p> </li> <li> <p>Internet Printing Client: used in combination with IIS web server, old feature, can be disabled without causing problems further down the road.</p> </li> <li> <p>Windows Media Player (legacy): isn't needed anymore, Windows 11 has a modern media player app.</p> </li> <li> <p>Microsoft Defender Application Guard, it's deprecated. Learn more about Microsoft Edge Security Features here.</p> </li> </ul> </li> </ul> <p></p> <ul> <li> <p>Uninstalls these optional features (Windows Settings -&gt; Apps -&gt; Optional Features):</p> <ul> <li> <p>Notepad (system): legacy Notepad program. Windows 11 has multi-tabbed modern Notepad app.</p> </li> <li> <p>VBSCRIPT: a legacy deprecated scripting engine component, Microsoft does not recommend using this component unless and until it is really required.</p> </li> <li> <p>Internet Explorer mode for Edge browser: It's only used by a few possible organizations that have very old internal websites.</p> </li> <li> <p>WMIC: Old and deprecated, not secure and is in Microsoft recommended block rules.</p> </li> <li> <p>WordPad: Old and deprecated. None of the new features of Word documents are supported in it. Recommended to use Word Online, Notepad or M365 Word.</p> </li> <li> <p>PowerShell ISE: Old PowerShell environment that doesn't support versions above 5.1. Highly recommended to use Visual Studio Code for PowerShell usage and learning. You can even replicate the ISE experience in Visual Studio Code. You can access Visual Studio Code online in your browser without the need to install anything.</p> </li> <li> <p>Steps Recorder: it's deprecated.</p> </li> </ul> </li> </ul> <p></p> <ul> <li> <p>Enables these optional features (Control Panel):</p> <ul> <li> <p>Windows Sandbox: install, test and use programs in a disposable virtual operation system, completely separate from your  main OS</p> </li> <li> <p>Hyper-V: a great hybrid hypervisor (Type 1 and Type 2) to run virtual machines on. check out this Hyper-V Wiki page</p> </li> </ul> </li> </ul> <p></p>"},{"location":"Harden%20System%20Security/Protect/","title":"Protect","text":"<p>The Protect page in the Harden System Security App is a central hub for Apply, Verifying or Removing the security measures. It offers presets with optimal pre-selected categories and sub-categories to streamline the hardening process.</p> <p>Each Security Measure category in this page has its own dedicated page where you can view and modify the specific settings related to that category in a more detailed manner. When you use the Apply, Verify or Remove buttons in this page, it is as if you are directly interacting with the button on that category's page.</p> <p></p>"},{"location":"Harden%20System%20Security/TLS%20Security/","title":"TLS Security | Harden System Security","text":"<p>Changes made by this category only affect things that use Schannel SSP: that includes IIS web server, built-in inbox Windows apps and some other programs supplied by Microsoft, including Windows network communications, but not 3rd party software that use portable stacks like Java, nodejs, python or php.</p> <p>If you want to read more: Demystifying Schannel</p> <p></p> <ul> <li> Disables TLS 1 and TLS 1.1 security protocols that only exist for backward compatibility. All modern software should and do use <code>TLS 1.2</code> and <code>TLS 1.3</code>.  CSP CSP</li> </ul> <p></p> <ul> <li> Disables MD5 Hashing Algorithm that is only available for backward compatibility</li> </ul> <p></p> <ul> <li> Disables the following weak ciphers that are only available for backward compatibility: <code>\"DES 56-bit\"</code>,<code>\"RC2 40-bit\"</code>,<code>\"RC2 56-bit\"</code>,<code>\"RC2 128-bit\"</code>,<code>\"RC4 40-bit\"</code>,<code>\"RC4 56-bit\"</code>,<code>\"RC4 64-bit\"</code>,<code>\"RC4 128-bit\"</code>,<code>\"3DES 168-bit (Triple DES 168)\"</code></li> </ul> <p></p> <ul> <li> Configures the TLS to only use the following secure cipher suites and in this exact order:  CSP</li> </ul> <pre><code>TLS_CHACHA20_POLY1305_SHA256\nTLS_AES_256_GCM_SHA384\nTLS_AES_128_GCM_SHA256\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\nTLS_DHE_RSA_WITH_AES_256_GCM_SHA384\nTLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n</code></pre> <p></p> <ul> <li>  Use the TLS for BattleNet sub-category if you have the BattleNet game client installed on your system. This client utilizes the <code>TLS_RSA_WITH_AES_256_CBC_SHA</code> cipher suite to establish connections with its servers. Since this cipher suite is less secure, it is excluded from the secure cipher-suites list by default. However, enabling this sub-category will include the required cipher suite, allowing you to use BattleNet without interruptions.</li> </ul> <p></p> <ul> <li> Configures TLS ECC Curves to use the following prioritized Curves order:  CSP</li> </ul> <pre><code>nistP521\ncurve25519\nNistP384\nNistP256\n</code></pre> <ul> <li>By default, in Windows, the order is this:</li> </ul> <pre><code>curve25519\nNistP256\nNistP384\n</code></pre> <p>Read more in this Wiki post</p> <p></p>"},{"location":"Harden%20System%20Security/User%20Account%20Control/","title":"User Account Control | Harden System Security","text":"<ul> <li> <p> Prompt for elevation of privilege on secure desktop for all binaries in Administrator accounts, which presents the sign-in UI and restricts functionality and access to the system until the sign-in requirements are satisfied. The secure desktop's primary difference from the user desktop is that only trusted processes running as SYSTEM are allowed to run here (that is, nothing is running at the user's privilege level). The path to get to the secure desktop from the user desktop must also be trusted through the entire chain.  CSP</p> <ul> <li> <p>Default Behavior: Prompt for consent for non-Windows binaries: When an operation for a non-Microsoft application requires elevation of privilege, the user is prompted on the secure desktop to select either Permit or Deny. If the user selects Permit, the operation continues with the user's highest available privilege.</p> </li> <li> <p>Harden Windows Security Behavior: When an operation requires elevation of privilege, the user is prompted on the secure desktop to select either Permit or Deny. If the user selects Permit, the operation continues with the user's highest available privilege.</p> </li> </ul> </li> </ul> <p></p> <ul> <li>  Only elevate executables that are signed and validated by enforcing cryptographic signatures on any interactive application that requests elevation of privilege. One of the Potential impacts of it is that it can prevent certain poorly designed programs from prompting for UAC.  CSP</li> </ul> <p></p> <ul> <li> <p>  Hides the entry points for Fast User Switching.  CSP</p> <ul> <li>This policy will prevent you from using \"Forgot my PIN\" feature in lock screen or logon screen. If you forget your PIN, you won't be able to recover it.</li> </ul> </li> </ul> <p></p> <ul> <li> Sets the behavior of the elevation prompt for Standard users to Prompt for Credentials on the Secure Desktop.  CSP</li> </ul> <p></p> <ul> <li> Configures the type of Admin Approval Mode to be Admin Approval Mode with enhanced privilege protection.</li> </ul> <p></p>"},{"location":"Harden%20System%20Security/Windows%20Firewall/","title":"Windows Firewall | Harden System Security","text":"<ul> <li> Sets the Network Location of all connections to Public; Public network means less trust to other network devices.</li> </ul> <ul> <li> Makes sure Windows Firewall is enabled for all profiles (which is the default)  CSP CSP CSP</li> </ul> <ul> <li> Enables notifications in all 3 profile types to be displayed to the user when an application is blocked from listening on a port.  CSP CSP CSP</li> </ul> <ul> <li> Enables Windows Firewall logging for Domain, Private and Public profiles, sets the log file size for each of them to the max <code>32.767 MB</code>. Defines separate log files for each of the firewall profiles. Logs only dropped packets for Private and Public profiles, Logs both dropped and successful packets for Domain profile.  CSP CSP CSP CSP CSP CSP CSP CSP CSP</li> </ul> <ul> <li> Disables Multicast DNS (mDNS) UDP-in Firewall Rules for all 3 Firewall profiles, This might interfere with Miracast screen sharing, which relies on the Public profile, and homes where the Private profile is not selected, but it does add an extra measure of security in public places, like a coffee shop.<ul> <li>The domain name <code>.local</code> which is used in mDNS (Multicast DNS) is a special-use domain name reserved by the Internet Engineering Task Force (IETF) so that it may not be installed as a top-level domain in the Domain Name System (DNS) of the Internet.</li> </ul> </li> </ul>"},{"location":"Harden%20System%20Security/Windows%20Networking/","title":"Windows Networking | Harden System Security","text":"<ul> <li> Disables NetBIOS over TCP/IP on all network interfaces.</li> </ul> <ul> <li> Disables Smart Multi-Homed Name Resolution because it uses NetBIOS and LLMNR, protocols that shouldn't be used anymore.  CSP</li> </ul> <ul> <li> Disables LMHOSTS lookup protocol on all network adapters, legacy feature that's not used anymore.</li> </ul> <ul> <li> Disables Printing over HTTP because HTTP is not encrypted and it's an old feature that's not used anymore.  CSP</li> </ul> <ul> <li> Clears all the entries in Remotely accessible registry paths.</li> </ul> <ul> <li> Clears all the entries in Remotely accessible registry paths and subpaths.</li> </ul> <ul> <li> Sets the minimum required SMB version for Client to <code>3.1.1</code> which is the latest available version at the moment and was introduced years ago with Windows 10.</li> </ul> <ul> <li> Sets the minimum required SMB version for Server to <code>3.1.1</code> which is the latest available version at the moment and was introduced years ago with Windows 10.</li> </ul> <ul> <li> <p>  Blocks NTLM completely. This sub-category applies the following 4 policies:</p> </li> <li> <p>For SMB.</p> </li> <li> <p>For all incoming connections.</p> </li> <li> <p>For all outgoing connections. - This can prevent you from using RDP (Remote Desktop) remotely via IP address which is insecure as it needs public exposed ports and uses NTLM. You can use Quick Assist or Bastion for Azure VMs which are more secure alternatives. Local RDP such as for Hyper-V enhanced session is not affected.</p> </li> <li> <p>Disables the RPC Endpoint Mapper Client Authentication policy.  CSP. It is recommended to be disabled when NTLM is completely blocked.</p> </li> </ul> <p></p> <ul> <li> Requires encryption for SMB client/workstation.</li> </ul> <p></p> <ul> <li> Enables encryption for SMB Server. Its status can be checked using the following PowerShell command: <code>(get-SmbServerConfiguration).EncryptData</code>. If the returned value is <code>$True</code> then SMB Encryption is turned on.</li> </ul> <p></p> <ul> <li> Enables QUIC for SMB Client.</li> </ul> <p></p> <ul> <li> Enables QUIC for SMB Server.</li> </ul> <p></p> <ul> <li> Configures the Cipher Suites from the default value of <code>AES_128_GCM,AES_128_CCM,AES_256_GCM,AES_256_CCM</code> to <code>AES_256_GCM,AES_256_CCM,AES_128_GCM,AES_128_CCM</code> for the SMB Client.  CSP</li> </ul> <p></p> <ul> <li> Configures the Cipher Suites from the default value of <code>AES_128_GCM,AES_128_CCM,AES_256_GCM,AES_256_CCM</code> to <code>AES_256_GCM,AES_256_CCM,AES_128_GCM,AES_128_CCM</code> for the SMB Server.  CSP</li> </ul> <p></p>"},{"location":"Harden%20System%20Security/Windows%20Update/","title":"Windows Update | Harden System Security","text":"<p>Windows updates are extremely important. They always should be installed as fast as possible to stay secure and if a reboot is required, it should be done immediately. Threat actors can weaponize publicly disclosed vulnerabilities the same day their POC (Proof-Of-Concept) is released..</p> <p>In Windows by default, devices will scan daily, automatically download and install any applicable updates at a time optimized to reduce interference with usage, and then automatically try to restart when the end user is away.</p> <p>The following policies the app configures make sure the default behavior explained above is tightly enforced.</p> <ul> <li> Enables Windows Update to download and install updates on any network, metered or not; because the updates are important and should not be suppressed, that's what bad actors would want. CSP</li> </ul> <p></p> <ul> <li> Enables \"Receive Updates for other Microsoft products\" (such as PowerShell)</li> </ul> <p></p> <ul> <li> Enables \"Notify me when a restart is required to finish updating\".  CSP</li> </ul> <p></p> <ul> <li> Specifies the number of days before quality updates are installed on devices automatically to 1 day.  CSP</li> </ul> <p></p> <ul> <li> Specifies the number of days before feature updates are installed on devices automatically to 1 day.  CSP</li> </ul> <p></p> <ul> <li> Sets the number of grace period days before feature updates are installed on devices automatically to 1 day.  CSP</li> </ul> <p></p> <ul> <li> Sets the number of grace period days before quality updates are installed on devices automatically to 1 day.  CSP</li> </ul> <p></p> <ul> <li> Configures the automatic updates to happen every day, automatically be downloaded and installed, notify users for restart.  CSP</li> </ul> <p></p> <ul> <li> Enables features introduced via servicing that are off by default so that users will be able to get new features after having Windows Update settings managed by Group Policy as the result of running this category.  CSP</li> </ul> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/","title":"Harden Windows Security Module","text":"<p>Harden Windows Security is a PowerShell module designed to simplify the application of critical security configurations in Windows. This tool offers a range of intuitive and innovative methods to enhance your system's security posture effortlessly. Detailed explanations of all available security measures can be found in the repository's README file. Harden Windows Security provides several modes of interaction to cater to different user preferences:</p> <ul> <li> <p>Graphical User Interface (GUI): For those who prefer an interactive experience, a fully-featured GUI is available.</p> </li> <li> <p>Command-Line Interface (CLI): The complete feature set is accessible via the PowerShell command line for users who favor a script-based approach.</p> </li> <li> <p>Unattended Mode: Ideal for automation, this mode allows you to schedule and execute all or specific security configurations at predefined intervals.</p> </li> <li> <p>Executable Format: Thanks to its hybrid design, the same codebase, without any changes to it, can be compiled into an executable file, catering to users who prefer a standalone application.</p> </li> </ul> <p>Harden Windows Security also excels in rigorous compliance verification and security assessment. It empowers you to evaluate your system's adherence to security standards and recommendations outlined in this repository. The module is fully capable of conducting compliance checks and detecting policies applied through modern workplace management tools like Intune MDM, traditional Group Policies, Registry keys, Windows APIs, CIM, and more.</p> <p>Furthermore, this module is invaluable for security researchers and penetration testers seeking to assess and improve their system's security posture. It is compatible with any system locale and language, ensuring broad usability.</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#comprehensive-logging-capabilities","title":"Comprehensive Logging Capabilities","text":"<p>Harden Windows Security includes detailed logging features that track every part of its operations. These logs are helpful for reviewing what actions were taken, making it easier to audit and troubleshoot. You can choose where these logs are saved:</p> <ul> <li> <p>Log Files: Save logs in files for easy review and storage.</p> </li> <li> <p>Windows Event Logs: Add logs to Windows Event Viewer for centralized monitoring.</p> </li> <li> <p>Console Output: Display logs in the console for real-time updates.</p> </li> </ul> <p>These logging options ensure that all actions taken by Harden Windows Security are recorded, giving you clear visibility into your security processes. Whether you\u2019re conducting security checks, responding to issues, or just keeping an eye on things, these logs provide valuable information.</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#automatic-updates","title":"Automatic Updates","text":"<p>The module checks for updates every time you run it and updates itself if there is a new version available, so you don't have to manually do anything.</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#remove-pre-installed-windows-apps","title":"Remove Pre-installed Windows Apps","text":"<p>The Harden Windows Security provides an intuitive GUI to display a list of pre-installed apps on your device, enabling effortless removal. Once removed, these apps are deleted for all users and will not reappear when new user accounts are created. To reinstall them, you must download them from the Microsoft Store</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#manage-individual-attack-surface-reduction-asr-rules","title":"Manage Individual Attack Surface Reduction (ASR) Rules","text":"<p>With the GUI, you can configure each Attack Surface Reduction (ASR) rule individually. Additionally, you can quickly check the current status of any specific ASR rule.</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#remove-each-individual-optional-windows-features","title":"Remove Each individual Optional Windows Features","text":"<p>The Harden Windows Security's GUI allows you to manage and remove optional Windows features and capabilities individually. It also provides a convenient way to check the status of each feature and capability.</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#verify-file-reputation-using-smart-app-control-or-smartscreen","title":"Verify File Reputation Using Smart App Control or SmartScreen","text":"<p>The Harden Windows Security includes a unique feature that lets you verify a file's reputation using Smart App Control or SmartScreen intelligence, depending on which service is currently active.</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#bitlocker-encryption-decryption-and-backup","title":"BitLocker Encryption, Decryption And Backup","text":"<p>Leverage the Harden Windows Security GUI to securely encrypt your internal and external drives using advanced security configurations, including TPM + PIN + Startup Key for triple-factor authentication or TPM + PIN for 2-factor authentication. You can also back up your recovery keys to a file effortlessly, ensuring safe storage in case they are needed in the future.</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#remove-pre-loaded-network-adapter-drivers","title":"Remove Pre-loaded Network Adapter Drivers","text":"<p>Windows includes pre-loaded Ethernet and Wi-Fi network adapter drivers to enable internet connectivity during the Out-of-Box Experience (OOBE) without requiring manual driver installation. These drivers support hardware from manufacturers such as Intel, Qualcomm, Broadcom, Marvell, Realtek, Ralink, and others.</p> <p>Using the Harden Windows Security, you can remove unnecessary drivers or those associated with OEM hardware you do not own. This process helps freeing up disk space.</p> <p></p> <p></p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#how-to-install-and-use","title":"How to Install and Use","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#install-the-harden-windows-security-module-from-powershell-gallery","title":"Install the Harden Windows Security Module from PowerShell Gallery","text":"<pre><code>Install-Module -Name 'Harden-Windows-Security-Module' -Force\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#use-the-gui-graphical-user-interface","title":"Use the GUI (Graphical User Interface)","text":"<pre><code>Protect-WindowsSecurity -GUI\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#apply-the-hardening-measures-described-in-the-readme","title":"Apply the Hardening measures described in the Readme","text":"<pre><code>Protect-WindowsSecurity\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#perform-compliance-check","title":"Perform Compliance Check","text":"<pre><code>Confirm-SystemCompliance\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#remove-the-hardening-measures-described-in-the-readme","title":"Remove the Hardening Measures Described in The Readme","text":"<pre><code>Unprotect-WindowsSecurity\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#uninstall-the-harden-windows-security-module","title":"Uninstall the Harden Windows Security Module","text":"<pre><code>Uninstall-Module -Name 'Harden-Windows-Security-Module' -Force -AllVersions\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#protect-windowssecurity","title":"Protect-WindowsSecurity","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#syntax","title":"Syntax","text":"<pre><code>Protect-WindowsSecurity\n    [-GUI]\n    [-Categories &lt;String[]&gt;]\n    [-Log]\n    [-Offline]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#description","title":"Description","text":"<p>The <code>Protect-WindowsSecurity</code> cmdlet's hybrid design allows it to operate with and without administrator privileges. You can use this cmdlet in both interactive and non-interactive modes.</p> <p>In Interactive mode, the cmdlet will ask you to confirm the changes before applying them. In non-interactive mode, you can pre-configure the hardening categories you want to apply and the cmdlet will apply them without asking for confirmation.</p> <p>Tip</p> <p>It possesses the ability to operate entirely in isolation, useful for systems or servers that are disconnected from the Internet.</p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#parameters","title":"Parameters","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-gui","title":"-GUI","text":"<p>Launched the Graphical User Interface (GUI). This is the primary way of launching the GUI of the Harden Windows Security. You will have access to the entire feature set and more.</p> <p></p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-categories","title":"-Categories","text":"<p>Specify the hardening categories that you want to apply. This will tell the module to operate in non-interactive or headless/silent mode which won't ask for confirmation before running each selected categories.</p> <p>You can specify multiple categories by separating them with a comma. If you don't specify any category, the cmdlet will run in interactive mode. Use this parameter for deployments at a large scale.</p> <p>If a selected category requires Administrator privileges and the module is running with Standard privileges, that category is skipped.</p> <p>This parameter has automatic tab completion. You can press the <code>Tab</code> key to see the available categories on the PowerShell console.</p> Type: String[] Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-verbose","title":"-Verbose","text":"<p>Shows verbose messages on the console about what the cmdlet is doing.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-log","title":"-Log","text":"<p>Activates comprehensive logging by recording all the information shown on the screen and some additional data to a text file. It is strongly advised to use the <code>-Verbose</code> parameter when you want to enable logging.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-logpath","title":"-LogPath","text":"<p>The path to save the log file to. If not specified, the log file will be saved in the current working directory.</p> <p>Note</p> <p>Only available if the <code>-Log</code> switch is used.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-offline","title":"-Offline","text":"<p>Indicates that the module is being run in offline mode. Will not download any files from the internet. Will not check for updates. Using this parameter will make the following 3 parameters available and mandatory: <code>PathToLGPO</code>, <code>PathToMSFTSecurityBaselines</code> and <code>PathToMSFT365AppsSecurityBaselines</code>.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-pathtolgpo","title":"-PathToLGPO","text":"<p>The path to the 'LGPO.zip'. Make sure it's in the zip format just like it's downloaded from the Microsoft servers. File name can be anything. The parameter has argument completer so you can press tab and use the file picker GUI to select the zip file.</p> <p>Note</p> <p>Only available if the <code>-Offline</code> switch is used.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-pathtomsftsecuritybaselines","title":"-PathToMSFTSecurityBaselines","text":"<p>The path to the 'Windows Security Baseline.zip'. Make sure it's in the zip format just like it's downloaded from the Microsoft servers. File name can be anything. The parameter has argument completer so you can press tab and use the file picker GUI to select the zip file.</p> <p>Note</p> <p>Only available if the <code>-Offline</code> switch is used.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-pathtomsft365appssecuritybaselines","title":"-PathToMSFT365AppsSecurityBaselines","text":"<p>The path to the 'Microsoft 365 Apps for Enterprise zip'. Make sure it's in the zip format just like it's downloaded from the Microsoft servers. File name can be anything. The parameter has argument completer so you can press tab and use the file picker GUI to select the zip file.</p> <p>Note</p> <p>Only available if the <code>-Offline</code> switch is used.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p>Note</p> <p>You can control the sub-categories of each category by using the following switch parameters on the Command-line.</p> <p>Pay attention to the naming convention of them. They are named after the category they belong to.</p> <p>The switch parameters are dynamic and will only appear if you specify the corresponding category in the <code>-Categories</code> parameter. The following table shows the available switch parameters and their corresponding required categories.</p> <p></p> Parameter Name Description Required Category SecBaselines_NoOverrides Applies the Microsoft Security Baselines without the optional overrides MicrosoftSecurityBaselines MSFTDefender_SAC Enables Smart App Control MicrosoftDefender MSFTDefender_NoDiagData Will not enable optional diagnostics data required for Smart App Control (Does not have any effect if Smart App Control is already turned on) MicrosoftDefender MSFTDefender_NoScheduledTask Will not create scheduled task for fast MSFT driver block rules MicrosoftDefender MSFTDefender_BetaChannels Set Defender Engine and Intelligence update channels to beta MicrosoftDefender DeviceGuard_MandatoryVBS Enables VBS and Memory Integrity in Mandatory Mode DeviceGuard LockScreen_CtrlAltDel Require CTRL + ALT + Delete at lock screen LockScreen LockScreen_NoLastSignedIn Will not display the last signed in user at the lock screen LockScreen UAC_NoFastSwitching Hide entry points for fast user switching UserAccountControl UAC_OnlyElevateSigned Only elevate signed and validated executables UserAccountControl WindowsNetworking_BlockNTLM Blocks NTLM Completely WindowsNetworking Miscellaneous_WindowsProtectedPrint Enables Windows Protected Print Mode MiscellaneousConfigurations MiscellaneousConfigurations_LongPathSupport Enables support for long paths for the programs MiscellaneousConfigurations MiscellaneousConfigurations_StrongKeyProtection Forces strong key protection MiscellaneousConfigurations MiscellaneousConfigurations_ReducedTelemetry Implements policies that reduce OS telemetry MiscellaneousConfigurations CountryIPBlocking_OFAC Include the IP ranges of OFAC Sanctioned Countries in the firewall block rules CountryIPBlocking DangerousScriptHostsBlocking Deploys the Dangerous Script Hosts Blocking App Control Policy DownloadsDefenseMeasures <p></p> <p>Important</p> <p>It is highly recommended to always include the Microsoft Security Baselines category and place it first as it forms the foundation of all subsequent categories.</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#examples","title":"Examples","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-1","title":"Example 1","text":"<p>If you run the module like this without specifying any categories, the module will run in interactive mode and the usual beautiful prompts will be displayed to the user.</p> <pre><code>Protect-WindowsSecurity\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-2","title":"Example 2","text":"<p>This will display a GUI (Graphical UI) allowing you to easily select various options and categories to apply.</p> <pre><code>Protect-WindowsSecurity -GUI\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-3","title":"Example 3","text":"<p>If you run the module like this, the 2 categories will be executed automatically without requiring any user input. The results will be displayed on the console.</p> <pre><code>Protect-WindowsSecurity -Categories MicrosoftDefender, AttackSurfaceReductionRules\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-4","title":"Example 4","text":"<p>This example will apply the Microsoft Defender category with the Smart App Control sub-category, without the need for user interaction, and will show verbose messages.</p> <pre><code>Protect-WindowsSecurity -Categories MicrosoftDefender -MSFTDefender_SAC -Verbose\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-5","title":"Example 5","text":"<p>This example will apply the Microsoft Security Baselines, BitLocker, User Account Control, Lock Screen and Downloads Defense Measures categories. It will also apply the \"Only Elevate Signed and Validated Executables\" sub-category of the User Account Control category, and the \"Require CTRL + ALT + DEL on Lock Screen\" sub-category of the Lock Screen category.</p> <pre><code>Protect-WindowsSecurity -Categories MicrosoftSecurityBaselines,BitLockerSettings,UserAccountControl,LockScreen,DownloadsDefenseMeasures -UAC_OnlyElevateSigned -LockScreen_CtrlAltDel\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-6","title":"Example 6","text":"<p>This example instructs the cmdlet to run in offline mode and will not download any files from the internet. It also runs it in headless/silent mode by specifying which categories to automatically run. <code>-MSFTDefender_SAC</code> switch is used so the Smart App Control sub-category is also applied in the headless/silent mode. <code>-Log</code> switch is mentioned which will save the output of the cmdlet to a text file in the current working directory.</p> <pre><code>Protect-WindowsSecurity -Verbose -Offline -PathToLGPO 'C:\\Users\\Admin\\Desktop\\LGPO.zip' -PathToMSFTSecurityBaselines 'C:\\Users\\Admin\\Desktop\\Baselines.zip' -PathToMSFT365AppsSecurityBaselines 'C:\\Users\\Admin\\Desktop\\M365Baselines.zip' -Log -Categories MicrosoftSecurityBaselines,MicrosoftDefender -MSFTDefender_SAC\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#confirm-systemcompliance","title":"Confirm-SystemCompliance","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#syntax_1","title":"Syntax","text":"<pre><code>Confirm-SystemCompliance\n    [-Categories]\n    [-ExportToCSV]\n    [-ShowAsObjectsOnly]\n    [-DetailedDisplay]\n    [-Offline]\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#description_1","title":"Description","text":"<p>This cmdlet verifies and validates all of the applied security measures described on the Readme page. Compliance checking strictly follows the guidelines and security measures of this GitHub repository. Any minor deviation from them will result in a <code>false</code> value for the corresponding check.</p> <p>The policies can be applied via a wide variety of ways and they will all be detected:</p> <ul> <li>Intune</li> <li>CIM</li> <li>Registry keys</li> <li>Group Policies</li> <li>PowerShell cmdlets</li> <li>Windows APIs</li> </ul> <p>Note</p> <p>Based on the score that you get you will see a different ASCII art!</p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#parameters_1","title":"Parameters","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-categories_1","title":"-Categories","text":"<p>Specify the categories to check compliance for. If not specified, all categories will be checked.</p> Type: String[] Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-exporttocsv","title":"-ExportToCSV","text":"<p>In addition to displaying the results on the screen, also exports them in a nicely formatted CSV for easier viewing. The CSV is fully compatible with GitHub too so you can upload it to GitHub and view it.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-showasobjectsonly","title":"-ShowAsObjectsOnly","text":"<p>Instead of displaying strings on the console, outputs actionable objects and properties. You can use this parameter for when you need to store the output of the function in a variable and use it that way. This provides a very detailed nested object and suppresses the normal string output on the console.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-detaileddisplay","title":"-DetailedDisplay","text":"<p>Shows the output on the PowerShell console with more details and in the list format instead of table format</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-offline_1","title":"-Offline","text":"<p>Skips the online update check and allows you to run the cmdlet in completely offline mode.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#unprotect-windowssecurity-cmdlet","title":"Unprotect-WindowsSecurity Cmdlet","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#syntax_2","title":"Syntax","text":"<pre><code>Unprotect-WindowsSecurity\n    [-OnlyProcessMitigations]\n    [-OnlyCountryIPBlockingFirewallRules]\n    [-WDACPoliciesToRemove &lt;String[]&gt;]\n    [-Force]\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#description_2","title":"Description","text":"<p>You can use this cmdlet to remove all of the applied hardening measures, with the following exceptions:</p> <ul> <li> <p>Bitlocker Encrypted drives are not decrypted when you invoke this cmdlet. Use the GUI experience to decrypt the BitLocker encrypted drives.</p> </li> <li> <p>Security features related to Device Guard that are activated by UEFI Lock remain enabled even after you execute this cmdlet.</p> </li> <li> <p>Windows optional features that are enabled or disabled by <code>Protect-WindowsSecurity</code> cmdlet are not affected.</p> </li> </ul>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#parameters_2","title":"Parameters","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-onlyprocessmitigations","title":"-OnlyProcessMitigations","text":"<p>Indicates that the cmdlet will only remove Process Mitigations (Exploit Protection) settings and doesn't change anything else.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-wdacpoliciestoremove","title":"-WDACPoliciesToRemove","text":"<p>Select the App Control Policy names to remove.</p> Type: String[] Position: Named Default value: None Accepted values: <code>Dangerous-Script-Hosts-Blocking</code>, <code>Downloads-Defense-Measures</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-onlycountryipblockingfirewallrules","title":"-OnlyCountryIPBlockingFirewallRules","text":"<p>Indicates that the cmdlet will only remove the country IP blocking firewall rules and doesn't change anything else.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#technical-details","title":"Technical Details","text":"<p>Harden Windows Security is a hybrid software solution built on the latest available .NET runtime. Approximately 99% of its codebase is written in C#, with PowerShell serving as the initial launch platform. Upon startup in PowerShell, control is quickly transferred to the C# code, and then returned to PowerShell upon completion. This approach leverages the .NET runtime DLLs that are included with PowerShell, eliminating the need for users to install the .NET runtime separately.</p> <p>The repository includes a Visual Studio solution that allows you to build the software directly. If you decide to compile it, it's highly recommended to completely review the code first, then sign the binaries with your code-signing certificate for use as a standalone application in personal, business, or enterprise environments. While the code can be modified if needed, no changes are required for a successful compilation result in the latest version of Visual Studio.</p> <p></p> <p></p> <p></p> <p>Any feedback or suggestions? Please use GitHub issues or discussions</p> <p></p>"},{"location":"Microsoft%20Cloud/Microsoft%20Graph%20Explorer%20and%20API%20Basics/","title":"Microsoft Graph Explorer and API Basics","text":"<p>Use the aka.ms/ge link to access the Microsoft Graph Explorer. You will need to sign into your tenant to access the Microsoft Graph Explorer and provide the necessary permissions to access the data you want to work with.</p> <p></p>"},{"location":"Microsoft%20Cloud/Microsoft%20Graph%20Explorer%20and%20API%20Basics/#how-to-get-the-tenant-id-using-microsoft-graph-explorer","title":"How To Get The Tenant ID Using Microsoft Graph Explorer","text":"<p>Send a <code>GET</code> request to the following endpoint:</p> <pre><code>https://graph.microsoft.com/beta/organization\n</code></pre> <p></p>"},{"location":"Microsoft%20Cloud/Microsoft%20Graph%20Explorer%20and%20API%20Basics/#how-to-list-all-intune-device-configuration-policies-using-microsoft-graph-explorer","title":"How To List All Intune Device Configuration Policies Using Microsoft Graph Explorer","text":"<p>Send a <code>GET</code> request to the following endpoint:</p> <pre><code>https://graph.microsoft.com/beta/deviceManagement/configurationPolicies\n</code></pre> <p></p>"},{"location":"Microsoft%20Cloud/Microsoft%20Graph%20Explorer%20and%20API%20Basics/#how-to-get-a-specific-intune-device-configuration-policy-using-microsoft-graph-explorer","title":"How To Get A Specific Intune Device Configuration Policy Using Microsoft Graph Explorer","text":"<p>Send a <code>GET</code> request to the following endpoint (replace <code>PolicyID</code> with the ID of the policy you want to get):</p> <pre><code>https://graph.microsoft.com/beta/deviceManagement/configurationPolicies/{PolicyID}\n</code></pre> <p>Example:</p> <pre><code>https://graph.microsoft.com/beta/deviceManagement/configurationPolicies/0f6899f8-f2af-49b9-90c7-dd9ab7315fea\n</code></pre> <p></p>"},{"location":"Microsoft%20Cloud/Microsoft%20Graph%20Explorer%20and%20API%20Basics/#how-to-upload-intune-device-configuration-policies-using-microsoft-graph-explorer","title":"How To Upload Intune Device Configuration Policies Using Microsoft Graph Explorer","text":"<p>Send a <code>POST</code> request to the following endpoint:</p> <pre><code>https://graph.microsoft.com/beta/deviceManagement/configurationPolicies\n</code></pre> <p>And in the request body, include the JSON payload for the device configuration policy you want to upload. You can find them in here.</p> <p></p>"},{"location":"Microsoft%20Cloud/Microsoft%20Graph%20Explorer%20and%20API%20Basics/#how-to-list-intune-device-compliance-policies-using-microsoft-graph-explorer","title":"How To List Intune Device Compliance Policies Using Microsoft Graph Explorer","text":"<p>Send a <code>GET</code> request to the following endpoint:</p> <pre><code>https://graph.microsoft.com/beta/deviceManagement/deviceCompliancePolicies\n</code></pre> <p></p>"},{"location":"Microsoft%20Cloud/Microsoft%20Graph%20Explorer%20and%20API%20Basics/#how-to-upload-intune-device-compliance-policies-using-microsoft-graph-explorer","title":"How To Upload Intune Device Compliance Policies Using Microsoft Graph Explorer","text":"<p>Send a <code>POST</code> request to the following endpoint:</p> <pre><code>https://graph.microsoft.com/beta/deviceManagement/deviceCompliancePolicies\n</code></pre> <p>And in the request body, include the JSON payload for the device compliance policy you want to upload. You can find them in here.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/","title":"About TLS, DNS, Encryption and OPSEC concepts","text":"<p>The contents here are for beginners, to learn the basics of TLS, encrypted connections and some preliminary OPSEC (Operational security) concepts.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns","title":"DNS","text":"<p>Let's talk about DNS first. Whether you are using Secure DNS such as DNS over HTTPS or using plain text DNS (Default port: 53), the domain name is the only piece of information that the DNS server provider will see. DNS does not deal with URLs, only domain names.</p> <p>E.g., in this URL, anything after the first <code>/</code> is inaccessible to the DNS server.</p> <pre><code>Github.com/HotCakeX/Harden-Windows-Security\n</code></pre> <p>The DNS provider will know that you are accessing GitHub.com but won't know which repository on GitHub.com you are visiting.</p> <ul> <li> <p>DNS doesn't resolve URLs, only enables the DNS client to find the IP Address of the server part of the URL, the rest is handled by HTTP protocol/request. The part before the slash is the DNS-provided hostname or an ordinary IP address. The part after the slash indicates the application on that host. DNS does not deal with anything after the slash at all.</p> </li> <li> <p>Anything in the URL that is not domain name is encrypted as part of the HTTP request, which uses TLS for encryption and that's why it's HTTPS. They are invisible to the DNS server and anyone else other than the webserver hosting the website you are visiting.</p> </li> <li> <p>Extra info</p> </li> <li> <p>Extra info</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#about-dns-leak-in-plain-text-dns","title":"About DNS Leak in plain text DNS","text":"<p>When you are using VPN or proxies, it's important to make sure there is no DNS leakage. Properly implemented and configured VPNs/Proxies don't have this problem.</p> <p>The most practical way to see if you have DNS leak while using a VPN/Proxy is to use Wireshark to monitor your outbound connections on the edge of your network. Simply type <code>dns</code> in the Wireshark's display filter bar and observe the results. If you are using a proper VPN/Proxy or if you are using Secure DNS such as DoH or DoT, then you shouldn't see any results because that keyword only displays plain text DNS over the default port 53.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns-security","title":"DNS Security","text":"<p>DNSSEC by itself without using DoH/DoT can be downgraded. If you're using DoH or DoT you must be safe as long as you are using a trusted DNS provider and your certificate authority storage is not poisoned/compromised.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#certificates-and-tls","title":"Certificates and TLS","text":"<p>Certain countries with dictatorship or theocracy governments make people install their own root certificate to perform TLS-termination and view their data in plain-text even when HTTPS is being used. One example is what happened in Kazakhstan.</p> <p>Certain applications install root certificates, such as 3rd party antiviruses. They are all equally dangerous and must be avoided.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns-privacy","title":"DNS Privacy","text":"<p>Using DNS-over-TLS or DNS-over-HTTPS mitigates some privacy leaks, because now the ISP won't have the domain you are visiting, but only the IP address. It's possible that more than one site uses the same IP address, so in some cases, it's not possible to say for sure that you are visiting SiteA.com when SiteB.com shares the same IP (Unless you are using TLS v1.2 which leaks Certificate's common name, more on that later), and high-traffic sites usually employ a CDN (content delivery network) to distribute traffic, and the IP they use are not the site's IP, but an IP belonging to the CDN (like CloudFlare or Akamai).</p> <p>Website owners use CDNs like Cloudflare for two purposes:</p> <ol> <li> <p>Best user response time by using the nearest server.</p> </li> <li> <p>Load-balancing in case of the nearest server being overloaded (DDoS and more) and then pointing to the next-nearest server.</p> </li> </ol> <p>Browsers such as Microsoft Edge only support DNS over HTTPS. Windows supports DNS over HTTPS and DNS over TLS.</p> <p>DNS over HTTPS is preferred because by default it uses the same port 443 as the rest of the HTTPS traffic on the Internet, that makes it harder to be detected and blocked. DNS over TLS on the other hand uses TCP port 853 by default and a filter on that port would block DNS over TLS entirely, whereas blocking port 443 is impractical as it essentially cripples the entire Internet.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns-caching","title":"DNS Caching","text":"<p>DNS caches, just like DNS itself, only map domain names to values ('A' records), never the other way around.</p> <p>Both the DNS cache, and the DNS system as a whole, only care that bing.com points to 1.2.3.4, not that the address \"points\" back.</p> <p>Entries in the DNS cache look exactly like entries in authoritative DNS servers, with domain name as the lookup key.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#tls-security-in-windows","title":"TLS Security in Windows","text":"<p>Windows components (Tested on Windows 11 22H2) rely on TLS 1.2, and that makes them dependent on ECC Curves. So, when enforcing TLS 1.3 only for Schannel, Windows components stop working.</p> <p>TLS 1.3 cipher suites don't require ECC curves.</p> <p>NistP256 ECC curve is a must have, otherwise Windows update won't work.</p> <p>nistP521 is the best ECC curve in terms of security, but curve25519 is also the best non-Nist one, which is also secure and popular.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#certificates","title":"Certificates","text":"<p>Handshake messages contain the certificates (both from server and client), and they are encrypted in TLS 1.3, which means that you cannot see these without breaking the encryption.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#sni","title":"SNI","text":"<p>SNI, which is part of the handshake, is still unencrypted even in TLS v1.3. The only way to encrypt SNI is to use ECH (Encrypted Client Hello).</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#opsec","title":"OPSEC","text":"<p>Assuming you are operating in a hostile country (E.g, China, Russia, Iran), you must be aware of the following information to keep your digital footprint minimal.</p> <p>There are 4 pieces of information that can reveal which websites/apps/services you use, to the ISP/government.</p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns_1","title":"DNS","text":"<p>Avoid using plain text DNS as much as you can. Use DNS over HTTPS for security and anonymity. Governments can block well-known servers quickly, you can however self-host on a private cloud or use a serverless DNS to have access to a new endpoint for DoH over a newly setup domain.</p> <p>If plain text DNS over port 53 is used, and you are not using a proper VPN like OpenVPN or WireGuard, or you are using proxy, then eavesdropper can see the website domain/sub-domain you are visiting. If you use secure DNS like DNS over HTTPS, then DNS becomes fully encrypted and all they can see is the domain name of the Secure DNS server as well as the IP addresses of the websites you connect to.</p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#certificate-common-name-etc","title":"Certificate (common name etc.)","text":"<p>Use TLS v1.3. When using TLS v1.3, the certificate part of the HTTPS connection is encrypted and none of its details are visible to the eavesdropper. TLS v1.2 handshakes do not encrypt the certificates, resulting in the common name and the website you are visiting to be revealed to the eavesdropper.</p> <p>Read more</p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#url","title":"URL","text":"<p>The full path to a web page or web resource is sent over HTTP protocol, so if website uses HTTPS, it's all encrypted.</p> <p>When using\u202fHTTPS, the path and query string (everything after TLD and slash /) is encrypted and not available to anybody but the client and server, the answer is encrypted as well.</p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#sni-server-name-indication-or-client-hello","title":"SNI (Server Name Indication or Client Hello)","text":"<p>This is the most important part. Even after using:</p> <ol> <li> <p>HTTPS to encrypt the full URL path</p> </li> <li> <p>DoH to encrypt the DNS</p> </li> <li> <p>TLS v1.3 to encrypt the certificate</p> </li> </ol> <p>If you don't use a proper VPN, SNI can still reveal the domain and sub-domain of the website you are visiting to the eavesdropper. To secure that, the browser and the website must support ECH (Encrypted Client Hello) or use proper VPN like OpenVPN or WireGuard.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#wireshark","title":"Wireshark","text":"<p>Interesting and useful columns to add to the Wireshark GUI for better visibility into your network connections:</p> <ul> <li> <p>Use <code>tls.handshake.type == 11</code> to filter certificates, only works for TLS v1.2 and below since they don't encrypt that part of the handshake.</p> </li> <li> <p>Use <code>ssl.handshake.extension.type == \"server_name\"</code> to filter SNI or Server Name Indication. More info (When using VPN, you either shouldn't be seeing any SNI at all or only see the SNI that belongs to the VPN server's domain.)</p> </li> <li> <p>Cipher Suites is also an interesting column to add to your Wireshark profile.</p> </li> </ul>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/","title":"Answers to the Basic Frequently Asked Questions","text":"<p>This document has answers to the most basic frequently asked questions about this repository.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#from-1-to-10-how-difficult-is-it-to-use-the-harden-windows-security-module","title":"From 1 to 10 How Difficult Is It to Use the Harden Windows Security Module?","text":"<p>1 - Very Easy</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#what-do-i-need-to-do-to-use-harden-windows-security-module","title":"What Do I Need to Do to Use Harden Windows Security Module?","text":"<ol> <li>Press Start button.</li> <li>Type <code>PowerShell</code>, find it and open it.</li> <li>Copy &amp; Paste the following line in the PowerShell command line that is opened and press enter.</li> <li>Wait for the App to start.</li> </ol> <pre><code>(irm 'https://raw.githubusercontent.com/HotCakeX/Harden-Windows-Security/main/Harden-Windows-Security.ps1')+'P'|iex\n</code></pre>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#how-to-install-powershell","title":"How to Install PowerShell?","text":"<ul> <li>Install PowerShell from Microsoft Store (easiest way)</li> <li>Installing PowerShell on Windows</li> </ul>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#but-i-never-used-powershell-before","title":"But I Never Used PowerShell Before","text":"<p>Then let this be your initiation. You don't need to know anything about PowerShell to use the Harden Windows Security application/module.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#do-i-need-to-use-the-harden-windows-security-module-only-on-new-windows-installation","title":"Do I Need to Use the Harden Windows Security Module Only on New Windows Installation?","text":"<p>No, you can use it any time.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#do-i-need-to-install-a-3rd-party-antivirus-or-security-software","title":"Do I Need to Install a 3rd Party Antivirus or Security Software?","text":"<p>Absolutely not.</p> <p>Every security feature needed is already available in Windows. After Installing the Harden Windows Security Module, run PowerShell as Admin and use the command <code>Protect-WindowsSecurity</code> to activate them.</p> <p>Here is a more technical explanation</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#but-i-already-have-an-antivirus-what-should-i-do","title":"But I Already Have an Antivirus, What Should I Do?","text":"<p>Uninstall it by going to Windows Settings -&gt; Apps -&gt; Installed Apps -&gt; Search for your Antivirus software's name and Uninstall it.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#whats-the-first-thing-to-do-after-reinstalling-or-resetting-windows","title":"What\u2019s the First Thing to Do After Reinstalling or Resetting Windows?","text":"<ul> <li>Check and install any updates from Windows Update</li> <li>Check and install any updates in Microsoft Store</li> <li>Install and run the Harden Windows Security Module</li> </ul>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#i-have-windows-home-edition-how-to-upgrade-to-pro","title":"I Have Windows Home Edition, How to Upgrade to Pro?","text":"<ul> <li>Refer to this article</li> </ul>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#how-to-backup-my-files-in-windows","title":"How to Backup My Files in Windows?","text":"<ul> <li> <p>Back up your Windows PC</p> </li> <li> <p>How to back up your files in Windows</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#what-categories-do-you-recommend-to-run","title":"What Categories Do You Recommend to Run?","text":"<p>Use the default predefined preset in the Harden Windows Security GUI, it is tuned for optimal and balanced security. Presets allow for easy and quick selection of categories and sub-categories.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#how-often-do-i-need-to-apply-the-hardening-measures","title":"How Often Do I Need to Apply the Hardening Measures?","text":"<p>Only 1 time.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#should-i-enable-smart-app-control","title":"Should I Enable Smart App Control?","text":"<p>Yes, it's a very capable automated AI-driven security feature.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#does-it-affect-my-gaming-performance-or-fps","title":"Does It Affect My Gaming Performance or FPS?","text":"<p>No. Because Modern hardware are built for Windows security features such as Virtualization Based Security, BitLocker etc. They expect these advanced security features to be turned on and running on a secure system.</p> <p>Only very old and unsupported hardware might experience degraded performance when using modern security features.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#what-if-i-want-to-revert-the-changes","title":"What If I Want to Revert the Changes?","text":"<p>Use the Unprotect tab in the Harden Windows Security GUI (Graphical User Interface) to undo all the protections.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#can-you-alter-the-requirements","title":"Can You Alter The Requirements?","text":"<p>No. The requirements are very basic and minimum, they are even less than what's required by Windows 11 minimum hardware.</p> <p></p>"},{"location":"Miscellaneous/Answers%20to%20the%20Basic%20Frequently%20Asked%20Questions/#have-more-questions","title":"Have More Questions?","text":"<p>Ask away by opening a new Discussion</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/","title":"BitLocker, TPM and Pluton","text":""},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#introduction","title":"Introduction","text":"<p>The optimal kind of security measure is imperceptible to the user during deployment and usage. Whenever there is a potential delay or difficulty due to a security feature, there is a high probability that users will attempt to circumvent security. This situation is particularly prevalent for data protection, and that is a scenario that organizations need to prevent. Whether intending to encrypt entire volumes, removable devices, or individual files, Windows satisfies these requirements by providing streamlined, usable solutions. BitLocker Device Encryption safeguards the system by seamlessly implementing device-wide data encryption.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#bitlocker-and-virtual-hard-disks-such-as-vhdx","title":"BitLocker and Virtual Hard Disks such as VHDX","text":"<p>When using VHDX native boot, you can employ BitLocker to encrypt the drives that reside in it, they will be equally secure. In the native VHDX boot scenario, the decryption keys are still retained in the TPM, precluding an offline attack against the stored data. BitLocker still operates the same as it does on a normal installed system.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#a-discourse-on-the-modes-and-methods-of-protection-from-physical-intrusions","title":"A Discourse on the Modes and Methods of Protection from Physical Intrusions","text":""},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#bitlocker-with-tpm","title":"BitLocker With TPM","text":"<p>BitLocker with TPM only, uses PCRs, if the hashes are the same the decryption key is released. With TPM only mode, a threat actor can access the secret data when it is released and can obtain the decryption key when the TPM releases it automatically.</p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#bitlocker-with-tpm-and-startup-key","title":"BitLocker With TPM and Startup Key","text":"<p>With a Startup PIN, a PIN is required before the secret material is released. This thwarts a jumper cable attack where a threat actor can directly access the secret material from the TPM. Therefore, the only security benefit a PIN would provide during the boot sequence is a physical attack prevention.</p> <p>If you are a threat actor and the system lacks a Startup PIN, the disk remains encrypted even when you boot it to the logon screen where authentication is required via Windows Hello credential providers. Conversely, when you use a Startup PIN and enter it correctly, the disk stays encrypted until you authenticate at the logon screen.</p> <p>When BitLocker is activated, the disk is constantly encrypted. It is irrelevant whether you utilize a Startup PIN, or you operate in TPM only mode or you employ a smart card to unlock it. However, a Startup PIN is invariably recommended as a deterrent mechanism against physical attacks.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#the-power-of-bitlocker-and-tpm-against-offline-and-side-channel-attacks","title":"The Power of BitLocker and TPM Against Offline and Side Channel Attacks","text":"<p>Now there is the in-band versus out of band security system paradigm we need to discuss. For instance, Windows login screen is in-band and TPM is out of band.</p> <p>The TPM is used to deter side channel attacks while login screen is to deter brute force/cryptographic attacks. Windows Hello, which is a very robust system, is TPM backed just like BitLocker.</p> <p>BitLocker is to prevent offline attacks primarily, secondarily it is to prevent data loss. If you can alter the Windows operating system files while it is offline, it has no means to protect itself. That is why BitLocker exists to impede tampering while the system is offline. Most people assume it is used for data loss prevention; in reality the primary defense capability is tampering with OS files.</p> <p>I can guarantee breach into any operating system that has an unencrypted disk, and I don\u2019t have to use any zero days or exploit code.</p> <p>BitLocker is a transparent drive encryption technology operating below the file system level and BitLocker encrypted disks always remain encrypted even after Windows Hello authentication and unlocking the OS.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#how-do-the-bitlocker-key-protectors-work","title":"How Do The BitLocker Key Protectors Work?","text":"<p>BitLocker key protectors safeguard the encryption key, which encrypts and decrypts the data on the disk. BitLocker provides various key protectors and allows using multiple key protectors simultaneously. However, some key protectors must be combined with other key protectors to attain the required level of security.</p> <p>Suppose you want your BitLocker encrypted drive to demand a PIN at Startup, need TPM for verification, and also necessitate a USB flash drive to be plugged in. In this document, you can see there is a <code>-StartupKeyProtector</code> option for the USB flash drive, <code>-TPMProtector</code> option for TPM, and a <code>-Pin</code> option for the PIN.</p> <p>Using those parameters individually will not mandate all 3 key protectors to be used concurrently. It will only oblige one of them to be used. So you will have to either enter the PIN, have the disk connected to the same computer (TPM) or have the USB flash drive plugged in, but all 3 of them are not enforced.</p> <p>If you want to enforce a multifactor authentication, you need to use the following command</p> <pre><code>Add-BitLockerKeyProtector -MountPoint C: -TpmAndPinAndStartupKeyProtector\n</code></pre> <p>This time, all 3 key protectors are essential to unlock the drive. You will have to enter the PIN, have the disk connected to the same computer (TPM), and have the USB flash drive plugged in.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#how-to-properly-configure-bitlocker-key-protectors","title":"How To Properly Configure BitLocker Key Protectors","text":"<p>As we've already discussed before, having TPM alone is not enough to protect the system from physical attacks. TPM must be coupled with other factors to provide strong deterrence against physical attacks. So when configuring policies, either in Intune or Group Policy, you should disable the TPM only mode.</p> <p></p> <p></p> <p>In the image above:</p> <ul> <li>Red is the insecure method</li> <li>Pinks are the more secure methods</li> <li>Green is the most secure method</li> </ul> <p>Depending on your organization's or personal needs you can disallow the rest of them and only keep one.</p> <p>The same settings can be found in Intune as well</p> <p></p> <p></p> <p>Few seconds after enrolling the device in Intune, you will see a notification</p> <p></p> <p>After clicking on the notification and accepting the next prompt, you will see this window allowing you to choose a key protector. As you can see, the <code>Let Bitlocker Automatically Unlock My Drive</code> option is grayed out because it would use only the TPM key protector and we disabled that in Intune/Group Policy.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#pluton-the-ultimate-security-chip","title":"Pluton, The Ultimate Security Chip","text":"<p>One of the most formidable technologies that is impervious to tampering, jumper cable or other vulnerabilities is the Pluton chip. The same technology that has been employed in Xbox to stop even the most sophisticated physical attacks.</p> <p>Pluton is a dedicated physical chip that runs on Azure sphere architecture. It is very much out of band and is technically physically on the same die as the CPU, but the CPU has no control over it at all because it has its own dedicated self-maintaining operating system.</p> <p>A firmware based TPM is reliant on the CPU to emulate it, Pluton is not dependent on the CPU to emulate it or run it. Pluton is completely self-sufficient which implies that it is out of band. dTPM (discrete TPMs) are usually more susceptible than fTPMs (Firmware based TPMs).</p> <p>Pluton addresses security needs like booting an operating system securely even against firmware threats and storing sensitive data safely even against physical attacks.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#conclusion","title":"Conclusion","text":"<p>We learned how important it is to use BitLocker and protect our data at rest. The Harden Windows Security repository employs BitLocker to encrypt the operation system drive and optionally any other drives that user chooses to. It utilizes the most secure configuration and military grade encryption algorithm, XTS-AES-256, TPM 2.0 and Start-up PIN.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#continue-reading","title":"Continue Reading","text":"<ul> <li>Overview of BitLocker device encryption</li> <li>BitLocker FAQ</li> <li>Personal Data Encryption (PDE)</li> </ul>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/","title":"Comparison of security benchmarks","text":"<p>I conducted a thorough analysis of some of the prominent security benchmarks/guidelines for my GitHub repository and I discovered some fascinating insights. By analysis, I mean that I examined every single recommendation in them and compared them with my own suggestions and Microsoft Security Baselines.</p> <p>The majority of the recommendations in the security benchmarks align with the Microsoft Security Baselines, which are a set of best practices for securing various products and services. Only a small fraction of the recommendations deviate from the baselines, and they are either additional enhancements (rarely), redundant suggestions or erroneous advice that undermine security!</p> <p>For my reviews I used the latest available version of each benchmark.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#some-of-the-pitfalls-of-relying-on-third-party-benchmarks","title":"Some of the Pitfalls of Relying on Third-Party Benchmarks","text":""},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#clipboard-sharing-from-guest-to-host","title":"Clipboard sharing from guest to host !","text":"<p>CIS 18.10.44.5 (L1) recommends allowing clipboard operation from an isolated session to the host, i.e. guest to host redirection, which is a highly insecure and irrational suggestion!</p> <p>These are their precise official words:</p> <p>Rationale: The primary purpose of Microsoft Defender Application Guard is to present a \"sandboxed container\" for visiting untrusted websites. If the host clipboard is made available to Microsoft Defender Application Guard, a compromised Microsoft Defender Application Guard session will have access to its content, potentially exposing sensitive information to a malicious website or application. However, the risk is reduced if the Microsoft Defender Application Guard clipboard is made accessible to the host, and indeed that functionality may often be necessary from an operational standpoint</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#renaming-built-in-administrator-and-guest-accounts","title":"Renaming built-in administrator and guest accounts !","text":"<p>Both CIS and STIG suggest altering the name of the built-in administrator and guest accounts as a security measure.</p> <p>This is futile as those built-in accounts can be readily identified by PowerShell, regardless of any modifications to its name or description (which I have done).</p> <p>For example, the <code>BUILTIN\\Administrator</code> account always has a relative identifier (RID) of <code>500</code>.</p> <pre><code>Get-LocalUser | Where-Object -FilterScript {$_.SID -like 'S-1-5-*-500'}\n</code></pre> <p>Thanks Elliot Huffman for suggesting the shorter command!</p> <pre><code>Add-Type -AssemblyName System.DirectoryServices.AccountManagement\n$principalContext = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine)\n$userPrincipal = New-Object System.DirectoryServices.AccountManagement.UserPrincipal($principalContext)\n$searcher = New-Object System.DirectoryServices.AccountManagement.PrincipalSearcher\n$searcher.QueryFilter = $userPrincipal\n$searcher.FindAll() | Where-Object { $_.Sid -Like \"*-500\" } | Select-Object SamAccountName&lt;/details&gt;\n</code></pre> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#disabling-windows-hello-pin-and-using-traditional-passwords-instead","title":"Disabling Windows Hello PIN and using traditional passwords instead !","text":"<p>These benchmarks recommend disabling Windows Hello PIN and opting for passwords instead. Stig V-253423 and CIS 18.9.27.4.</p> <p>They argue that this is for domain accounts</p> <p>Their rationale, which is very wrong, is</p> <p>A PIN is created from a much smaller selection of characters than a password, so in most cases a PIN will be much less robust than a password.</p> <p>It is a grave security lapse to propose such a policy and then label the benchmark/guideline as \u201cCIS Microsoft Windows 11 Stand-alone Benchmark\u201d, highlighting that it is intended for stand-alone computers, while simultaneously suggesting to disable PIN for domain-joined devices. This is a glaring inconsistency and a perilous practice.</p> <p>The guideline/benchmark is fundamentally flawed if it presupposes that the computer is domain-joined, despite the label indicating that it is stand-alone. It also neglects to consider that some users may actually be stand-alone (home users that account for the majority of the users) or use Microsoft Entra ID, and this policy is nonsensical for them.</p> <p>STIG commits the same error, as it only provides a generic Windows 11 guideline/benchmark and recommends disabling Windows Hello PIN, without taking into account the factors mentioned above.</p> <p>You can read this Microsoft document to find out why a PIN is better than an online password</p> <p>There are proper policies regarding anti-hammering features that can enhance the security of PINs over passwords. I utilize them in my module and you can find them here.</p> <p>The benchmarks/guidelines seem to be uninformed of the fact that Windows allows multi-factor unlock, which can enforce a combination of PIN and biometric factors (plus more), to enforce PIN + Facial recognition OR PIN + Fingerprint etc.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#bad-configuration-for-early-launch-anti-malware","title":"Bad configuration for Early Launch Anti Malware","text":"<p>CIS in 18.9.13.1</p> <p>The recommended state for this setting is: Enabled: Good, unknown and bad but critical</p> <p>That's not even a recommendation, that's the default value! If you use Harden Windows Security module it sets it to Good Only, which is the correct recommendation for a secure environment.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#disabling-windows-error-reporting","title":"Disabling Windows Error reporting !","text":"<p>Their rationale is:</p> <p>...There is no benefit to the corporation to report these errors directly to Microsoft...</p> <p>Indeed, the corporation that uses the software benefits from it by reporting the problems. This exact way of thinking that leads to making such a policy is the reason why problems remain unsolved, because they are not reported to Microsoft and the IT staff of the companies are simply unable to resolve the problem themselves, since they are not the ones developing the OS.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#disabling-cloud-protection","title":"Disabling Cloud Protection!","text":"<p>CIS 18.10.43.5.2 (L2), suggests disabling Cloud Protection of Microsoft Defender. This is precisely the kind of security measure that Threat Actors and advanced persistent threats (APTs) seek to disable and then CIS is suggesting to disable it, astonishing.</p> <p>This is an extremely important security feature that should never be disabled and there is no rationale that justifies disabling it. This feature also uses the Intelligent Security Graph (ISG).</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#not-enabling-important-attack-surface-reduction-rules","title":"Not enabling important Attack Surface Reduction rules","text":"<p>CIS in 18.10.43.6.1.2 (L1) intentionally leaves out very important ASR rules</p> <ol> <li>Use advanced protection against ransomware</li> <li>Block executable files from running unless they meet a prevalence, age, or trusted list criterion</li> <li>Block process creations originating from PSExec and WMI commands</li> </ol> <p>Rule #2 has the potential to prevent zero-days!</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#to-be-continued","title":"To be continued...","text":"<p>These benchmarks or guidelines have numerous flaws and I have only examined two of them. There are many other benchmarks, standards, guidelines, etc. that may also contain errors or inconsistencies and are totally unsafe to implement them.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#aspects-that-are-lacking","title":"Aspects that are lacking","text":"<p>The benchmarks omit many new security features that the Harden Windows Security module implements.</p> <p>Everything in the repository is carefully researched, evaluated and tested. The module ensures that nothing is redundant or incompatible with the latest version of Windows. Older versions of the OS are obsolete and insecure, and should be avoided in any environment that requires protection. Threat actors can exploit vulnerabilities and use PoCs even on the same day that an update is released, this applies to any OS.</p> <p>The security measures in the Harden Windows Security repository are also perfectly suitable for regular home users.</p> <p>There are many security measures that are missing from the benchmarks/guidelines, such as the ones I use in:</p> <ul> <li> <p>Microsoft Defender category</p> </li> <li> <p>Miscellaneous Category</p> </li> <li> <p>Edge Browser category</p> </li> <li> <p>TLS Security category</p> </li> <li> <p>Lock screen category</p> </li> <li> <p>And more</p> </li> </ul> <p>The benchmarks/guidelines suggest using application control or whitelisting, but that's just it, a suggestion, no comprehensive guide about how to do it.</p> <p></p> <p> </p> <p></p>"},{"location":"Miscellaneous/Create%20Bootable%20USB%20flash%20drive%20with%20no%203rd%20party%20tools/","title":"Create Bootable flash drive no 3rd party tools","text":""},{"location":"Miscellaneous/Create%20Bootable%20USB%20flash%20drive%20with%20no%203rd%20party%20tools/#create-bootable-usb-flash-drive-with-no-3rd-party-tools","title":"Create Bootable USB flash drive with no 3rd party tools","text":""},{"location":"Miscellaneous/Create%20Bootable%20USB%20flash%20drive%20with%20no%203rd%20party%20tools/#steps-to-create-bootable-usb-flash-drive-with-no-3rd-party-tools","title":"Steps to create Bootable USB flash drive with no 3rd party tools","text":"<ol> <li> <p>Plug in a USB flash drive that has at least 8GB capacity.</p> </li> <li> <p>Delete all partitions on the USB flash drive either using Disk Management \u00b9 \u00b2 or using Windows Settings =&gt; System =&gt; Storage =&gt; Advanced Storage Settings =&gt; Disks &amp; Volumes</p> </li> <li> <p>Using either of the methods above, create a 1GB <code>FAT32</code> partition, let's name it <code>BOOT</code>\ud83d\udfe8</p> </li> <li> <p>Create a 2nd partition on the USB flash drive with the rest of the remaining unused space, formatted as <code>NTFS</code>, let's name this one <code>DATA</code>\ud83d\udfe9</p> </li> <li> <p>Mount your Windows ISO file by double clicking on it.</p> </li> <li> <p>Select all and Copy everything from Windows ISO file to the <code>NTFS</code> partition (DATA partition\ud83d\udfe9)</p> </li> <li> <p>Copy everything from Windows ISO file, except for the \"sources\" folder, to the <code>FAT32</code> partition (BOOT partition\ud83d\udfe8)</p> </li> <li> <p>Create a new folder in the <code>FAT32</code> partition (BOOT partition\ud83d\udfe8), and name it <code>sources</code></p> </li> <li> <p>copy the <code>boot.wim</code> from the \"sources\" folder inside the Windows ISO file to the newly created \"sources\" folder in the FAT32 partition (BOOT partition\ud83d\udfe8).</p> </li> <li> <p>That's it, your USB flash drive is ready and bootable.</p> </li> </ol>"},{"location":"Miscellaneous/Event%20Viewer/","title":"Event Viewer","text":""},{"location":"Miscellaneous/Event%20Viewer/#event-viewer","title":"Event Viewer","text":""},{"location":"Miscellaneous/Event%20Viewer/#windows-event-viewer","title":"Windows Event Viewer","text":"<p>This document is dedicated to offering various ways to use Event logs to achieve different purposes.</p> <p></p>"},{"location":"Miscellaneous/Event%20Viewer/#how-to-identify-which-windows-firewall-rule-is-responsible-for-a-blocked-packet","title":"How to identify which Windows Firewall rule is responsible for a blocked packet","text":"<p>I've mostly considered this for the Country IP Blocking category, but you can use it for any purpose.</p> <p>Before doing this, you need to activate one of the system Audits.</p> <p>I suggest doing it using GUI because it will have a permanent effect:</p> <p></p> <p></p> <p>Or you can activate that Audit using this command, but it will only temporarily activate it and it'll be disabled again after you restart Windows.</p>"},{"location":"Miscellaneous/Event%20Viewer/#for-systems-with-english-locale-only","title":"For Systems With English Locale Only","text":"<pre><code>Auditpol /set /category:\"System\" /SubCategory:\"Filtering Platform Packet Drop\" /success:enable /failure:enable\n</code></pre>"},{"location":"Miscellaneous/Event%20Viewer/#for-systems-with-any-locale","title":"For Systems With Any Locale","text":"<pre><code>Auditpol /set /category:\"{69979848-797A-11D9-BED3-505054503030}\" /SubCategory:\"{0CCE9225-69AE-11D9-BED3-505054503030}\" /success:enable /failure:enable\n</code></pre> <p>After the Audit is activated, running this PowerShell code will generate an output showing you blocked packets (if any).</p> <p>For example, if you visit a website or access a server that is hosted in one of the countries you blocked, or a connection was made from one of those countries to your device, it will generate an event log that will be visible to you once you run this code.</p> <pre><code>#Requires -RunAsAdministrator\n#Requires -Version 7.4\nFunction Get-BlockedPackets {\n    Begin {\n        [System.Diagnostics.Eventing.Reader.EventLogRecord[]]$Events = Get-WinEvent -FilterHashtable @{LogName = 'Security'; ID = 5152 }\n        [System.Object[]]$Outputs = @()\n\n        # Create an empty hashtable to store the firewall rule names and display names\n        [System.Collections.Hashtable]$FirewallGroupPolicy = @{}\n\n        # Loop through each firewall rule from the local policy store (for Firewall rules that are stored in Group Policy)\n        foreach ($Rule in Get-NetFirewallRule -PolicyStore localhost) {\n            # Add a new entry to the hashtable with the rule name as the key and the display name as the value\n            $FirewallGroupPolicy[$Rule.name] = $Rule.DisplayName\n        }\n\n        # Loop through each local firewall rule (for Firewall rules that are defined locally in Windows Defender Firewall with Advanced Security)\n        foreach ($Rule in Get-NetFirewallRule) {\n            # Add a new entry to the hashtable with the rule name as the key and the display name as the value\n            $FirewallGroupPolicy[$Rule.name] = $Rule.DisplayName\n        }\n\n        # Create a hashtable of partition numbers and their associated drive letters\n        [System.Collections.Generic.Dictionary[string, string]]$DriveLetterMappings = @{}\n\n        # Get all partitions and filter out the ones that don't have a drive letter and then add them to the hashtable with the partition number as the key and the drive letter as the value\n        foreach ($Drive in (Get-Partition | Where-Object -FilterScript { $_.DriveLetter })) {\n            $DriveLetterMappings[$Drive.PartitionNumber] = $Drive.DriveLetter\n        }\n\n        # Define the regex pattern for the device path\n        [string]$Pattern = '\\\\Device\\\\HarddiskVolume(\\d+)\\\\(.*)$'\n    }\n    Process {\n\n        # Loop through each event in the $Events array\n        foreach ($Event in $Events) {\n\n            # Convert the event to an XML document\n            $Xml = [System.Xml.XmlDocument]$Event.ToXml()\n\n            # Pipe the data elements of the event to the next command\n            $Xml.event.eventdata.data |\n\n            # For each data element, do the following\n            ForEach-Object -Begin {\n                [System.Collections.Hashtable]$Hash = @{ TimeCreated = [System.DateTime]$Xml.Event.System.TimeCreated.SystemTime }\n            } -Process {\n                # Add the name and text of the data element as another key-value pair to the hashtable\n                $Hash[$_.name] = $_.'#text'\n            } -End {\n                # Convert the hashtable to a custom object and pipe it to the next command\n                [pscustomobject]$Hash\n            } |\n            # Filter out the objects that have a filter origin property matching any of the specified strings\n            Where-Object -Property FilterOrigin -NotMatch 'Stealth|Unknown|Query User Default|WSH Default' | ForEach-Object -Process {\n\n                # If the filter origin is in the hashtable keys\n                if ($_.FilterOrigin -in $FirewallGroupPolicy.Keys) {\n                    # Replace the filter origin with the display name of the firewall rule from the hashtable\n                    $_.FilterOrigin = $FirewallGroupPolicy[$_.FilterOrigin]\n                }\n\n                # Create a hashtable with the protocol numbers and names\n                [System.String]$ProtocolName = @{ 6 = 'TCP'; 17 = 'UDP' }[[System.Int32]$_.Protocol]\n\n                # If the protocol number is not in the hashtable, keep it as it is, otherwise replace it with the protocol name\n                $_.Protocol = if (-not $ProtocolName) { $_.Protocol } else { $ProtocolName }\n\n                # If the direction is equal to '%%14592', set it to 'Outbound', otherwise set it to 'Inbound'\n                $_.Direction = $_.Direction -eq '%%14592' ? 'Outbound' : 'Inbound'\n\n                # If the application matches the pattern, replace the device path with the drive letter\n                if ($_.Application -match $Pattern) {\n                    [System.Int64]$HardDiskVolumeNumber = $Matches[1]\n                    [System.String]$RemainingPath = $Matches[2]\n                    [PSCustomObject]$GetLetter = $DriveLetterMappings[$HardDiskVolumeNumber]\n                    [System.IO.FileInfo]$UsablePath = [System.IO.Path]::Combine(\"$GetLetter`:\", $RemainingPath)\n                    $_.Application = $_.Application -replace $Pattern, $UsablePath\n                }\n\n                # Add the modified object to the $Outputs array\n                $Outputs += $_ | Select-Object -Property Application, SourcePort, Protocol, SourceAddress, DestPort, TimeCreated, Direction, DestAddress, ProcessId , FilterOrigin\n            }\n        }\n    }\n    End {\n        Return $Outputs\n    }\n}\nGet-BlockedPackets\n</code></pre> <p></p> <ul> <li>Audit Filtering Platform Packet Drop</li> <li>Filter origin audit log improvements</li> <li>Audit object access</li> </ul> <p></p>"},{"location":"Miscellaneous/Event%20Viewer/#how-to-get-event-logs-from-the-miscellaneous-category-in-powershell","title":"How to Get Event Logs from the Miscellaneous Category in PowerShell","text":"<p>This code assumes you've already used the Harden Windows Security Module and the event logs custom views exist on your machine.</p> <pre><code># Load the XML content from a file or a string\n$xml = [xml](Get-Content -Path 'C:\\ProgramData\\Microsoft\\Event Viewer\\Views\\Hardening Script\\Exploit Protection Events.xml')\n\n# Get the QueryList element using XPath\n$queryList = $xml.SelectSingleNode(\"//QueryList\")\n\n# Convert the QueryList element to a string\n$queryListString = $queryList.OuterXml\n\n$Events = Get-WinEvent -FilterXml $queryListString -Oldest\n$Events | Format-Table -AutoSize\n</code></pre> <p></p>"},{"location":"Miscellaneous/Group%20Policy/","title":"Group Policy usage in this GitHub repository","text":""},{"location":"Miscellaneous/Group%20Policy/#microsoft-security-compliance-toolkit","title":"Microsoft Security Compliance Toolkit","text":"<p>This set of tools allows enterprise security administrators to download, analyze, test, edit and store Microsoft-recommended security configuration baselines for Windows and other Microsoft products, while comparing them against other security configurations.</p> <p>Microsoft Security Compliance Toolkit includes multiple files and useful programs that are required for the Harden Windows Security Module to operate.</p> <ul> <li> <p>Official link to download Microsoft Security Compliance Toolkit</p> </li> <li> <p>Microsoft Security Compliance Toolkit 1.0 - How to use</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#microsoft-security-baseline","title":"Microsoft Security Baseline","text":"<p>Microsoft is dedicated to providing its customers with secure operating systems, such as Windows and Windows Server, and secure apps, such as Microsoft 365 apps for enterprise and Microsoft Edge. In addition to the security assurance of its products, Microsoft also enables you to have fine control over your environments by providing various configuration capabilities.</p> <p>Even though Windows and Windows Server are designed to be secure out-of-the-box, many organizations still want more granular control over their security configurations. Continue reading more in the Microsoft website</p> <p>When you unzip the Microsoft Security Baseline file, you will find this folder structure:</p> <ol> <li>Documentation  - contains PDF and Excel files describing the differences between the previous baseline release and the new settings that were added. contains the default <code>policyrules</code> file, which is used with the Security Compliance Toolkit, you can view it using Policy Analyzer program.</li> <li>GP Reports - contains reports in HTML format, describes the GPO settings that can be applied for each category.</li> <li>GPOs \u2013 contains GPO objects for different scenarios, these are the actual policies that will be applied.</li> <li>Scripts - contains multiple PowerShell scripts for different scenarios and helps us easily import GPO settings to our system. The most important PowerShell script here is <code>Baseline-LocalInstall.ps1</code>.</li> <li>Templates \u2013 contains additional Group Policy Object templates that are not available by default on Windows, such as <code>MSS-legacy.admx</code>, these are in <code>ADMX</code> and <code>ADML</code> formats. They will be copied to <code>C:\\Windows\\PolicyDefinitions</code>, where they belong, so that the new Security Baselines GPOs can be interpreted.</li> </ol> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#lgpo","title":"LGPO","text":"<p>Quoting from the PDF file supplied by LGPO:</p> <p>LGPO.exe is a command-line utility that is designed to help automate management of Local Group Policy. It can import and apply settings from Registry Policy (Registry.pol) files, security templates, Advanced Auditing backup files, as well as from formatted \"LGPO text\" files and Policy Analyzer '.PolicyRules' XML files.</p> <p>It can export local policy to a GPO backup. It can export the contents of a Registry Policy file to the 'LGPO textformat' that can then be edited, and can build a Registry Policy file from an LGPO text file. (The syntax for LGPO text files is described later in this document.)</p> <p>LGPO.exe has four command-line forms: for importing and applying settings to local policy \u2013 including to Multiple Local Group Policy Objects (MLGPO)1 ; for creating a GPO backup; for parsing a Registry Policy file and outputting \"LGPO\" text; for producing a Registry Policy file from an LGPO text file.</p> <p>All output is written to LGPO.exe's standard output, and all diagnostic and error information is written to its standard error. Both can be redirected to files using standard command shell operations. To support batch file use, LGPO.exe's exit code is 0 on success and non-zero on any error.</p> <p></p> <p><code>LGPO</code> is the most crucial program for our workflow, it is part of the Security Compliance Toolkit (SCT)</p> <p>What is the Local Group Policy Object (LGPO) tool?</p> <p>LGPO.exe - Local Group Policy Object Utility</p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#how-to-manually-back-up-group-policy-objects-from-a-system-using-lgpoexe","title":"How to Manually Back up Group Policy Objects From a System Using LGPO.exe","text":"<p>Use this command to back up the currently set local group policies to drive <code>C</code></p> <pre><code>.\\LGPO.exe /b C:\n</code></pre>"},{"location":"Miscellaneous/Group%20Policy/#how-to-import-group-policy-objects-from-a-backup-created-using-lgpoexe-to-the-local-system","title":"How to Import Group Policy Objects From a Backup, Created Using LGPO.exe, to the Local System","text":"<pre><code>.\\LGPO.exe /g 'Path to the backup'\n</code></pre> <p>Example:</p> <pre><code>.\\LGPO.exe /g 'C:\\{841474E6-33EC-418C-B884-EA0F7C8195DB}'\n</code></pre>"},{"location":"Miscellaneous/Group%20Policy/#how-to-import-only-the-settings-from-a-registry-policy-file-into-computer-machine-configuration","title":"How to Import Only the Settings From a Registry Policy File Into Computer (Machine) Configuration","text":"<p>(This only contains everything in Computer (Machine) Configuration -&gt; Administrative Templates and some policies in Computer Configuration -&gt; Windows Settings)</p> <p>Registry Policy File Format</p> <pre><code>.\\LGPO.exe /m &lt;Path to registry.pol file&gt;\n</code></pre>"},{"location":"Miscellaneous/Group%20Policy/#how-to-import-only-the-security-policies-file-into-computer-machine-configuration","title":"How to Import only the Security policies file into Computer (Machine) Configuration","text":"<p>(This only contains everything in Computer (Machine) Configuration -&gt; Windows Settings =&gt; Security Settings =&gt; everything in the subfolders except for the Advanced Audit Policy Configuration)</p> <p>Security policy settings</p> <pre><code>.\\LGPO.exe /s \".\\GPOX\\DomainSysvol\\GPO\\Machine\\microsoft\\windows nt\\SecEdit\\GptTmpl.inf\"\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#policy-analyzer","title":"Policy Analyzer","text":"<p>Quoting from the PDF file supplied by Policy Analyzer:</p> <p>Policy Analyzer is a lightweight utility for analyzing and comparing sets of Group Policy Objects (GPOs). It can highlight when a set of Group Policies has redundant settings or internal inconsistencies and can highlight the differences between versions or sets of Group Policies.</p> <p>It can also compare one or more GPOs against local effective state. You can export all its findings to a Microsoft Excel spreadsheet.</p> <p>Policy Analyzer lets you treat a set of GPOs as a single unit, and represents all settings in one or more GPOs in a single \".PolicyRules\" XML file. You can also use .PolicyRules files with LGPO.exe v3.0 to apply those GPOs to a computer's local policy, instead of having to copy GPO backups around.</p> <p>What is the Policy Analyzer tool?</p> <p>Policy Analyzer Tool</p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#about-compare-to-effective-state","title":"About Compare to Effective State","text":"<p>In Policy Analyzer, there is an option called <code>Compare to Effective State</code>. Quoting from the PDF file that ships with Policy Analyzer program regarding that option:</p> <p>Enable one or more of the Policy Rule sets' checkboxes and click \"Compare to Effective State\" to compare the selected baselines against the local computer's current configured state. The operation will require UAC elevation if any of the selected baselines include security template or advanced auditing settings that require elevation to retrieve.</p> <p>The Policy Viewer will show the combined settings from all the selected Policy Rule sets in one column under the heading \"Baseline(s),\" and the corresponding current settings on the local computer and the logged-on user in a separate column under the heading \"Effective state.\"</p> <p>The effective state settings are also saved to a new .PolicyRules file with a name combining \"EffectiveState_,\" the current computer name, and the current date and time in the format \"yyyyMMdd- HHmmss.\" For example, \"EffectiveState_WKS51279_20200210-183947.PolicyRules.\"</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#how-are-group-policies-used-by-the-harden-windows-security-module","title":"How Are Group Policies Used by the Harden Windows Security Module?","text":"<ol> <li> <p>The module downloads the official Microsoft Security Baselines from Microsoft servers and applies them to the system.</p> </li> <li> <p>It then uses the group policies included in the Module files for security measures explained on the readme page and applies them to the system, on top of Microsoft Security Baselines, so where there is a conflict of policy, the module will replace the configurations set by Microsoft Security Baselines.</p> </li> <li> <p>When applying the Microsoft Security Baselines, you have the option to apply the optional overrides too, you can find the details of those overrides in here,, they are required to be applied if you are using Harden Windows Security Module in Azure VMs and highly recommended in general.</p> </li> </ol> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#how-are-group-policies-for-the-module-created-and-maintained","title":"How Are Group Policies for the Module Created and Maintained?","text":""},{"location":"Miscellaneous/Group%20Policy/#how-i-created-them-for-the-first-time","title":"How I Created Them for the First Time","text":"<ol> <li> <p>Installed the newest available Windows build on a fresh Hyper-V VM, fully updated it, created a standard checkpoint.</p> </li> <li> <p>Opened Group Policy editor and started applying security measures described in the Readme page.</p> </li> <li> <p>After completing each category, used <code>LGPO.exe /b C:</code> to backup Group Policies of the system by creating a full GPO.</p> </li> <li> <p>Then I took only files needed from the backup, <code>registry.pol</code> and <code>GptTmpl.inf</code> and put them in a folder, renamed it to <code>Security-Baselines-X</code></p> </li> </ol>"},{"location":"Miscellaneous/Group%20Policy/#how-i-maintain-them","title":"How I Maintain Them","text":"<ol> <li> <p>As long as the VM is still using the latest available build of Windows, I use the standard checkpoint I had created to revert the VM back to that new state. If there is a newer build of Windows available, I delete that old VM, download the new Windows ISO file from Microsoft servers, then I create a fresh Hyper-V VM using it.</p> </li> <li> <p>I copy the Group Policy files, <code>registry.pol</code> or <code>GptTmpl.inf</code> to the VM, import them by using <code>.\\LGPO.exe /m \"path\"</code> for <code>registry.pol</code> files or <code>.\\LGPO.exe /s \"path\"</code> for <code>GptTmpl.inf</code> files.</p> </li> <li> <p>Open Group Policy editor and change anything that is needed, once I'm done, I create a full backup of the Group Policies of the system using <code>LGPO.exe /b C:</code> command, again take out the modified file, either <code>registry.pol</code> or <code>GptTmpl.inf</code>.</p> </li> <li> <p>Use <code>PolicyAnalyzer</code> to double check everything by comparing the old file with the new one and making sure the correct changes are applied.</p> </li> <li> <p>Replace the old Group Policy file with the new file in the Security-Baselines-X directory and upload it to the GitHub repository.</p> </li> </ol> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#we-can-use-policy-analyzer-for-verification-and-comparison","title":"We Can Use Policy Analyzer for Verification and Comparison","text":""},{"location":"Miscellaneous/Group%20Policy/#to-verify-the-settings-are-applied-correctly-by-the-module","title":"To Verify the Settings Are Applied Correctly by The Module","text":"<ol> <li> <p>Use folder options in Control Panel or File Explorer to show hidden files and folder.</p> </li> <li> <p>Open Policy Analyzer program, Navigate to Add -&gt; File -&gt; Add files from GPO(s)... -&gt; Browser for this folder \"C:\\Windows\\System32\\GroupPolicy\", Select the folder -&gt; Import -&gt; save the Policy Rules file in <code>\\Documents\\PolicyAnalyzer\\</code></p> </li> <li> <p>Back at the main window, use View/Compare button to view applied Group Policies. The result that you will see is all of the Group Policies that are applied to your system.</p> </li> </ol> <p>Another way to verify the applied Group Policies is to perform the 3 tasks above; What it will give you is the Policy Rules file which is generated from Group Policy state after using the module. If we take this policy rules file to a different machine where we just clean installed Windows and use Policy Analyzer to compare it to the Effective State of the system, we will see what Group Policy settings have changed as a result of using the module.</p> <p></p> <p>Note: At first, when we clean install Windows, the Group Policy folder <code>C:\\Windows\\System32\\GroupPolicy</code> is empty, it will get populated with empty folders and a <code>1kb</code> file that contains only 1 word when we first open the local Group Policy editor. It will get more populated with actual policies once we start modifying any group policies.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#how-to-verify-security-baselines-x-directory-and-100-trust-it","title":"How to verify Security-Baselines-X directory and 100% trust it?","text":"<ol> <li>Download the files from here.</li> <li>Open the Policy Analyzer, Navigate to Add -&gt; File -&gt; Select either <code>Add User Configuration (registry.pol)</code> or <code>Add Security Template (*.inf)</code> -&gt; Browser for the <code>Security-Baselines-X</code> directory, navigate to the category you want.</li> <li> <p>Select either <code>.pol</code> or <code>.inf</code> file, Import it, give it a name, save it in <code>\\Documents\\PolicyAnalyzer\\</code></p> </li> <li> <p>Back at the main window, use \"Compare to Effective State\" button to view what policies are included in the file.</p> </li> <li> <p>As you will see, everything is according to what has been explicitly stated in the GitHub's Readme page.</p> </li> </ol> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#using-configuration-service-providers-csps-and-provisioning-packages-work-in-progress","title":"Using Configuration Service Providers (CSPs) and Provisioning Packages (Work in Progress)","text":"<p>This command gets the information about all installed provisioning packages on your system.</p> <pre><code>Get-ProvisioningPackage -AllInstalledPackages\n</code></pre> <p></p> <ul> <li> <p>Configuration service providers for IT pros</p> </li> <li> <p>Settings changed when you uninstall a provisioning package</p> </li> <li> <p>Why Intune and CSPs are the future of Windows management instead of Group Policy</p> </li> </ul> <p></p> <p>Download Windows Configuration Designer from Microsoft Store or from Windows ADK or from Windows insiders ADK, to easily create provisioning packages for your device(s)</p> <p>You can use gpresult to see more info about Group Policies on your computer</p> <pre><code># What policies are applied to your computer:\ngpresult /z\n# or\ngpresult /v\n\n# What policies are applied to the current user:\ngpresult /scope user /v\n</code></pre> <p>We can manually backup and restore Group Policy settings by copying this folder and all of its content:</p> <p><code>C:\\Windows\\System32\\GroupPolicy</code></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#how-to-get-all-cim-namespaces-their-methods-and-properties-in-powershell","title":"How to Get All CIM Namespaces, Their Methods and Properties in PowerShell","text":"<pre><code># Defining the custom class for CIM instance classes\nclass CimClassInfo {\n    [System.String]$ClassName\n    [System.Collections.Generic.List[System.String]]$Methods\n    [System.Collections.Generic.List[System.String]]$Properties\n\n    CimClassInfo([System.String]$ClassName) {\n        $this.ClassName = $ClassName\n        $this.Methods = [System.Collections.Generic.List[System.String]]::new()\n        $this.Properties = [System.Collections.Generic.List[System.String]]::new()\n    }\n}\n\n# Defining the custom class for namespaces\nclass NamespaceInfo {\n    [System.String]$NamespaceName\n    [System.Collections.Generic.List[CimClassInfo]]$Classes\n\n    NamespaceInfo([System.String]$NamespaceName) {\n        $this.NamespaceName = $NamespaceName\n        $this.Classes = [System.Collections.Generic.List[CimClassInfo]]::new()\n    }\n}\n\nfunction Get-NamespaceInfo {\n    [OutputType([System.Collections.Generic.List[NamespaceInfo]])]\n    param (\n        [System.String]$RootNamespace = 'root',\n        [System.String]$OutputFile = $null\n    )\n\n    # Initialize a list to hold NamespaceInfo objects\n    $NamespaceInfos = [System.Collections.Generic.List[NamespaceInfo]]::new()\n\n    # Initialize a list to hold namespaces\n    $Namespaces = [System.Collections.Generic.List[System.String]]::new()\n    $Namespaces.Add($RootNamespace)\n\n    # Initialize an index to track the current namespace\n    $Index = 0\n\n    # Loop through namespaces\n    while ($Index -lt $Namespaces.Count) {\n        # Get the current namespace\n        $CurrentNamespace = $Namespaces[$Index]\n\n        # Create a new NamespaceInfo object\n        $NamespaceInfo = [NamespaceInfo]::new($CurrentNamespace)\n\n        # Get child namespaces of the current namespace\n        $ChildNamespaces = Get-CimInstance -Namespace $CurrentNamespace -ClassName __Namespace\n\n        # Add child namespaces to the list\n        foreach ($ChildNamespace in $ChildNamespaces.Name) {\n            $Namespaces.Add(\"$CurrentNamespace\\$ChildNamespace\")\n        }\n\n        # Get classes in the current namespace\n        $Classes = Get-CimClass -Namespace $CurrentNamespace\n\n        # Add classes to the NamespaceInfo object\n        foreach ($Class in $Classes) {\n            # Create a new CimClassInfo object\n            $CimClassInfo = [CimClassInfo]::new($Class.CimClassName)\n\n            # Get methods of the class\n            $Methods = ($Class.CimClassMethods).Name\n\n            # Add methods to the CimClassInfo object\n            foreach ($Method in $Methods) {\n                $CimClassInfo.Methods.Add($Method)\n            }\n\n            # Get properties of the class\n            $Properties = ($Class.CimClassProperties).Name\n\n            # Add properties to the CimClassInfo object\n            foreach ($Property in $Properties) {\n                $CimClassInfo.Properties.Add($Property)\n            }\n\n            # Add the CimClassInfo object to the NamespaceInfo object\n            $NamespaceInfo.Classes.Add($CimClassInfo)\n        }\n\n        # Add the NamespaceInfo object to the list\n        $NamespaceInfos.Add($NamespaceInfo)\n\n        # Move to the next namespace\n        $Index++\n    }\n\n    # Export to JSON too if OutputFile is specified\n    if ($OutputFile) {\n        $NamespaceInfos | ConvertTo-Json -Depth 100 | Out-File -FilePath $OutputFile\n    }\n\n    return $NamespaceInfos\n}\n\n$NamespaceInfo = Get-NamespaceInfo -RootNamespace 'root' -OutputFile 'NamespaceInfo.json'\n$NamespaceInfo\n</code></pre>"},{"location":"Miscellaneous/How%20to%20Detect%20Changes%20in%20User%20and%20Local%20Machine%20Certificate%20Stores%20in%20Real%20Time%20Using%20PowerShell/","title":"How to Detect Changes in User and Local Machine Certificate Stores in Real Time Using PowerShell","text":"<p>Here is a PowerShell script that can display the changes in User and Local Machine Certificate Stores in Real Time. It performs the check every 3 seconds. The script is published to PowerShell Gallery and you can easily install it using the following command:</p> <pre><code>Install-Script -Name Certificates-Change-Detection -Force\n</code></pre> <p></p>"},{"location":"Miscellaneous/How%20to%20Detect%20Changes%20in%20User%20and%20Local%20Machine%20Certificate%20Stores%20in%20Real%20Time%20Using%20PowerShell/#the-code-used-in-the-script","title":"The Code used in the script","text":"<pre><code>#Requires -RunAsAdministrator\n#Requires -Version 7.3\n\n# Custom colors\n[scriptblock]$WritePink = { Write-Output \"$($PSStyle.Foreground.FromRGB(255,192,203))$($PSStyle.Blink)$($args[0])$($PSStyle.Reset)\" }\n[scriptblock]$WriteMintGreen = { Write-Output \"$($PSStyle.Foreground.FromRGB(152,255,152))$($PSStyle.Blink)$($args[0])$($PSStyle.Reset)\" }\n\n# Create variables to store the initial certificates for both locations\n$InitialLocal = Get-ChildItem Cert:\\LocalMachine\\* -Recurse\n$InitialUser = Get-ChildItem Cert:\\CurrentUser\\* -Recurse\n\n# Create a loop that runs indefinitely\nwhile ($true) {\n    # Create variables to store the current certificates for both locations\n    $CurrentLocal = Get-ChildItem Cert:\\LocalMachine\\* -Recurse\n    $CurrentUser = Get-ChildItem Cert:\\CurrentUser\\* -Recurse\n\n    # Compare the variables and check if there is any difference in certificates for LocalMachine\n    $DifferenceLocal = Compare-Object $InitialLocal $CurrentLocal\n\n    # Compare the variables and check if there is any difference in certificates for CurrentUser\n    $DifferenceUser = Compare-Object $InitialUser $CurrentUser\n\n    # If there is any difference in certificates for LocalMachine, display it and update the initial variable\n    if ($DifferenceLocal) {\n        foreach ($Diff in $DifferenceLocal) {\n            # Check if the change is an addition or a removal based on the side indicator\n            if ($Diff.SideIndicator -eq '=&gt;') {\n                &amp;$WritePink \"Certificate Added to LocalMachine at $(Get-Date -Format 'MM/dd/yyyy HH:mm:ss K')\"\n                $PSStyle.Formatting.FormatAccent = \"$($PSStyle.Foreground.FromRGB(255,192,203))\"\n                $Diff.InputObject | Format-List -Property PSPath, EnhancedKeyUsageList, DnsNameList, SendAsTrustedIssuer, FriendlyName, HasPrivateKey, NotAfter, NotBefore, SerialNumber, Thumbprint, Issuer, Subject\n            }\n            elseif ($Diff.SideIndicator -eq '&lt;=') {\n                &amp;$WriteMintGreen \"Certificate Removed from LocalMachine at $(Get-Date -Format 'MM/dd/yyyy HH:mm:ss K')\"\n                $PSStyle.Formatting.FormatAccent = \"$($PSStyle.Foreground.FromRGB(152,255,152))\"\n                $Diff.InputObject | Format-List -Property PSPath, EnhancedKeyUsageList, DnsNameList, SendAsTrustedIssuer, FriendlyName, HasPrivateKey, NotAfter, NotBefore, SerialNumber, Thumbprint, Issuer, Subject\n            }\n        }\n        $InitialLocal = $CurrentLocal\n    }\n\n    # If there is any difference in certificates for CurrentUser, display it and update the initial variable\n    if ($DifferenceUser) {\n        foreach ($Diff in $DifferenceUser) {\n            # Check if the change is an addition or a removal based on the side indicator\n            if ($Diff.SideIndicator -eq '=&gt;') {\n                &amp;$WritePink \"Certificate Added to CurrentUser at $(Get-Date -Format 'MM/dd/yyyy HH:mm:ss K')\"\n                $PSStyle.Formatting.FormatAccent = \"$($PSStyle.Foreground.FromRGB(255,192,203))\"\n                $Diff.InputObject | Format-List -Property PSPath, EnhancedKeyUsageList, DnsNameList, SendAsTrustedIssuer, FriendlyName, HasPrivateKey, NotAfter, NotBefore, SerialNumber, Thumbprint, Issuer, Subject\n            }\n            elseif ($Diff.SideIndicator -eq '&lt;=') {\n                &amp;$WriteMintGreen \"Certificate Removed from CurrentUser at $(Get-Date -Format 'MM/dd/yyyy HH:mm:ss K')\"\n                $PSStyle.Formatting.FormatAccent = \"$($PSStyle.Foreground.FromRGB(152,255,152))\"\n                $Diff.InputObject | Format-List -Property PSPath, EnhancedKeyUsageList, DnsNameList, SendAsTrustedIssuer, FriendlyName, HasPrivateKey, NotAfter, NotBefore, SerialNumber, Thumbprint, Issuer, Subject\n            }\n        }\n        $InitialUser = $CurrentUser\n    }\n\n    # Wait for 3 seconds before repeating the loop\n    Start-Sleep -Seconds 3\n}\n</code></pre>"},{"location":"Miscellaneous/How%20to%20compact%20your%20OS%20and%20free%20up%20extra%20space/","title":"How to compact your OS and free up extra space","text":""},{"location":"Miscellaneous/How%20to%20compact%20your%20OS%20and%20free%20up%20extra%20space/#how-to-compact-your-os-and-free-up-extra-space","title":"How to compact your OS and free up extra space","text":""},{"location":"Miscellaneous/How%20to%20compact%20your%20OS%20and%20free%20up%20extra%20space/#run-the-following-commands-in-an-elevated-powershell","title":"Run the following commands in an elevated PowerShell","text":"<p>To turn on CompactOS:</p> <pre><code>Compact.exe /CompactOS:always\n</code></pre> <p>To turn off CompactOS:</p> <pre><code>Compact.exe /CompactOS:never\n</code></pre> <p>To Query whether CompactOS is on or off:</p> <pre><code>Compact.exe /CompactOS:Query\n</code></pre> <p></p> <p>Source</p>"},{"location":"Miscellaneous/Hyper%20V/","title":"Hyper-V Tips and Tricks","text":""},{"location":"Miscellaneous/Hyper%20V/#how-to-import-and-export-tpm-enabled-hyper-v-vm-certificates-with-powershell","title":"How to Import and Export TPM-enabled Hyper-V VM certificates with PowerShell","text":"<p>TPM requirement, which is a great security feature, was added to Windows 11. On the host, it is managed by the OS and UEFI, but when you create a Virtual Machine (VM) that runs an OS like Windows 11, you have to know how to manage it properly so that your VM will stay secure everywhere and you will maintain your access to your VM even if you import/export it to a different Hyper-V host or reinstall your host OS.</p> <p>Here is a screenshot of my Hyper-V VM on Windows 11 with the following security features enabled:</p> <ol> <li>Secure Boot</li> <li>Trusted Platform Module (TPM)</li> </ol> <p></p> <p></p> <p>When a VM uses TPM, Windows creates 2 certificates in the <code>Local Machine Certificate Store =&gt; Shielded VM Local Certificates =&gt; Certificates</code></p> <p>One of them is for encryption and the other one is for signing. They both contain private keys. If these 2 certificates don't exist in that folder in the Local Machine Certificate store of a Hyper-V host, your VM won't be able to start</p> <p>What you need to do is to export those 2 certificates (with private keys) and store them in a safe place (such as OneDrive's personal Vault) as a backup.</p> <p>If you completely reinstall Windows or move the VMs to a different Hyper-V host and Import the certificates, you will be able to continue using your VMs, but when you create new TPM enabled VMs on the new host, 2 more certificates will be added  to the <code>Local Machine Certificate Store =&gt; Shielded VM Local Certificates =&gt; Certificates</code>, so you will have 4 certificates in total, 2 of which are tied to your old VMs and the other 2 are tied to the new VMs. Each generated certificate has 10 years expiry date from the time it was created.</p> <p></p> <p>You can Import/Export the certificates using GUI, but here I'm going to show how to automate it using PowerShell:</p>"},{"location":"Miscellaneous/Hyper%20V/#export-all-the-available-host-guardian-service-certificates-with-private-keys-and-extended-properties","title":"Export all the available Host Guardian service certificates with private keys and extended properties","text":"<pre><code>$CertificatePassword = ConvertTo-SecureString -String \"hotcakex\" -Force -AsPlainText\nGet-Item \"Cert:\\LocalMachine\\Shielded VM Local Certificates\\*\" | ForEach-Object {\nExport-PfxCertificate -Cert $_ -FilePath \".\\$($_.Issuer)-$($_.Thumbprint).pfx\" -Password $CertificatePassword -CryptoAlgorithmOption AES256_SHA256}\n</code></pre>"},{"location":"Miscellaneous/Hyper%20V/#import-the-certificates-with-private-keys","title":"Import the certificates with private keys","text":"<pre><code>$ShieldedCertsPath = 'Cert:\\LocalMachine\\Shielded VM Local Certificates'\nif (-NOT (Test-Path $ShieldedCertsPath)) { New-Item -Path $ShieldedCertsPath -Force }\n$CertificatePassword = 'hotcakex' | ConvertTo-SecureString -AsPlainText -Force\nGet-Item \"C:\\Users\\$($env:USERNAME)\\OneDrive\\Desktop\\Hyper-V Guardian certificates\\*.pfx\" | Import-PfxCertificate -CertStoreLocation $ShieldedCertsPath -Password $CertificatePassword -Exportable\n</code></pre> <p>You should change the values for <code>$CertificateLocation</code> and <code>$CertificatePassword</code> varaibles according to your own needs and environment.</p> <ul> <li> <p>You can find more info about those commands here:</p> </li> <li> <p>Import-PfxCertificate</p> </li> <li>Export-PfxCertificate</li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#how-to-enable-nested-virtualization-for-all-the-vms-on-the-hyper-v-host","title":"How to Enable Nested Virtualization for All the VMs on the Hyper-V Host","text":"<p>Use the following command to enable Nested Virtualization for a single VM</p> <pre><code>Set-VMProcessor -VMName &lt;VMName&gt; -ExposeVirtualizationExtensions $true\n</code></pre> <p></p> <p>Use the following command to automatically enable Nested Virtualization for all VMs</p> <pre><code>(Get-VM).name | ForEach-Object {Set-VMProcessor -VMName $_ -ExposeVirtualizationExtensions $true}\n</code></pre> <p>All of the VMs must be in Off state when enabling nested virtualization for them</p> <p></p> <p>This is how to verify Nested Virtualization is enabled for all of your VMs</p> <pre><code>(Get-VM).name | ForEach-Object {get-VMProcessor -VMName $_} | Select-Object -Property VMName,ExposeVirtualizationExtensions\n</code></pre> <p></p> <ul> <li>Source</li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#confidential-computing-on-azure","title":"Confidential Computing on Azure","text":"<p>Azure confidential computing makes it easier to trust the cloud provider, by reducing the need for trust across various aspects of the compute cloud infrastructure. Azure confidential computing minimizes trust for the host OS kernel, the hypervisor, the VM admin, and the host admin.</p>"},{"location":"Miscellaneous/Hyper%20V/#continue-reading","title":"Continue reading","text":"<ul> <li> <p>Confidential Computing on Azure</p> </li> <li> <p>Azure confidential computing</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#shielded-vms-are-deprecated-concepts","title":"Shielded VMs are deprecated concepts","text":"<p>They are deprecated starting with Windows Server 2022. They were prone to modern attacks such as side-channel.</p> The following details about Shielded VMs are old and no longer valid <ul> <li><p>Shielded VMs can't be simply moved to another Hyper-V host and used there, nor can they be de-shielded in another host, if the certificate is not in place on the new host. This results in the error \"the key protector could not be unwrapped\", which is desired.</p> </li> <li><p>Shielding a VM is for keeping bad actors or malware out of the VM, not for keeping malware inside VM. i.e., Shielding a VM is for keeping the VM secure, not for keeping the host secure.</p> </li> <li><p>You can use the command below to get details about your Hyper-V host, including checks whether your host runs in local/standalone mode or is part of a Guarded Fabric</p> </li> </ul> <pre><code>HgsClientConfiguration\n</code></pre> <p>Note that this configuration is for standalone systems. an actual shielded virtual machine is a lot more secure because the host's security and health is properly attested in a Guarded Fabric, using Host Guardian Service (HGS) on a Windows Server.</p> <ul> <li><p>Here is an official video about the feature and how it protects your VMs:</p> <ul> <li><p>Introduction to Shielded Virtual Machines in Windows Server 2016 - YouTube</p> </li> <li><p>Microsoft Mechanics</p> </li> </ul> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#scenario-hyper-v-enhanced-session-mode-no-authentication-in-the-vms-os","title":"Scenario: Hyper-V, Enhanced session mode, no authentication in the VM's OS","text":"<p>When you create a VM in Hyper-V that doesn't have any authentication method for login such as Password or PIN, and use Enhanced session-mode to connect to it, there might be an issue where the RDP disconnects once after each restart of the VM and Hyper-V virtual machine connection asks you to connect to the VM again by clicking/tapping on the connect button. To fix this, set a local password for the user account of the OS in VM.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#native-boot-hyper-v-vms-vhdx","title":"Native boot Hyper-V VMs, VHDX","text":"<p>There are guides for native booting a VHDX and it's very easy to do. If you already have a Hyper-V VM, you can add it to the Windows boot manager so that during a reboot you will have the option to boot the VHDX.</p>"},{"location":"Miscellaneous/Hyper%20V/#you-need-to-pay-attention-to-a-few-things-though","title":"You need to pay attention to a few things though:","text":"<ol> <li> <p>The VHDX should be on a drive that is NTFS formatted, for now booting from ReFS is not supported.</p> </li> <li> <p>The drive that hosts the VHDX file must have more free space than the assigned size of the VHDX. The size you see in the file explorer is not the same as the size of the disk you assigned to the VHDX when creating it. It's easier if you have a fixed size VHDX instead of a dynamically expanding one. To find the real size of the VHDX, you can boot it in Hyper-V and check the drives inside it.</p> </li> <li> <p>Merge all checkpoints and delete them before attempting to native boot VHDX.</p> </li> </ol> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#vhdx-native-booting-is-very-easy-and-flexible-you-can-do-it-even-if","title":"VHDX native booting is very easy and flexible, you can do it even if:","text":"<ol> <li> <p>Your host has Secure boot enabled</p> </li> <li> <p>You use Signed WDAC policies</p> </li> <li> <p>Your VM wasn't SysPrepped before natively booting it on physical machine</p> </li> <li> <p>VM has secure boot and TPM</p> </li> </ol> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#how-to-make-the-vhdx-bootable","title":"How to make the VHDX bootable:","text":"<ol> <li>Double-click/tap on the VHDX file to mount it</li> <li>Run this in CMD or PowerShell</li> </ol> <pre><code>bcdboot D:\\Windows /d\n</code></pre> <p>Bcdboot</p> <p>Use the /d option to preserve the existing boot order.</p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#verify-the-change-by-running-this-command","title":"Verify the change by running this command","text":"<pre><code>bcdedit /enum\n</code></pre> <p>Bcdedit</p> <p></p> <p>The description of the boot entry is the same one you see during OS selection menu. You can change it with this command in PowerShell:</p> <pre><code>bcdedit /set '{default}' description 'VHDX Boot'\n</code></pre> <p>or in CMD:</p> <pre><code>bcdedit /set {default} description 'VHDX Boot'\n</code></pre> <p>If <code>{default}</code> is not the correct identifier, then change it according to the result of the <code>bcdedit /enum</code></p> <p>There are three different identifiers: The chosen default OS has identifier {default}, the current OS you are signed in at the moment is {current}. All other entries have a long hexadecimal identifier.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#some-hyper-v-nested-virtualization-screenshots","title":"Some Hyper-v Nested Virtualization Screenshots","text":"<p>To display how optimized and powerful Hyper-V hypervisor is (including any feature that runs on it such as Windows Sandbox, WSL, WSA, MDAG and more), here are some screenshots taken on a very old hardware, hardware that is not even officially supported by Windows 11, yet you can virtualize 5 operation systems nested in each other, and the last nested virtualized OS still has full functionality including direct file copy from host to guest, full Internet connectivity, ability to listen to music, do tasks and so on.</p>"},{"location":"Miscellaneous/Hyper%20V/#hardware-specs-all-from-2016-2017-couldnt-find-any-older-to-test","title":"Hardware specs - All from 2016-2017, couldn't find any older to test","text":"<ol> <li>CPU: Intel Core I7 7700k</li> <li>RAM: 16GB</li> <li>GPU: N/A (Intel IGPU)</li> <li>SSD: 256 GB M.2</li> </ol>  Click/Tap here to see the screenshots"},{"location":"Miscellaneous/Hyper%20V/#important-hyper-v-related-documents","title":"Important Hyper-V Related Documents","text":"<ul> <li> <p>Hyper-V Integration Services</p> </li> <li> <p>High Level Overview of Nested Virtualization</p> </li> <li> <p>Virtual Secure Mode</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/","title":"Only a Small Portion of The Windows OS Security Apparatus","text":"<ul> <li>Full Resolution Available Here - Perfect For Desktop Background</li> <li>SVG Vectorized Version Available Here</li> </ul> <p>Tip</p> <p>Many of the features mentioned in the map above can be automatically deployed and configured via the Harden Windows Security repository's offerings.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#superiority","title":"SUPERIORITY","text":""},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#intelligent-security-graph-isg","title":"Intelligent Security Graph (ISG)","text":"<p>This cloud-based AI is based on trillions of signals collected from Windows endpoints and other data sources, and processed every 24 hours. As a result, the decision from the cloud can change.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#no-0-dayunknown-file-allowed-asr","title":"No 0-day/Unknown File Allowed (ASR)","text":"<p>This rule blocks untrusted or unknown executable files such as .exe, .dll, or .scr, from launching that can be risky, as it might not be initially clear if the files are malicious.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#rigorous-custom-exploit-protections","title":"Rigorous Custom Exploit Protections","text":"<p>Exploit protection helps protect devices from malware that uses exploits to spread and infect other devices. Mitigation can be applied to either the operating system or to an individual app.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Read More</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#network-protection","title":"Network Protection","text":"<p>Network protection helps protect devices from Internet-based events. Network protection is an attack surface reduction capability. It helps prevent employees from accessing dangerous domains through applications. Domains that host phishing scams, exploits, and other malicious content on the Internet are considered dangerous.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#cloud-protection","title":"Cloud Protection","text":"<p>Next-generation technologies in Microsoft Defender Antivirus provide near-instant, automated protection against new and emerging threats. To identify new threats dynamically, next-generation technologies work with large sets of interconnected data in the Microsoft Intelligent Security Graph and powerful artificial intelligence (AI) systems driven by advanced machine learning models. Cloud protection works together with Microsoft Defender Antivirus to deliver accurate, real-time, and intelligent protection.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#cloud-based-remote-detonation-and-analysis","title":"Cloud-Based Remote Detonation And Analysis","text":"<p>Advanced cloud-based protection is provided for cases when Microsoft Defender Antivirus running on the endpoint needs more intelligence to verify the intent of a suspicious file.</p> <p>After files are submitted to cloud protection, the submitted files can be scanned, detonated, and processed through big data analysis machine-learning models to reach a verdict.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#block-at-first-sight","title":"Block At First Sight","text":"<p>Block at first sight is a threat protection feature of next-generation protection that detects new malware and blocks it within seconds.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#intel-threat-detection-technology-tdt","title":"Intel Threat Detection Technology (TDT)","text":"<p>Intel TDT is a detection approach that can augment traditional file-based or behavior-based detection. This technology integration focuses on the CPU execution patterns that are characteristic of ransomware attacks. Intel TDT is available in a broad range of Intel hardware over multiple generations and will be available for consumers through Microsoft Defender Antivirus.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Read More</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#remote-encryption-protection","title":"Remote Encryption Protection","text":"<p>Remote Encryption Protection in Microsoft Defender Antivirus detects and blocks attempts to replace local files with encrypted versions from another device.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#brute-force-protection","title":"Brute Force Protection","text":"<p>Brute-Force Protection in Microsoft Defender Antivirus detects and blocks attempts to forcibly sign in and initiate sessions.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#windows-updates-installed-within-24-hours-of-release","title":"Windows Updates Installed Within 24 Hours Of Release","text":"<p>Windows updates are extremely important. They always should be installed as fast as possible to stay secure and if a reboot is required, it should be done immediately. Threat actors can weaponize publicly disclosed vulnerabilities the same day their POC (Proof-Of-Concept) is released.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Read More</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#microsoft-defender-updates-installed-every-3-hours","title":"Microsoft Defender Updates Installed Every 3 Hours","text":"<p>Regularly updating Microsoft Defender Antivirus is crucial for maintaining robust security on your Windows OS. These updates ensure that your system has the latest security intelligence, which is vital for identifying and mitigating the most recent threats. Cyber threats evolve rapidly, and outdated antivirus signatures leave your system vulnerable to new malware, viruses, and other security risks.</p> <ul> <li>Read More</li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#ultimatum","title":"ULTIMATUM","text":""},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#app-control-for-business-wdac","title":"App Control for Business (WDAC)","text":"<p>Application control is a crucial line of defense for protecting computer systems given today's threat landscape, and it has an inherent advantage over traditional antivirus solutions. Specifically, application control moves away from an application trust model where all applications are assumed trustworthy to one where applications must earn trust in order to run.</p> <ul> <li> <p>Read More</p> </li> <li> <p>AppControl Manager</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#complete-byovd-protection","title":"Complete BYOVD Protection","text":"<p>This scenario involves removing the trust to any Kernel mode driver, whether they are vulnerable or not. It does not affect User-mode binaries or drivers. Any 3rd party software/hardware Kernel mode driver will need to be explicitly allowed. This scenario protects against all BYOVD scenarios and much more.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#application-cross-dependency-usage-control","title":"Application Cross-Dependency Usage Control","text":"<p>Implements Sandboxing-like restrictions around the program's dependencies so that only the main executable(s) of the program can use its dependencies and any other executable will be blocked from using them.</p> <ul> <li>Watch</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#controlled-folder-access","title":"Controlled Folder Access","text":"<p>Controlled folder access helps you protect valuable data from malicious apps and threats, such as ransomware.</p> <p>Controlled folder access applies to many system folders and default locations, including folders such as Documents, Pictures, and Movies. You can add other folders to be protected, but you cannot remove the default folders in the default list.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#smart-app-control","title":"Smart App Control","text":"<p>Smart App Control is a new app execution control feature that combines Microsoft\u2019s app intelligence services and Windows' code integrity features to protect users from untrusted or potentially dangerous code. Smart App Control selectively allows apps and binaries to run only if they're likely to be safe. Microsoft's app intelligence services provide safety predictions for many popular apps. If the app intelligence service is unable to make a prediction, then Smart App Control will still allow an app to run if it is signed with a certificate issued by a certificate authority (CA) within the Trusted Root Program.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#hyper-v-windows-sandbox-untrusted-software-usage","title":"Hyper-V &amp; Windows Sandbox (Untrusted Software Usage)","text":"<p>Hyper-V is the most secure and one of the best, if not the best Type-1 hypervisor. It's available in Windows and can virtualize an OS.</p> <p>Windows Sandbox provides a lightweight desktop environment to safely run applications in isolation. Software installed inside the Windows Sandbox environment remains \"sandboxed\" and runs separately from the host machine.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Read More</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#windows-defender-firewall-rule-based","title":"Windows Defender Firewall (Rule Based)","text":"<p>Windows Firewall is a Stateful Firewall. It is a security feature that helps to protect your device by filtering network traffic that enters and exits your device. This traffic can be filtered based on several criteria, including source and destination IP address, IP protocol, or source and destination port number.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#automated-firewall-with-appid-tagging","title":"Automated Firewall With AppID Tagging","text":"<p>Windows Firewall supports the use of App Control for Business AppID tags in policies. With this capability, you'll be able to scope your firewall rules to an application or a group of applications and rely on App Control policies to define those applications. The App Control AppID functionality adds an administrator defined tag to the given process token.</p> <p>For example, you can easily use a policy that allows only files that come with Windows by default to be allowed to access the Internet while everything else will be blocked.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#win32-app-isolation","title":"Win32 App Isolation","text":"<p>Win32 app isolation is a new security feature designed to be the default isolation standard on Windows clients. It is built on AppContainers and offers several added security features to help windows platform defend against attacks that leverage vulnerabilities in the application (this could be 3P libraries as well). To isolate their apps, application developers can update their applications using the tools provided by Microsoft.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Read More</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#vbs-enclaves","title":"VBS Enclaves","text":"<p>A Virtualization-based security (VBS) Enclave is a software-based trusted execution environment inside the address space of a host application. VBS Enclaves leverage underlying VBS technology to isolate the sensitive portion of an application in a secure partition of memory. VBS Enclaves enable isolation of sensitive workloads from both the host application and the rest of the system.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#uefi-locked-settings-to-require-proof-of-physical-presence","title":"UEFI Locked Settings (To Require Proof Of Physical Presence)","text":"<p>UEFI locked security measures are rooted in Proof of Physical Presence and they can't be disabled by modifying Group Policy, registry keys or other Administrative tasks.</p> <p>The only way to disable UEFI locked security measures is to have physical access to the computer, reboot and access the UEFI settings, supply the credentials to access the UEFI, turn off Secure Boot, reboot the system and then you will be able to disable those security measures with Administrator privileges.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#early-launch-antimalware-elam","title":"Early Launch AntiMalware (ELAM)","text":"<p>A security model in the kernel to better defend against malicious attacks on system-critical components. This security model extends the protected process infrastructure into a general-purpose model that can be used by 3rd party anti-malware vendors. The protected process infrastructure only allows trusted, signed code to load and has built-in defense against code injection attacks.</p> <ul> <li>Read More</li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#physical-security","title":"Physical Security","text":""},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#bitlocker","title":"BitLocker","text":"<p>BitLocker is a Windows security feature that provides encryption for entire volumes, addressing the threats of data theft or exposure from lost, stolen, or inappropriately decommissioned devices.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#startup-key-usb-flash-drive","title":"Startup Key (USB Flash Drive)","text":"<p>Requires a USB flash drive to be inserted into the computer to start the computer. The USB flash drive must contain the startup key for the encrypted drive. This key is only a portion of the complete key required to perform a successful authentication. The other portion of of the key is provided by the Startup PIN.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Read More</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#secure-boot-pcr7-binding","title":"Secure Boot (PCR7 Binding)","text":"<p>Secure Boot blocks untrusted firmware and bootloaders (signed or unsigned) from being able to start on the system. By default, BitLocker provides integrity protection for Secure Boot by utilizing the TPM PCR 7 measurement. An unauthorized EFI firmware, EFI boot application, or bootloader can't run and acquire the BitLocker key.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#tpm","title":"TPM","text":"<p>A TPM is a microchip designed to provide basic security-related functions, primarily involving encryption keys. The TPM is installed on the motherboard of a computer, and it communicates with the rest of the system by using a hardware bus.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#startup-pin","title":"Startup PIN","text":"<p>In addition to the protection that the TPM provides, part of the encryption key is stored on a USB flash drive, and a PIN is required to authenticate the user to the TPM. This configuration provides multifactor authentication so that if the USB key is lost or stolen, it can't be used for access to the drive, because the PIN is also required. Preboot authentication with a PIN can mitigate an attack vector for devices that use a bootable eDrive because an exposed eDrive bus can allow an attacker to capture the BitLocker encryption key during startup.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#firmware-security","title":"Firmware Security","text":""},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#system-management-mode-smm-protection","title":"System Management Mode (SMM) Protection","text":"<p>SMM code executes in the highest privilege level and is invisible to the OS. SMM protection is built on top of the Secure Launch technology and requires it to function. A hardware-enforced processor feature known as a supervisor SMI handler can monitor the SMM and make sure it doesn't access any part of the address space that it isn't supposed to. Windows measures SMI Handler's behavior and attest that no OS-owned memory has been tampered with.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#static-root-of-trust-for-measurement-srtm","title":"Static Root of Trust for Measurement (SRTM)","text":"<p>It is a hardware-based root of trust that helps ensure no unauthorized firmware or software (such as a bootkit) can start before the Windows bootloader. This hardware-based root of trust comes from the device's Secure Boot feature, which is part of the Unified Extensible Firmware Interface (UEFI). This technique of measuring the static early boot UEFI components is called the Static Root of Trust for Measurement (SRTM).</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#secure-launch-drtm","title":"Secure Launch (DRTM)","text":"<p>The Dynamic Root of Trust for Measurement (DRTM) lets the system freely boot into untrusted code initially, but shortly after launches the system into a trusted state by taking control of all CPUs and forcing them down a well-known and measured code path. This has the benefit of allowing untrusted early UEFI code to boot the system, but then being able to securely transition into a trusted and measured state.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Read More</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#secure-memory-overwrite","title":"Secure Memory Overwrite","text":"<p>Secure MOR protects the MOR lock setting using a UEFI secure variable. This helps guard against advanced memory attacks.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#tcg-storage-security-drive-password","title":"TCG Storage Security Drive Password","text":"<p>This is a password for modern SSDs that can be set in the UEFI firmware. User is asked for this password during the boot process before the OS is loaded. The SSD itself can be encrypted by BitLocker and still require this additional password before the Startup PIN.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#mode-based-execution-control","title":"Mode Based Execution Control","text":"<p>MBEC virtualization provides an extra layer of protection from malware attacks. It enables hypervisors to more reliably and efficiently verify and enforce the integrity of kernel-level code.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#uefi-password","title":"UEFI Password","text":"<p>It's a password that is set in the UEFI firmware. It is required to access the UEFI settings. This password can be used to prevent unauthorized changes to the UEFI settings.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#uefi-code-readonly","title":"UEFI Code ReadOnly","text":"<p>All UEFI memory that is marked executable is set to be read only. Memory marked writable must not be executable. Entries may not be left with neither of the attributes set, indicating memory that is both executable and writable.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#kernel-dma-protection","title":"Kernel DMA Protection","text":"<p>Kernel Direct Memory Access (DMA) Protection is a Windows security feature that protects against external peripherals from gaining unauthorized access to memory. Windows uses the system Input/Output Memory Management Unit (IOMMU) to block external peripherals from starting and performing DMA, unless the drivers for these peripherals support memory isolation (such as DMA-remapping).</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#pluton","title":"Pluton","text":"<p>Microsoft Pluton security processor is a chip-to-cloud security technology built with Zero Trust principles at the core. Microsoft Pluton provides hardware-based root of trust, secure identity, secure attestation, and cryptographic services. Pluton technology is a combination of a secure subsystem, which is part of the System on Chip (SoC) and Microsoft authored software that runs on this integrated secure subsystem.</p> <p>It addresses security needs like booting an operating system securely even against firmware threats and storing sensitive data safely even against physical attacks.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Read More</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#apic-virtualization","title":"APIC Virtualization","text":"<p>APIC virtualization is a collection of features that can be used to support the virtualization of interrupts and the Advanced Programmable Interrupt Controller (APIC). When APIC virtualization is enabled, the processor emulates many accesses to the APIC, tracks the state of the virtual APIC, and delivers virtual interrupts \u2014 all in VMX non-root operation without a VM exit.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#secure-boot","title":"Secure Boot","text":"<p>Secure Boot is a security standard developed by members of the PC industry to help ensure that a device boots using only software that's trusted by the original equipment manufacturer (OEM).</p> <ul> <li>Read More</li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#identity-in-the-abstract-sense","title":"IDENTITY (In the Abstract Sense)","text":""},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#smart-screen","title":"Smart Screen","text":"<p>Microsoft Defender SmartScreen protects against phishing or malware websites and applications, and the downloading of potentially malicious files.</p> <p>Microsoft Defender SmartScreen provide an early warning system against websites that might engage in phishing attacks or attempt to distribute malware through a socially engineered attack.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#potentially-unwanted-application-pua-protection","title":"Potentially Unwanted Application (PUA) Protection","text":"<p>Potentially unwanted applications (PUA) are a category of software that can cause your machine to run slowly, display unexpected ads, or at worst, install other software that might be unexpected or unwanted. PUA isn't considered a virus, malware, or other type of threat, but it might perform actions on endpoints that adversely affect endpoint performance or use. The term PUA can also refer to an application that has a poor reputation, as assessed by Microsoft Defender for Endpoint, due to certain kinds of undesirable behavior.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#valid-signature-required-for-elevation","title":"Valid Signature Required For Elevation","text":"<p>Only elevate executable files that are signed and validated. This setting enforces public key infrastructure (PKI) signature checks for any interactive applications that request elevation of privilege. Enterprise administrators can control which applications are allowed to run by adding certificates to the Trusted Publishers certificate store on local computers.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#behavioral-analysis","title":"Behavioral Analysis","text":"<p>Behavior monitoring (Analysis) is a critical detection and protection functionality of Microsoft Defender Antivirus.</p> <p>Monitors process behavior to detect and analyze potential threats based on the behavior of applications, services, and files. Rather than relying solely on signature-based detection (which identifies known malware patterns), behavior monitoring focuses on observing how software behaves in real-time</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#static-signature-analysis","title":"Static Signature Analysis","text":"<p>Microsoft Defender's security definition updates are a critical component of the cybersecurity infrastructure, designed to continuously enhance protection against new malware and sophisticated attack techniques. These updates regularly refresh the definition files that are crucial for identifying spyware, viruses, and other potentially unwanted software.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#personal-data-encryption-pde","title":"Personal Data Encryption (PDE)","text":"<p>PDE utilizes Windows Hello for Business to link data encryption keys with user credentials. When a user signs in to a device using Windows Hello for Business, decryption keys are released, and encrypted data is accessible to the user. When a user logs off, decryption keys are discarded and data is inaccessible, even if another user signs into the device.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#enhanced-sign-in-security-ess","title":"Enhanced Sign-in Security (ESS)","text":"<p>Windows Hello enables a user to authenticate using their biometrics or a PIN eliminating the need for a password. Biometric authentication uses facial recognition or fingerprint to prove a user's identity in a way that is secure, personal, and convenient. Enhanced Sign-in Security provides an additional level of security to biometric data by leveraging specialized hardware and software components, such as Virtualization Based Security (VBS) and Trusted Platform Module 2.0 to isolate and protect a user's authentication data and secure the channel by which that data is communicated.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#credential-guard","title":"Credential Guard","text":"<p>Credential Guard prevents credential theft attacks by protecting NTLM password hashes, Kerberos Ticket Granting Tickets (TGTs), and credentials stored by applications as domain credentials.</p> <p>Credential Guard uses Virtualization-based security (VBS) to isolate secrets so that only privileged system software can access them. Unauthorized access to these secrets can lead to credential theft attacks like pass the hash and pass the ticket.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#admin-less","title":"Admin-less","text":"<p>Most people run as full admins on their devices, which means apps and services have the same access to the kernel and other critical services as users. And the problem is that these apps and services can access critical resources without the user knowing. This is why Windows requires just in time administrative access to the kernel and other critical services as needed, not all the time, and certainly not by default. This makes it harder for an app to unexpectedly abuse admin privileges and secretly put malware or malicious code on Windows. When this feature is enabled, such as when an app needs special permissions like admin rights, you'll be asked for approval.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Watch</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#windows-hello-multi-factor-authentication","title":"Windows Hello Multi-Factor Authentication","text":"<p>Windows Hello for Business supports the use of a single credential (PIN and biometrics) for unlocking a device. Therefore, if any of those credentials are compromised (shoulder surfed), an attacker could gain access to the system.</p> <p>Windows Hello for Business can be configured with multi-factor unlock, by extending Windows Hello with trusted signals. Administrators can configure devices to request a combination of factors and trusted signals to unlock them.</p> <ul> <li>Read More</li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#zero-trust-dns-ztdns","title":"Zero Trust DNS (ZTDNS)","text":"<p>ZTDNS integrates the Windows DNS client and the Windows Filtering Platform (WFP) to enable this domain-name-based lockdown. First, Windows is provisioned with a set of DoH or DoT capable Protective DNS servers; these are expected to only resolve allowed domain names. This provisioning may also contain a list of IP address subnets that should always be allowed (for endpoints without domain names), expected Protective DNS server certificate identities to properly validate the connection is to the expected server, or certificates to be used for client authentication.</p> <ul> <li> <p>Read More</p> </li> <li> <p>Read More</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#advanced-intelligence-based-phishing-protection","title":"Advanced Intelligence-Based Phishing Protection","text":"<p>This feature is constantly learning from phishing attacks seen throughout the entire Microsoft security stack. It works alongside other Microsoft security products, to provide a layered approach to password security, especially for organizations early in their password-less authentication journey.</p> <ul> <li>Read More</li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Only%20a%20Small%20Portion%20of%20The%20Windows%20OS%20Security%20Apparatus/#continue-reading","title":"Continue Reading","text":"<p>Head over to the main page of the GitHub repository to learn more about Windows Security and how to automate a lot of the features talked about in this page.</p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/","title":"Optional overrides for Microsoft Security Baseline","text":"<p>Since Microsoft Security Baselines are geared towards Enterprise level security, some functionalities that home users might require are disabled. Use the following overrides in the Harden System Security App to bring back those functionalities. Some of these are necessary when using the app in Azure VMs.</p> <p>Important</p> <p>All of the features and functionalities listed below are enabled by default in Windows.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#windows-game-recording-and-broadcasting","title":"Windows Game Recording and Broadcasting","text":"<p>This setting enables or disables the Windows Game Recording and Broadcasting features. If you disable this setting, Windows Game Recording will not be allowed. If the setting is enabled or not configured, then Recording and Broadcasting (streaming) will be allowed.</p> <p>Policy path:</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\Windows Game Recording and Broadcasting\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#prohibit-use-of-internet-connection-sharing-on-your-dns-domain-network","title":"Prohibit use of Internet Connection Sharing on your DNS domain network","text":"<p>Determines whether administrators can enable and configure the Internet Connection Sharing (ICS) feature of an Internet connection and if the ICS service can run on the computer.</p> <p>ICS lets administrators configure their system as an Internet gateway for a small network and provides network services, such as name resolution and addressing through DHCP, to the local private network.</p> <p>If you enable this setting, ICS cannot be enabled or configured by administrators, and the ICS service cannot run on the computer. The Advanced tab in the Properties dialog box for a LAN or remote access connection is removed. The Internet Connection Sharing page is removed from the New Connection Wizard. The Network Setup Wizard is disabled.</p> <p>If you disable this setting or do not configure it and have two or more connections, administrators can enable ICS. The Advanced tab in the properties dialog box for a LAN or remote access connection is available. In addition, the user is presented with the option to enable Internet Connection Sharing in the Network Setup Wizard and Make New Connection Wizard. (The Network Setup Wizard is available only in Windows XP Professional.)</p> <p>By default, ICS is disabled when you create a remote access connection, but administrators can use the Advanced tab to enable it. When running the New Connection Wizard or Network Setup Wizard, administrators can choose to enable ICS.</p> <p>Note: Internet Connection Sharing is only available when two or more network connections are present.</p> <p>Note: When the \"Prohibit access to properties of a LAN connection,\" \"Ability to change properties of an all user remote access connection,\" or \"Prohibit changing properties of a private remote access connection\" settings are set to deny access to the Connection Properties dialog box, the Advanced tab for the connection is blocked.</p> <p>Note: Non-administrators are already prohibited from configuring Internet Connection Sharing, regardless of this setting.</p> <p>Note: Disabling this setting does not prevent Wireless Hosted Networking from using the ICS service for DHCP services. To prevent the ICS service from running, on the Network Permissions tab in the network's policy properties, select the \"Don't use hosted networks\" check box.</p> <p>Policy path:</p> <pre><code>Computer Configuration\\Administrative Templates\\Network\\Network Connections\\Prohibit use of Internet Connection Sharing on your DNS domain network\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#firewall-local-rule-merging","title":"Firewall local rule merging","text":"<p>This can prevent Hyper-V default switch from working properly, please see this forum post on Microsoft Tech Community for more info.</p> <p>The Group policies that we change back to default values are located in:</p> <pre><code>Computer Configuration\\Windows Settings\\Security Settings\\Windows Defender Firewall with Advanced Security\\\n</code></pre> <p>From there you need to select properties and then in each relevant profile tab, you need to select Customize and change the 2 settings for Rule merging to Yes (Default) and also set Display a notification to Yes, which is the default value in Windows.</p> <p>Here is an screenshot of the settings for the Public Profile tab:</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#deny-write-access-to-removable-drives-not-protected-by-bitlocker","title":"Deny write access to removable drives not protected by BitLocker","text":"<p>Disabling this policy because it can cause inconvenience and if your flash drive is BitLocker encrypted, it can't be used as a bootable Windows installation USB flash drive.</p> <p>Policy path:</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\BitLocker Drive Encryption\\Removable Data Drives\\Deny write access to removable drives not protected by BitLocker\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#enable-clipboard-and-drive-redirection-when-using-remote-desktop-connection","title":"Enable Clipboard and Drive redirection when using Remote Desktop connection","text":"<p>It is necessary when using Hyper-V VM Enhanced session mode and you want to copy items between guest and host OS.</p> <p>Policy path:</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\Remote Desktop Services\\Remote Desktop Session Host\\Device and Resource Redirection\\\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#enable-microsoft-defender-exclusion-lists-to-be-visible-to-local-admins","title":"Enable Microsoft Defender exclusion lists to be visible to Local Admins","text":"<p>Disables this policy which is located in the following Group Policy path</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\Microsoft Defender Antivirus\\Control whether or not exclusions are visible to Local Admins\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#disabled-turn-off-microsoft-consumer-experiences","title":"Disabled \"Turn off Microsoft Consumer Experiences\"","text":"<p>It disables some important features in Windows Settings -&gt; Bluetooth &amp; Devices -&gt; Mobile Devices</p> <p>More info in this PR</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\Cloud Content\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#disabled-configure-password-backup-directory","title":"Disabled \"Configure password backup directory\"","text":"<p>Microsoft Security Baselines set its value to \"Active Directory\", but since the Harden System Security app does not apply to computers managed by domain controllers or Entra ID, there is no need for this policy to be active.</p> <pre><code>Computer Configuration\\Administrative Templates\\System\\LAPS\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#enabled-apply-uac-restrictions-to-local-accounts-on-network-logons","title":"Enabled \"Apply UAC restrictions to local accounts on network logons\"","text":"<p>A Security feature that is enabled by default and should stay enabled.</p> <pre><code>Computer Configuration\\Administrative Templates\\MS Security Guide\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#restores-the-ability-of-administrator-to-enable-sudo","title":"Restores the ability of Administrator to enable Sudo","text":"<p>Microsoft Security baselines disable the usage of Sudo which also makes the Sudo option hidden from Windows settings.</p> <pre><code>Computer Configuration\\Administrative Templates\\System\\Configure the behavior of the sudo command --&gt; Maximum allowed sudo mode\n</code></pre> <p></p>"},{"location":"Miscellaneous/Rethinking%20Trust%20Advanced%20Security%20Measures%20for%20High-Stakes%20Systems/","title":"Rethinking Trust: Advanced Security Measures for High-Stakes Systems","text":""},{"location":"Miscellaneous/Rethinking%20Trust%20Advanced%20Security%20Measures%20for%20High-Stakes%20Systems/#digital-signatures","title":"Digital Signatures","text":"<p>A file or program bearing a valid digital signature should never be considered inherently secure. While it would be ideal if verifying a signature could conclusively indicate safety, the reality is far more nuanced and complex. A digital signature is an excellent preventive measure, but when it comes to exploiting or infiltrating high-value targets, numerous techniques exist to circumvent this layer of defense. Also, the security of a digital signature is only as strong as the integrity and vigilance of the individual responsible for safeguarding it.</p> <p>In recent years, many certificate authorities have implemented stricter policies requiring individuals requesting a code-signing certificate to store it within a Hardware Security Module (HSM). This specialized device provides an added layer of physical security for cryptographic keys. However, like any piece of hardware, an HSM can still be stolen, making the physical security of the device\u2014where it is stored, whether it's kept in a high-grade safe, and the security of the person's residence\u2014critical factors in preventing unauthorized access.</p> <p>Equally important is the security of the code-signing process itself. Does the certificate holder use a dedicated, isolated environment exclusively for signing? Is it meticulously maintained to be free from malware and potential compromises? Or do they insert the HSM into a system that also serves daily, multipurpose functions? In the latter scenario, where the same device is used for browsing the internet or downloading software, the risk of infection rises dramatically. A malware infection on this system could allow malicious software to access private keys from the HSM during the signing process, effectively bypassing the HSM's intended protection. From the outside, as users, we have no practical way to verify or scrutinize these practices. We are fundamentally in the dark about whether an organization or individual has taken rigorous precautions or if they are following minimal security protocols. This lack of transparency introduces an additional layer of risk; users are left trusting in a process they cannot observe or evaluate.</p> <p>Another vital aspect to consider is the trustworthiness of the individual applying for the certificate. If the applicant is a malicious actor, the signature itself becomes a tool for potential harm. Unfortunately, most certificate authorities issuing code-signing or Extended Validation (EV) certificates do not conduct extensive vetting of applicants. Factors such as an applicant's criminal history, associations, travel history, or broader trustworthiness are seldom, if ever, scrutinized. This lack of rigorous background checks leaves the door open for bad actors to obtain certificates under the guise of legitimacy, turning a critical security feature into a potential vulnerability.</p>"},{"location":"Miscellaneous/Rethinking%20Trust%20Advanced%20Security%20Measures%20for%20High-Stakes%20Systems/#application-control-for-business","title":"Application Control for Business","text":"<p>This article was created by me to address these vulnerabilities directly. Windows Defender Application Control (WDAC) or Application Control for Business exists precisely for this reason\u2014it transforms the security paradigm for both attackers and defenders by embracing a real zero-trust approach. Zero trust removes assumptions from the equation, requiring that every executable be explicitly validated before being allowed to run.</p> <p>In environments with highly sensitive devices or workspaces, relying solely on certificate authorities to secure your systems can be dangerously misguided. Trusting that a certificate authority has conducted rigorous due diligence when issuing code-signing certificates is a risky assumption. App Control provides a critical alternative: it enables you to define your own standards of trust, rather than leaving the responsibility in the hands of external entities who may have different criteria for assessing reliability.</p> <p>Application Control is empowering. It places the control squarely in your hands, allowing you to determine precisely which files, applications, or processes are authorized to execute on your device. By leveraging this approach, you gain comprehensive oversight and a new level of security confidence, knowing that only files meeting your strict criteria are permitted to run. In an era where threats are increasingly sophisticated, this individualized control over your digital environment is not only prudent but essential.</p>"},{"location":"Miscellaneous/Rethinking%20Trust%20Advanced%20Security%20Measures%20for%20High-Stakes%20Systems/#administrator-privilege","title":"Administrator Privilege","text":"<p>Exercise extreme caution with programs granted administrator privileges on your system. The User Account Control (UAC) prompt that appears, requesting permission, is more than a minor screen\u2014it serves as a critical security checkpoint. If you inadvertently grant a malicious program administrator access, reversing the damage can be extraordinarily challenging.</p> <p>When administrator privileges are granted, the program gains more than a one-time permission; it can establish persistent access by embedding itself deeply into the system. Malicious programs can create \"hooks\", allowing them to access your device and resources on demand. They might configure scheduled tasks to ensure persistence, execute commands with SYSTEM-level privileges, modify registry keys to enable startup scripts, or establish Windows services to maintain their foothold.</p> <p>Take, for example, the legitimate use case of the Steam game client. Upon installation and initial launch, Steam requests administrator privileges to set up a necessary service that has very high privileges. Although it doesn't ask for elevated permissions again with subsequent launches, this is because it has created that service during the initial setup that allows it to run with elevated privileges even after restarts or shutdowns. While Steam's case is benign, malware can exploit the same mechanisms and others for far more harmful purposes, achieving ongoing control over your device.</p>"},{"location":"Miscellaneous/Rethinking%20Trust%20Advanced%20Security%20Measures%20for%20High-Stakes%20Systems/#summary","title":"Summary","text":"<p>In conclusion, Digital signatures are a strong security standard for most use cases, but in high-risk, high-value environments, they are merely not enough. In those situations where the stakes are highest, Application Control is the most effective way to ensure that only trusted, authorized executables are allowed to run. By defining your own standards of trust, you can protect your systems from the most sophisticated threats. Also, exercise caution when granting administrator privileges to programs, as this can lead to persistent access and it's not a one-time permission.</p> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/","title":"Things to do when clean installing Windows","text":"<p>There are certain tasks that need to be performed for a proper Windows clean installation. Not all of the items below apply to all hardware.</p> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#bitlocker","title":"BitLocker","text":"<p>Suspend the protection of the OS drive and make sure you have the recovery password of all other non-OS drives so that you will be able to unlock them after clean installation of the OS.</p> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#intel-vmd-drivers-varies-by-device","title":"Intel VMD Drivers (Varies by device)","text":"<p>If you use a modern hardware that uses Intel\u00ae Volume Management Device (Intel\u00ae VMD) technology, you will need to download the VMD drivers on a flash drive and load them during Windows OS installation so that the OS installer will be able to detect the internal SSD and its partitions. You can download the VMD drivers from your hardware manufacturer's website.</p> <ul> <li>How to Enable Intel\u00ae VMD Capable Platforms for RAID or Intel\u00ae Optane\u2122 Memory Configuration with the Intel\u00ae RST Driver</li> </ul> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#clear-the-tpm-varies-by-device","title":"Clear the TPM (Varies by device)","text":"<p>Not all devices have this capability in the UEFI. If your UEFI has the option to clear the TPM, use it prior to clean installation of the OS.</p> <ul> <li> <p>Clear all the keys from the TPM</p> </li> <li> <p>How Windows uses the Trusted Platform Module</p> </li> <li> <p>Read more about TPM 2.0 specifications</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#formatdelete-the-following-partitions","title":"Format/Delete the following partitions","text":"<ul> <li>Format/delete your C drive</li> <li>Format/delete the EFI partition</li> <li>Format/delete the Recovery partition</li> </ul> <p>Let Windows recreate them during clean installation process</p> <p></p> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#how-to-create-a-bootable-usb-drive-without-3rd-party-tools","title":"How to create a bootable USB drive without 3rd party tools","text":"<p>Refer to this Wiki post</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/","title":"Basic PowerShell Tricks and Notes Part 2","text":"<p>The following PowerShell series is designed for newcomers to PowerShell who want to quickly learn the essential basics, the most frequently used syntaxes, elements and tricks. It can also be used by advanced users as a quick reference or those who want to sharpen their skills.</p> <p>The main source for learning PowerShell is Microsoft Learn websites. There are extensive and complete guides about each command/cmdlet with examples.</p> <p>PowerShell core at Microsoft Learn</p> <p>You can also use the Windows Copilot for asking any PowerShell related questions, code examples etc.</p> <p>This is part 2 of this series, find other parts here:</p> <ul> <li>Part 1</li> <li>Part 2</li> <li>Part 3</li> <li>Part 4</li> <li>Part 5</li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#view-all-predictive-intellisense-suggestions-based-on-past-history","title":"View All Predictive Intellisense Suggestions Based on Past History","text":"<p>Press F2 to see the complete list of the Predictive IntelliSense suggestions as you type on the PowerShell console.</p> <p>More info</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#where-is-the-powershell-command-history-stored","title":"Where Is the Powershell Command History Stored?","text":"<p>In this directory</p> <pre><code>$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\n</code></pre> <p>There is a file called <code>ConsoleHost_history.txt</code> and it contains the history of all the commands you've ever typed in PowerShell on your device. If you want to clear it, open the file, delete all of its content. If PowerShell is already open, close and reopen it to see the change.</p> <p></p> <p>You can open the file with this command</p> <pre><code>Invoke-Item -Path \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\"\n</code></pre> <p></p> <p>You can use the following command to set the maximum remembered history to 1</p> <pre><code>Set-PSReadLineOption -MaximumHistoryCount 1\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-clear-the-automatic-error-variable-in-powershell","title":"How to Clear the Automatic Error Variable in Powershell","text":"<pre><code>$error.clear()\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-get-the-last-error-type-in-powershell","title":"How to Get the Last Error Type in Powershell","text":"<pre><code>$Error[0].Exception.GetType().FullName\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-display-all-environment-variables-and-their-values-in-powershell","title":"How to Display All Environment Variables and Their Values in Powershell","text":"<pre><code>gci env:\n</code></pre> <ul> <li> <p>The <code>env:</code> drive is a PowerShell provider that exposes the environment variables as a hierarchical file system.</p> </li> <li> <p>The <code>gci</code> command is an alias for the <code>Get-ChildItem</code> cmdlet.</p> </li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#list-all-mscs-and-cpls-for-microsoft-management-console-and-control-panels-in-powershell","title":"List All MSCs and CPLs for Microsoft Management Console and Control Panels in Powershell","text":"<pre><code>Get-ChildItem -Path C:\\Windows\\system32\\* -Include *.msc, *.cpl | Sort-Object -Property Extension | Select-Object -Property Name | Format-Wide -Column 2\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-mount-the-efi-system-partition","title":"How to Mount the EFI System Partition?","text":"<pre><code>mountvol u: /s\n</code></pre> <p>This isn't a native PowerShell cmdlet, it uses mountvol CLI.</p> <p>With that command you can mount the EFI partition and assign the letter <code>U</code> to it, it will appear in This PC. You can browse it in PowerShell as admin.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-check-if-a-file-is-in-use-in-powershell","title":"How to Check if a File Is in Use in Powershell?","text":"<p>Here is an example function that tries to rename files given to it with the same names and if it was successful, it will consider that file not in use.</p> <pre><code>function IsFileAccessible {\n    param ([System.String]$FullFileName)\n    [System.Boolean]$IsAccessible = $false\n    try {\n        Rename-Item $FullFileName $FullFileName -ErrorVariable LockError -ErrorAction Stop\n        $IsAccessible = $true\n    }\n    catch {\n        $IsAccessible = $false\n    }\n    return $IsAccessible, $FullFileName\n}\n</code></pre> <p>You can use it like this:</p> <pre><code>(Get-ChildItem -Path 'C:\\Program Files\\Windows Defender' -Filter '*.exe*').FullName | ForEach-Object { IsFileAccessible -FullFileName $_ }\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#choosing-between-powershell-and-powershell-preview","title":"Choosing Between Powershell and Powershell Preview","text":"<p>Use PowerShell Preview if you want to test new features and don't need to call PowerShell with its alias, pwsh, from CMD. If you do need to call it like that, use PowerShell stable.</p> <p>Use cases for it are when you need to use <code>pwsh.exe</code> in Windows Task Scheduler.</p> <p>PowerShell Preview by default doesn't set its <code>pwsh.exe</code> available system wide, the path to that file isn't added to the system environment variables, only PowerShell stable does that, but of course if you want to use PowerShell preview you can manually modify the PATH environment variable to have <code>pwsh.exe</code> of PowerShell Preview be available system wide.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#variable-types-in-powershell","title":"Variable Types in Powershell","text":"<p>PowerShell variables can have types and type accelerator. The following command lists all of the types and their equivalent type accelerators. The fully qualified type names replace implicit with explicit.</p> <pre><code>[PSObject].Assembly.GetType('System.Management.Automation.TypeAccelerators')::Get\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#success-codes-and-error-codes","title":"Success Codes and Error Codes","text":"<p>In PowerShell, or for programming languages in general, 0 = success, 1 or anything else means failure/error.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-get-the-names-and-appids-of-installed-apps-of-the-current-user-in-powershell","title":"How to Get the Names and AppIDs of Installed Apps of the Current User in Powershell?","text":"<pre><code>Get-StartApps\n</code></pre> <p>More info</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#difference-between-async-and-sync","title":"Difference Between Async and Sync","text":"<p>Async is faster than Sync</p> <ul> <li> <p>Sync = waits for the previous task to finish before starting a new one</p> </li> <li> <p>Async = starts multiple tasks simultaneously</p> </li> </ul> <p>PowerShell supports sync/async commands workflows, also known as parallel.</p> <p>Note</p> <p>A comment under this answer:</p> <p>Oddly enough \"Synchronously\" means \"using the same clock\" so when two instructions are synchronous they use the same clock and must happen one after the other. \"Asynchronous\" means \"not using the same clock\" so the instructions are not concerned with being in step with each other. That's why it looks backwards, the term is not referring to the instructions relationship to each other. It's referring to each instructions relationship to the clock.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-enable-a-disabled-event-log-using-powershell","title":"How to Enable a Disabled Event Log Using Powershell","text":"<p>First we create a new\u202f<code>EventLogConfiguration</code>\u202fobject and pass it the name of the log we want to configure, then we set it to enabled and save the changes.</p> <pre><code>$LogName = 'Microsoft-Windows-DNS-Client/Operational'\n$Log = New-Object -TypeName System.Diagnostics.Eventing.Reader.EventLogConfiguration -ArgumentList $LogName\n$Log.IsEnabled = $true\n$Log.SaveChanges()\n</code></pre> <p>We can confirm the change by running this command:</p> <pre><code>Get-WinEvent -ListLog Microsoft-Windows-DNS-Client/Operational | Format-List -Property *\n</code></pre> <p>Using the same method we can configure many other options of the log file, just take a look at the\u202f<code>EventLogConfiguration</code> Class\u202ffor a list of configurable properties.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#find-the-current-users-username-in-powershell","title":"Find the Current User\u2019s Username in Powershell","text":"<pre><code>[Environment]::UserName\n</code></pre> <pre><code>$env:username\n</code></pre> <pre><code>whoami\n</code></pre> <pre><code>[System.Security.Principal.WindowsIdentity]::GetCurrent().Name\n</code></pre> <p>Most secure way</p> <p>Example</p> <pre><code>$UserSID = [System.Security.Principal.WindowsIdentity]::GetCurrent().user.value\n(Get-LocalUser | Where-Object -FilterScript { $_.SID -eq $UserSID }).name\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-access-properties-of-an-object-in-powershell","title":"How to Access Properties of an Object in Powershell","text":"<p>For example, you can first assign the entire object to a variable:</p> <pre><code>$Preferences = Get-MpPreference\n</code></pre> <p>Then call properties of that variable</p> <pre><code>$Preferences.PUAProtection\n</code></pre> <p>Another method is this:</p> <pre><code>$(Get-MpPreference).puaprotection\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#dot-sourcing","title":"Dot-Sourcing","text":"<p>To dot-source a PowerShell function in the same script file, you can use the dot operator <code>.</code> followed by the path of the script file containing the function. The path can be relative or absolute. Here's an example:</p> <pre><code># Contents of MyFunctions.ps1\nfunction New-Function {\n    Write-Host \"Hello World!\"\n}\n\n# Contents of Main.ps1\n. .\\MyFunctions.ps1\n\nNew-Function\n</code></pre> <p>In this example, <code>Main.ps1</code> dot-sources <code>MyFunctions.ps1</code> using the dot operator and then calls <code>MyFunction</code>. When you run <code>Main.ps1</code>, it will output <code>Hello World!</code> to the console.</p> <p>The dot operator tells PowerShell to execute the script file in the current scope instead of a new scope. This means that any functions or variables defined in the script file will be available in the current scope.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#a-custom-script-to-generate-random-words-in-powershell","title":"A Custom Script to Generate Random Words in Powershell","text":"<pre><code># Generate four variables with random names\n$TotallyRandomNamesArray = @() # Create an empty array to store the names\nfor ($i = 0; $i -lt 4; $i++) {\n    # Loop four times\n    $Chars = [CHAR[]](Get-Random -Minimum 97 -Maximum 123 -Count 11) # Generate random English letters\n    $Chars[0] = [CHAR]::ToUpper($Chars[0]) # Change the first character to upper-case\n    $TotallyRandomNamesArray += -join $Chars # Add the name to the array\n}\n# Assign the names from the Names array to the individual variables\n$TotallyRandomName1, $TotallyRandomName2, $TotallyRandomName3, $TotallyRandomName4 = $TotallyRandomNamesArray\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-see-all-the-shared-folders-and-drives","title":"How to See All the Shared Folders and Drives","text":"<pre><code>Get-CimInstance -Class Win32_Share\n</code></pre> <p>There are other ways that are not native PowerShell cmdlets, such as</p> <pre><code>net view \\\\$env:computername /all\n</code></pre> <p>And</p> <pre><code>net share\n</code></pre> <p>Also visible from Computer =&gt; System Tools =&gt; Shared Folders =&gt; Shares</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#an-example-of-using-f-format-operator","title":"An Example of Using -F Format Operator","text":"<pre><code>Write-output(\"The drivername {0} is vulnerable with a matching SHA256 hash of {1}\" -f $Filename, $SHA256)\n</code></pre> <p>More info</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-list-all-of-the-positional-parameters-of-a-cmdlet","title":"How to List All of the Positional Parameters of a Cmdlet","text":"<p>In this example we use the</p> <pre><code>Get-Help -Name 'Get-ChildItem' -Parameter * |\nSort-Object -Property position |\nSelect-Object -Property name, position\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-get-the-number-of-fans-and-details-about-them-in-powershell","title":"How to Get the Number of Fans and Details About Them in Powershell","text":"<pre><code>(Get-CimInstance -Namespace root/CIMV2 -ClassName Win32_Fan).count\nGet-CimInstance -Namespace root/CIMV2 -ClassName Win32_Fan\n</code></pre> <p>P.S VMs don't have fans.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-get-the-last-reboot-time-in-powershell","title":"How to Get the Last Reboot Time in Powershell","text":"<pre><code>[System.DateTime](Get-CimInstance -ClassName win32_operatingsystem -ComputerName $_.Name).LastBootUpTime\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-add-a-ps-custom-object-to-another-ps-custom-object","title":"How to Add a PS Custom Object to Another PS Custom Object","text":"<p>You can use the <code>Add-Member</code> cmdlet with the <code>-InputObject</code> parameter. The <code>-InputObject</code> parameter specifies the custom object that you want to add a property to, and the <code>-Value</code> parameter specifies the custom object that you want to add as a property. For example, you can use this code to add the <code>$CustomObject</code> to another custom object called <code>$ParentObject</code>:</p> <pre><code>$HashTable = @{\n    Name = 'Alice'\n    Age = 25\n    Occupation = 'Teacher'\n}\n$CustomObject = [PSCustomObject]$HashTable\n\n# Create another custom object\n$ParentObject = [PSCustomObject]@{\n    ID = 123\n    Location = 'London'\n}\n\n# Add the $CustomObject as a property to the $ParentObject\nAdd-Member -InputObject $ParentObject -MemberType NoteProperty -Name Child -Value $CustomObject\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#use-crlf-instead-of-lf-for-end-of-line-characters","title":"Use CRLF Instead of LF for End of Line Characters","text":"<p>In Visual Studio Code for example, you can see at the bottom right corner whether your end of line sequence is set to CRLF or LF, Windows uses CRLF.</p> <p>When you upload a PowerShell script to GitHub you need to make sure it's set to CRLF. PowerShell codes that are signed have big signature blocks at the end of them. PowerShell expects CRLF when doing authenticode signatures. You can also add those scripts to a <code>.gitattribute</code> config to your repo so that PowerShell files are uploaded with CRLF and not with LF.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-securely-get-the-temp-directorys-path","title":"How to Securely Get the Temp Directory's Path","text":"<pre><code>[System.IO.Path]::GetTempPath()\n</code></pre> <p>A less secure way is this</p> <pre><code>$env:Temp\n</code></pre> <p>The problem with the 2nd method is that if the path is long, contains too many spaces or contains non-English characters, it might lead to pattern matching using <code>~1</code>.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-securely-get-the-user-directorys-path","title":"How to Securely Get the User Directory's Path","text":"<p>The <code>Get-CimInstance</code> cmdlet can query the <code>Win32_UserProfile</code> class and filter by the current user's SID to get the LocalPath property, which is the path of the current user's profile directory. This method is more accurate than using the environment variable.</p> <pre><code>(Get-CimInstance Win32_UserProfile -Filter \"SID = '$([System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value)'\").LocalPath\n</code></pre> <p></p> <p>A less secure or accurate way is this</p> <pre><code>$env:USERPROFILE\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-run-multiple-kernel-drivers-in-powershell","title":"How to Run Multiple Kernel Drivers In PowerShell","text":"<p>If you have a folder full of <code>.bin</code> driver files, you can use the following command to create a kernel service and run them one by one.</p> <p>This can be useful for testing drivers against a deployed WDAC policy.</p> <pre><code>(Get-ChildItem \"C:\\drivers\").FullName | ForEach-Object -begin {$global:i=1} -Process {\n    sc create \"DriverTest$global:i\" type=kernel binpath=\"$_\"\n    Start-Sleep -Seconds 1\n    Start-Service -Name \"DriverTest$global:i\" -ErrorAction SilentlyContinue\n    $global:i++\n}\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-run-powershell-code-in-cmdbatch","title":"How to Run PowerShell Code in CMD/Batch","text":"<p>Example, the code has no double quotes inside it</p> <pre><code>powershell.exe -Command \"$UserSID = [System.Security.Principal.WindowsIdentity]::GetCurrent().user.value;(Get-LocalUser | where-object {$_.SID -eq $UserSID}).name\"\n</code></pre> <p></p> <p>Example, the code has double quotes inside it. We have to escape double quotes with <code>\\\"</code></p> <pre><code>powershell.exe -Command \"$UserSID = [System.Security.Principal.WindowsIdentity]::GetCurrent().user.value;$UserName = (Get-LocalUser | where-object {$_.SID -eq $UserSID}).name;Get-Process | where-object {$_.path -eq \"\\\"C:\\Users\\$UserName\\AppData\\Local\\Microsoft\\Edge SxS\\Application\\msedge.exe\\\"\"} | ForEach-Object {Stop-Process -Id $_.id -Force -ErrorAction SilentlyContinue}\"\n</code></pre> <p></p> <p>A good related answer from StackOverflow</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/","title":"Basic PowerShell Tricks and Notes Part 3","text":"<p>The following PowerShell series is designed for newcomers to PowerShell who want to quickly learn the essential basics, the most frequently used syntaxes, elements and tricks. It can also be used by advanced users as a quick reference or those who want to sharpen their skills.</p> <p>The main source for learning PowerShell is Microsoft Learn websites. There are extensive and complete guides about each command/cmdlet with examples.</p> <p>PowerShell core at Microsoft Learn</p> <p>You can also use the Windows Copilot for asking any PowerShell related questions, code examples etc.</p> <p>This is part 3 of this series, find other parts here:</p> <ul> <li>Part 1</li> <li>Part 2</li> <li>Part 3</li> <li>Part 4</li> <li>Part 5</li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#how-to-get-unique-items-from-a-list-of-objects-based-on-a-specific-property-only","title":"How to Get Unique Items From a List of Objects Based on a Specific Property Only","text":"<p>Let's create some dummy data first</p> <pre><code># Create an array of 10 objects with 4 properties each\n$Objects = @()\nfor ($i = 1; $i -le 10; $i++) {\n    $Object = New-Object -TypeName PSObject -Property @{\n        'Name'         = \"Person$i\"\n        'Age'          = Get-Random -Minimum 20 -Maximum 40\n        'Gender'       = Get-Random -InputObject @('Male', 'Female')\n        'Occupation'   = Get-Random -InputObject @('Teacher', 'Engineer', 'Doctor', 'Lawyer', 'Journalist', 'Chef', 'Artist', 'Writer', 'Student', 'Manager')\n        'RandomNumber' = Get-Random -InputObject @('694646152', '9846152', '3153546')\n    }\n    $Objects += $Object\n}\n</code></pre> <p>Then we can display that data like this in a table</p> <pre><code>$objects | Format-Table -AutoSize\n</code></pre> <p></p> <p>Now we want to filter the result to get the unique values, but the uniqueness should be based on a specific property, which here is \"RandomNumber\". We don't want more than 1 object with the same \"RandomNumber\" property.</p> <p>To do that, we use this method in PowerShell</p> <pre><code>$Objects | Group-Object -Property RandomNumber | ForEach-Object -Process { $_.Group[0] } | Format-Table -AutoSize\n</code></pre> <p></p> <p>You can use the Group-Object cmdlet to group the objects by the property you want to filter, and then select the first object from each group. This way, you will get one object for each \"RandomNumber\" property with all the properties intact. Using other methods such as <code>Get-Unique</code> or <code>Select-Object -Unique</code> won't work in this particular case.</p> <p>You can find more information about the Group-Object cmdlet and its parameters in this article.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#install-big-powershell-modules-system-wide","title":"Install Big Powershell Modules System Wide","text":"<p>Modules such as Az or Microsoft.Graph.Beta are big, can have thousands of files and take more than 1GB space after installation.</p> <p>By default modules are installed in the Documents directory and when you use OneDrive, everything in there is synced automatically.</p> <p>You can install such modules system wide so that they won't be stored in the <code>Documents\\PowerShell</code> directory and instead will be stored in <code>C:\\Program Files\\PowerShell\\Modules</code> (for PowerShell core). This will also improve security since Administrator privileges will be required to change module files in that directory.</p> <p>To do this, you need to use the <code>-Scope AllUsers</code> parameter.</p> <pre><code>Install-Module Az -Scope AllUsers\n\nInstall-Module Microsoft.Graph.Beta -Scope AllUsers\n</code></pre> <ul> <li>Parameter Info</li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#variable-scopes-in-foreach-object-parallel","title":"Variable Scopes in ForEach-Object -Parallel","text":"<p>When using <code>ForEach-Object -Parallel</code>, the variables from the parent scope are read-only within the parallel script block when accessed with the <code>$using:</code> scope modifier. You cannot write to them or modify them inside the parallel script block. If you do not use the <code>$using:</code> scope modifier, they won't be available in the parallel script block at all.</p> <p>If you need to collect or aggregate results from each parallel run, you should output the results to the pipeline, and then collect them after the parallel execution. Here's an example of how you can do that:</p> <pre><code>[System.String[]]$AnimalsList = @()\n$AnimalsList = 'Cat', 'Dog', 'Zebra', 'Horse', 'Mouse' | ForEach-Object -Parallel {\n    $_\n}\n</code></pre> <p>In that example, the count of the <code>$AnimalsList</code> will be 5 and it will contain the animals in the input array.</p> <p></p> <p>This example however would not work:</p> <p><pre><code>[System.String[]]$AnimalsList = @()\n'Cat', 'Dog', 'Zebra', 'Horse', 'Mouse' | ForEach-Object -Parallel {\n    $AnimalsList += $_\n}\n</code></pre> Because the <code>$AnimalsList</code> variable is read-only in the parallel script block and only available in the local scriptblock's scope.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#how-to-get-the-sid-of-all-of-the-accounts-on-the-system","title":"How to Get the SID of All of the Accounts on the System","text":"<p>SID stands for Security Identifier. It is a unique value of variable length that is used to identify a security principal or security group in Windows operating systems. SIDs are used in access control lists (ACLs) and in the user manager database (SAM) in Windows operating systems.</p> <p>You can get the SID of all the accounts on the system using the following PowerShell script:</p> <pre><code>(Get-CimInstance -Class Win32_UserAccount -Namespace 'root\\cimv2').Name | ForEach-Object -Process {\n    [System.Security.Principal.NTAccount]$ObjSID = New-Object -TypeName System.Security.Principal.NTAccount -ArgumentList $_\n    [System.Security.Principal.SecurityIdentifier]$ObjUser = $ObjSID.Translate([System.Security.Principal.SecurityIdentifier])\n    [PSCustomObject]@{\n        User = $_\n        SID  = $ObjUser.Value\n    }\n}\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#how-to-convert-a-sid-to-user-name","title":"How To Convert a SID to User Name","text":"<pre><code>[System.String]$SID = 'S-1-5-21-348961611-2991266383-1085979528-1004'\n$ObjSID = New-Object -TypeName System.Security.Principal.SecurityIdentifier -ArgumentList $SID\n$ObjUser = $ObjSID.Translate([System.Security.Principal.NTAccount])\nWrite-Host -Object 'Resolved user name: ' $ObjUser.Value -ForegroundColor Magenta\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#how-to-convert-a-user-name-to-sid","title":"How To Convert a User Name to SID","text":"<pre><code>[System.String]$UserName = 'HotCakeX'\n$ObjUser = New-Object -TypeName System.Security.Principal.NTAccount -ArgumentList $UserName\n$ObjSID = $ObjUser.Translate([System.Security.Principal.SecurityIdentifier])\nWrite-Host -Object \"Resolved User's SID: \" $ObjSID.Value -ForegroundColor Magenta\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#how-to-block-edge-traversal-for-all-of-the-firewall-rules","title":"How To Block Edge Traversal For All of the Firewall Rules","text":"<pre><code>Get-NetFirewallRule | Where-Object -FilterScript { $_.EdgeTraversalPolicy -ne 'Block' } | ForEach-Object -Process {\n    Set-NetFirewallRule -Name $_.Name -EdgeTraversalPolicy Block\n}\n</code></pre> <p>Edge Traversal controls whether an application or service the firewall rule applies to can receive unsolicited traffic from the internet. Unsolicited traffic is traffic that is not a response to a request from the computer or user and is originated from the Internet. Solicited traffic is initiated by the computer or user.</p> <p>You can read more about it here</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#function-manipulation-with-variables-and-scriptblocks","title":"Function Manipulation With Variables And ScriptBlocks","text":"<p>Suppose you have this function</p> <pre><code>Function Write-Text {\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory = $true)][System.String]$InputText\n    )\n    Write-Output -InputObject $InputText\n}\n</code></pre> <p></p> <p>You can store the function in a variable like this</p> <pre><code>[System.Management.Automation.FunctionInfo]$Function = Get-Item -Path 'Function:Write-Text'\n</code></pre> <p></p> <p>Or do it in bulk like this. In this example, <code>$SyncHash</code> is a synchronized hashtable used for communications between runspaces and <code>ExportedFunctions</code> is a nested hashtable that stores the functions inside of it.</p> <pre><code>'Function-1', 'Function-2', 'Function-3' | ForEach-Object -Process {\n  $SyncHash['ExportedFunctions'][\"$_\"] = Get-Item -Path \"Function:$_\"\n}\n</code></pre> <p></p> <p>You can redefine the function using the same name or a different name like this. This is useful for passing the function to a different RunSpace or session.</p> <pre><code>New-Item -Path 'Function:\\Write-TextAlt' -Value $Function -Force\n</code></pre> <p></p> <p>Redefining the functions in bulk just like the previous bulk operation above.</p> <p>Tip</p> <p>This is the recommended method of redefining the function in a different RunSpace because it completely strips its ScriptBlock of its affinity to the original RunSpace, so it'll just run on whatever the current RunSpace is without attempting to marshal.</p> <p>The affinity is about which RunSpace the script block was created in (rather than is allowed to run on).</p> <p>Basically when a scriptblock is created in a RunSpace, it knows where it came from, and when invoked outside of that RunSpace, the engine tries to send it back. This often fails because the main RunSpace is busy. So after a ~200ms time out, it will sometimes just run it on the current thread against the busy RunSpace, that causes a lot of issues, one of which is the inability to see it's parent scope. So it just forgets all commands exist and the result will be unexpected.</p> <p>Thanks to SeeminglyScience for providing this additional info.</p> <pre><code>New-Item -Path \"Function:\\$($_.Key)\" -Value $_.Value.ScriptBlock.Ast.Body.GetScriptBlock() -Force | Out-Null\n</code></pre> <p></p> <p>Tip</p> <p>This method isn't recommended as it will maintain the ScriptBlock's affinity to the original RunSpace.</p> <pre><code>$SyncHash.ExportedFunctions.GetEnumerator() | ForEach-Object -Process {\n    New-Item -Path \"Function:\\$($_.Key)\" -Value $_.Value.ScriptBlock -Force | Out-Null\n}\n</code></pre> <p></p> <p>Invoke the function using its new name, just as you would with the original function.</p> <pre><code>Write-Text -InputText 'Hello from the original function!'\nWrite-TextAlt -InputText 'Hello from the new function!'\n</code></pre> <p></p> <p>You can also create a scriptblock from the function using the following approach</p> <pre><code>$ScriptBlock = [System.Management.Automation.ScriptBlock]::Create($Function.Definition)\n</code></pre> <p></p> <p>And then call the scriptblock like this</p> <pre><code>&amp;$ScriptBlock 'Hello from the ScriptBlock! (direct call)'\n. $ScriptBlock 'Hello from the ScriptBlock! (dot sourced)'\nInvoke-Command -ScriptBlock $ScriptBlock -ArgumentList 'Hello from the ScriptBlock! (Invoke-Command)'\n</code></pre> <p></p> <p>Tip</p> <p>When orchestrating tasks across multiple RunSpaces with synchronized Hashtables, it's crucial to ensure seamless function transfer. Follow these steps for optimal results:</p> <ol> <li>Convert the desired function into a ScriptBlock.</li> <li>Store the ScriptBlock in the synchronized Hashtable.</li> <li>Redefine the ScriptBlock in the target RunSpace.</li> </ol> <p>This approach is necessary because simply saving the function to a variable, redefining it as a function in the destination RunSpace, and executing it won't replicate the original function's behavior outside the RunSpace context.</p> <p>Alternatively, you can define your code as ScriptBlocks instead of functions from the beginning.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#how-to-achieve-pseudo-lexical-variable-scoping-in-powershell","title":"How To Achieve Pseudo-Lexical Variable Scoping in PowerShell","text":"<p>Lexical Scoping means:</p> <ul> <li>Nested functions have access to variables declared in their outer scope.</li> <li>Variables declared in an outer scope are accessible within nested functions.</li> </ul> <p>PowerShell does not have true lexical scoping, but you can achieve pseudo-lexical scoping using C# types. Here's an example where we define a C# class with static members to store variables.</p> <pre><code># A path defined in the parent scope\n$SomePath = 'C:\\FolderName\\FolderName2'\n\nAdd-Type -TypeDefinition @\"\nnamespace NameSpace\n{\n    public static class ClassName\n    {\n        public static int SomeNumber = 456;\n        public static string path = $(\"`\"$($SomePath -replace '\\\\', '\\\\')`\"\");\n    }\n}\n\"@ -Language CSharp\n</code></pre> <p>The benefit of this approach is that you can access the variables from any scope across the PowerShell App Domain. That means any RunSpace you create, or any job started by either <code>Start-ThreadJob</code> or <code>Start-Job</code> cmdlets, without having to pass them as arguments.</p> <p></p> <p>Another great feature of this approach is that you don't need to set the value of the variables in the C# code, you can simply define the variable in C# and then assign the values in PowerShell side.</p> <p>In this example, I'm only defining the variables:</p> <pre><code>Add-Type -TypeDefinition @\"\nnamespace NameSpace\n{\n    public static class ClassName\n    {\n        public static int SomeNumber;\n        public static string path;\n        public static object MDAVConfigCurrent;\n    }\n}\n\"@ -Language CSharp\n</code></pre> <p>And now I can set any value to the variables in PowerShell side</p> <pre><code>[NameSpace.ClassName]::SomeNumber = 123\n[NameSpace.ClassName]::path = 'C:\\FolderName\\FolderName2'\n[NameSpace.ClassName]::MDAVConfigCurrent = Get-MpPreference\n</code></pre> <p>You can now use the variables anywhere by accessing them</p> <pre><code>Write-Host -Object ([NameSpace.ClassName]::SomeNumber)\nWrite-Host -Object ([NameSpace.ClassName]::path)\nWrite-OutPut -InputObject ([NameSpace.ClassName]::MDAVConfigCurrent)\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%204/","title":"Basic PowerShell Tricks and Notes Part 4","text":"<p>The following PowerShell series is designed for newcomers to PowerShell who want to quickly learn the essential basics, the most frequently used syntaxes, elements and tricks. It can also be used by advanced users as a quick reference or those who want to sharpen their skills.</p> <p>The main source for learning PowerShell is Microsoft Learn websites. There are extensive and complete guides about each command/cmdlet with examples.</p> <p>PowerShell core at Microsoft Learn</p> <p>You can also use the Windows Copilot for asking any PowerShell related questions, code examples etc.</p> <p>This is part 4 of this series, find other parts here:</p> <ul> <li>Part 1</li> <li>Part 2</li> <li>Part 3</li> <li>Part 4</li> <li>Part 5</li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%204/#how-to-bypass-powershell-constant-variables-and-how-to-prevent-the-bypass","title":"How To Bypass PowerShell Constant Variables And How To Prevent The Bypass","text":"<p>When using Set-Variable cmdlet to create a constant variable, you can't change the value of that variable later in the script by simple assignments, but there is a way to bypass this limitation using reflection.</p> <pre><code>Set-Variable -Name 'MyConstantVariable' -Value 'Hello World' -Option 'Constant'\n$MyConstantVariable\n\n$PSVar = Get-Variable -Name 'MyConstantVariable'\n$PSVar.GetType().GetField('_value', [System.Reflection.BindingFlags] 'NonPublic, Instance').SetValue($PSVar, 'Wut')\n$MyConstantVariable\n\n$PSVar.GetType().GetField('_options', [System.Reflection.BindingFlags] 'NonPublic, Instance').SetValue($PSVar, [System.Management.Automation.ScopedItemOptions]::None)\n$MyConstantVariable = 'Lolz'\n$MyConstantVariable\n</code></pre> <p>Shout out to Santiago Squarzon for this trick.</p> <p></p> <p>The way you can prevent this bypass is by defining constant variables in C# code in PowerShell. The reflection method demonstrated above won't work on this type of constant variables.</p> <pre><code>Add-Type -TypeDefinition @'\nnamespace NS\n{\n    public static class Const\n    {\n        public const int myConst = 66;\n    }\n}\n'@ -Language CSharp\n\n([NS.Const]::myConst)\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%204/#how-to-prevent-powershell-optimization-from-being-disabled","title":"How To Prevent PowerShell Optimization From Being Disabled","text":"<p>In PowerShell, the presence of the following commands in a ScriptBlock will completely disable optimizations in that ScriptBlock:</p> <pre><code>New-Variable\nRemove-Variable\nSet-Variable\nSet-PSBreakpoint\n# Also Dot-Sourcing\n. .\\file.ps1\n# Also if any type of breakpoint is already set\n</code></pre> <p>Also usage of any AllScope variable in a ScriptBlock will disable optimization in there.</p> <p>You can view those commands in here too.</p> <p>Shout out to SeeminglyScience for this info.</p> <p></p> <p>Any PowerShell code at some point will run and be in a ScriptBlock. Functions are their own ScriptBlock, modules (.psm1 files) are their own ScriptBlock, script files (.ps1 files) are their own ScriptBlock, ScriptBlocks themselves are their own ScriptBlock and so on.</p> <p>So the presence of the above methods and commands inside a ScriptBlock in the context explained above will disable optimization in that ScriptBlock, you can however use them outside of the ScriptBlock and then utilize them inside which will not disable optimization in that ScriptBlock.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%204/#the-fastest-way-to-enumerate-all-files-in-directories-based-on-specific-extensions","title":"The Fastest Way To Enumerate All Files In Directories Based On Specific Extensions","text":"<p>This example will enumerate all files in an array of directories based on specific extensions and return an array of FileInfo objects. This is potentially the fastest and most optimized way to do this. This command takes ~9 seconds to complete on my system.</p> <pre><code># Define a HashSet of file extensions to filter by\n$Extensions = [System.Collections.Generic.HashSet[System.String]]@('.sys', '.exe', '.com', '.dll', '.rll', '.ocx', '.msp', '.mst', '.msi', '.js', '.vbs', '.ps1', '.appx', '.bin', '.bat', '.hxs', '.mui', '.lex', '.mof')\n# Define an array of directory paths to scan through\n[System.IO.DirectoryInfo[]]$Paths = 'C:\\ProgramData\\Microsoft', 'C:\\Program Files\\Windows Defender', 'C:\\Program Files\\Hyper-V'\n# Define a HashSet to store the initial output\n$Output = [System.Collections.Generic.HashSet[System.IO.FileInfo]]@()\n# Define the GetFiles parameters\n$Options = [System.IO.EnumerationOptions]@{\n    IgnoreInaccessible    = $true\n    # This is equal to -Recurse parameter in Get-ChildItem cmdlet\n    RecurseSubdirectories = $true\n    # By default is skips hidden and system files, here we just skip the System files\n    # https://learn.microsoft.com/en-us/dotnet/api/system.io.fileattributes\n    # https://learn.microsoft.com/en-us/dotnet/api/system.io.enumerationoptions.attributestoskip\n    AttributesToSkip      = 'System'\n}\n\n# Loop over each path and add the files to the output HashSet using UnionWith\nforeach ($Path in $Paths) {\n    $Output.UnionWith((Get-Item -LiteralPath $Path).GetFiles('*', $Options))\n}\n# Define a HashSet to store the filtered output - Making sure the comparison is case-insensitive since \"Get-ChildItem -Include\" is case-insensitive as well and we don't want to miss files with \".DLL\" extension and so on\n$OutputAfterFiltering = [System.Collections.Generic.HashSet[System.IO.FileInfo]]@( $Output.Where({ $Extensions.Contains($_.Extension.ToLower()) }))\n</code></pre> <p></p> <p>This is an improved variation of the script above that handles inaccessible directories better but takes a few seconds (~3) more to complete.</p> <pre><code># Define a HashSet of file extensions to filter by\n$Extensions = [System.Collections.Generic.HashSet[System.String]]::new(\n    [System.String[]] ('.sys', '.exe', '.com', '.dll', '.rll', '.ocx', '.msp', '.mst', '.msi', '.js', '.vbs', '.ps1', '.appx', '.bin', '.bat', '.hxs', '.mui', '.lex', '.mof'),\n    # Make it case-insensitive\n    [System.StringComparer]::InvariantCultureIgnoreCase\n)\n# Define an array of directory paths to scan through\n[System.IO.DirectoryInfo[]]$Paths = 'C:\\ProgramData\\Microsoft', 'C:\\Program Files\\Windows Defender', 'C:\\Program Files\\Hyper-V'\n# Define a HashSet to store the initial output\n$Output = [System.Collections.Generic.HashSet[System.IO.FileInfo]]@()\n# Define the GetFiles parameters\n$Options = [System.IO.EnumerationOptions]@{\n    IgnoreInaccessible    = $true\n    # This is equal to -Recurse parameter in Get-ChildItem cmdlet\n    RecurseSubdirectories = $true\n    # This is equal to -Force parameter in Get-ChildItem cmdlet\n    AttributesToSkip      = 'None'\n}\n\n$Output = foreach ($Path in $Paths) {\n    [System.IO.Enumeration.FileSystemEnumerator[System.IO.FileInfo]]$Enum = $Path.EnumerateFiles('*', $Options).GetEnumerator()\n    while ($true) {\n        try {\n            # Move to the next file\n            if (-not $Enum.MoveNext()) {\n                # If we reach the end of the enumeration, we break out of the loop\n                break\n            }\n            # Check if the file extension is in the Extensions HashSet\n            if ($Extensions.Contains($Enum.Current.Extension)) {\n                # Pass the file to the output\n                $Enum.Current\n            }\n        }\n        catch {}\n    }\n}\n</code></pre> <p>Shout out to Santiago Squarzon for providing this method.</p> <p></p> <p>For comparison, the following command takes ~20 minutes to complete on my system and produces the same exact output as the scripts above but it's 100x times slower.</p> <pre><code>[System.IO.DirectoryInfo[]]$Paths = 'C:\\ProgramData\\Microsoft', 'C:\\Program Files\\Windows Defender', 'C:\\Program Files\\Hyper-V'\n[System.String[]]$Extensions = @('*.sys', '*.exe', '*.com', '*.dll', '*.rll', '*.ocx', '*.msp', '*.mst', '*.msi', '*.js', '*.vbs', '*.ps1', '*.appx', '*.bin', '*.bat', '*.hxs', '*.mui', '*.lex', '*.mof')\n[System.IO.FileInfo[]]$Output = Get-ChildItem -Recurse -File -LiteralPath $Paths -Include $Extensions -Force -ErrorAction SilentlyContinue\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%204/#how-to-view-the-loaded-assemblies-in-powershell","title":"How To View The Loaded Assemblies In PowerShell","text":"<pre><code>[System.AppDomain]::CurrentDomain.GetAssemblies() |\nWhere-Object -FilterScript { $_.Location } |\nSort-Object -Property FullName |\nSelect-Object -Property FullName, Location, GlobalAssemblyCache, IsFullyTrusted |\nOut-GridView -OutputMode Multiple\n</code></pre> <ul> <li>Read more</li> </ul>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%204/#how-to-load-all-dlls-that-come-with-powershell","title":"How To Load All DLLs That Come With PowerShell","text":"<pre><code>foreach ($Dll in (Convert-Path -Path (\"$([psobject].Assembly.Location)\\..\\*.dll\"))) {\n    try {\n        Add-Type -Path $Dll\n    }\n    catch {}\n}\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%204/#alternative-method","title":"Alternative Method","text":"<pre><code>foreach ($Dll in Get-ChildItem -File -Filter '*.dll' -Path $PSHOME) {\n    try {\n        Add-Type -AssemblyName ($Dll.Name).Replace($Dll.Extension, '')\n    }\n    catch {}\n}\n</code></pre> <p>Utilizing a try/catch block is essential in this scenario where not all DLLs located at the root of PowerShell are importable. This code is compatible with PowerShell installed through the Store or the MSI file.</p> <p>Manually importing DLLs can be advantageous, particularly when transitioning from writing code in VS Code to executing it in PowerShell within Windows Terminal. In VS Code, the integrated extension automatically loads necessary assemblies, ensuring smooth operation. However, this automatic process is absent outside of VS Code, potentially leading to discrepancies in code behavior. To mitigate this, manually identifying and importing the missing assemblies is required. By importing all DLLs preemptively, you eliminate the concern of missing assemblies.</p> <p>To streamline this process, incorporate that code into your <code>RootModule.psm1</code> or <code>ScriptsToProcess.ps1</code> file. This ensures the code executes solely during the module's import phase, optimizing performance.</p> <p>Note</p> <p>The <code>-ReferencedAssemblies</code> in <code>Add-Type -Path &lt;Paths&gt; -ReferencedAssemblies &lt;Assemblies&gt;</code> uses lazy loading, if a referenced assembly is not part of the type being added or the type doesn't reference a member from that assembly, nothing really happens. This lazy loading behavior improves load times.</p> <p>Shout out to SeeminglyScience for providing this info.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%204/#instead-of-pscustomobjects-define-and-use-custom-types-wherever-possible","title":"Instead of PSCustomObjects, Define And Use Custom Types Wherever Possible","text":"<p>If you don't need the extra features of PSCustomObjects such as dynamically adding/removing properties then consider defining and using custom classes in <code>C#</code> and use them in PowerShell. They are at least twice faster and this is very visible in loops. Run the benchmark below to see the difference.</p> <p></p> <pre><code># Define a C# class in PowerShell\nAdd-Type -TypeDefinition @'\npublic class CustomCSharpClass {\n    public string Property { get; set; }\n    public CustomCSharpClass(string property) {\n        Property = property;\n    }\n}\n'@\n\n# Benchmark PSCustomObject creation\n$psCustomObjectTime = Measure-Command {\n    for ($i = 0; $i -lt 10000; $i++) {\n        $obj = [PSCustomObject]@{Property = 'Value' }\n    }\n}\n\n# Benchmark C# class object creation\n$csharpClassTime = Measure-Command {\n    for ($i = 0; $i -lt 10000; $i++) {\n        $obj = [CustomCSharpClass]::new(\n            'Value'\n        )\n    }\n}\n\n# Output the results\n\"PSCustomObject creation time: $($psCustomObjectTime.TotalMilliseconds) ms\"\n\"C# class object creation time: $($csharpClassTime.TotalMilliseconds) ms\"\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%204/#for-performance-reasons-avoid-using-the-following-operators-and-cmdlets-for-loops","title":"For Performance Reasons Avoid Using The Following Operators And Cmdlets For Loops","text":"<ul> <li><code>+=</code> operator</li> <li><code>Where-Object</code> cmdlet</li> <li><code>ForEach-Object</code> cmdlet</li> </ul> <p>Instead, use <code>Foreach</code> loop with Direct Assignment. It's a language construct, it's always faster than the cmdlets and has less overhead.</p> <p>Here is a small benchmark you can run to see the difference in timing</p> <pre><code># Define your collection\n$Y = 1..10000\n\n# First script\n$firstScript = {\n    $array = foreach ($X in $Y) {\n        $X\n    }\n}\n\n# Second script\n$secondScript = {\n    $array = @()\n    foreach ($X in $Y) {\n        $array += $X\n    }\n}\n\n# Third script\n$thirdScript = {\n    $array = New-Object -TypeName 'System.Collections.Generic.List[psobject]'\n    foreach ($X in $Y) {\n        $array.Add($X)\n    }\n}\n\n# Measure the time taken by the first script\n$firstScriptTime = Measure-Command -Expression $firstScript\n\n# Measure the time taken by the second script\n$secondScriptTime = Measure-Command -Expression $secondScript\n\n# Measure the time taken by the third script\n$thirdScriptTime = Measure-Command -Expression $thirdScript\n\n# Output the results\n\"First script execution time: $($firstScriptTime.TotalMilliseconds) ms\"\n\"Second script execution time: $($secondScriptTime.TotalMilliseconds) ms\"\n\"Third script execution time: $($thirdScriptTime.TotalMilliseconds) ms\"\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/","title":"Basic PowerShell Tricks and Notes Part 5","text":"<p>The following PowerShell series is designed for newcomers to PowerShell who want to quickly learn the essential basics, the most frequently used syntaxes, elements and tricks. It can also be used by advanced users as a quick reference or those who want to sharpen their skills.</p> <p>The main source for learning PowerShell is Microsoft Learn websites. There are extensive and complete guides about each command/cmdlet with examples.</p> <p>PowerShell core at Microsoft Learn</p> <p>You can also use the Windows Copilot for asking any PowerShell related questions, code examples etc.</p> <p>This is part 5 of this series, find other parts here:</p> <ul> <li>Part 1</li> <li>Part 2</li> <li>Part 3</li> <li>Part 4</li> <li>Part 5</li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#never-use-relative-path-when-working-with-net-methods-in-powershell","title":"Never Use Relative Path When Working With .NET Methods In PowerShell","text":"<p>When you are working with .NET methods in PowerShell, you should never use relative paths. Always use the full path to the file or directory. The reason is that the following command:</p> <pre><code>[System.Environment]::CurrentDirectory\n</code></pre> <p>Always remembers the first directory the PowerShell instance was started in. If you use <code>cd</code> or <code>Set-Location</code> to change the current working directory, it will not change that environment variable, which is what .NET methods use when you pass in a relative path such as <code>.\\file.txt</code>. That means .NET methods always consider that environment variable when you pass in a relative path from PowerShell, not the current working directory in PowerShell.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#downloading-powershell-files-from-low-integrity-untrusted-sources","title":"Downloading PowerShell Files From Low Integrity Untrusted Sources","text":"<p>If you download your PowerShell scripts or module files from a Low Integrity source, such as a sandboxed browser, they will be deemed Untrusted. These files will possess Mark Of The Web (MotW) Zone Identifiers, marking them as such. Consequently, you must unblock them before utilization.</p> <p>Failure to unblock these files, thereby removing their MotW designation, can result in complications and errors within PowerShell. For instance, they may generate errors such as <code>AuthorizationManager check failed</code>, a situation particularly prevalent when incorporating C# code in PowerShell via <code>Add-Type</code>.</p> <p>Another issue arising from executing PowerShell files from Untrusted sources is the necessity for a more permissive execution policy such as <code>Bypass</code>; otherwise, you will encounter incessant prompts for confirmation.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#executing-powershell-cmdlets-in-c-within-powershell","title":"Executing PowerShell Cmdlets in C# Within PowerShell","text":"<p>Indeed, you can execute PowerShell cmdlets within <code>C#</code> directly inside PowerShell. By leveraging <code>Add-Type</code>, you can seamlessly integrate <code>C#</code> code into PowerShell, enabling it to run PowerShell cmdlets. This can be particularly useful in various scenarios, so here is an illustrative example.</p> <p>Consider the following code snippet, which demonstrates how to create a PowerShell instance:</p> <pre><code>using (PowerShell powerShell = PowerShell.Create())\n{\n    powerShell.AddScript(\"Write-Verbose 'Hello World!'\");\n    var results = powerShell.Invoke();\n}\n</code></pre> <p>The version of the PowerShell instance created will correspond to the version in which you run the <code>C#</code> code via <code>Add-Type</code>. For instance, if you execute the <code>C#</code> code within Windows PowerShell, the <code>.Create()</code> method will instantiate a PowerShell instance using the Windows PowerShell assemblies. Conversely, if you execute the same code within PowerShell Core (<code>pwsh.exe</code>), it will instantiate a PowerShell Core instance.</p> <p>This behavior ensures that your PowerShell instance is consistent with the environment in which your <code>C#</code> code is executed, providing seamless integration and execution across different PowerShell versions.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#make-regex-faster-in-powershell","title":"Make Regex Faster In PowerShell","text":"<p>The Compiled option in Regex is beneficial when you need to reuse the same pattern multiple times, especially within loops. This option improves performance by compiling the regex pattern into a more efficient, executable form. Here, we'll explore the technical advantages and provide a practical example in PowerShell to demonstrate its efficacy.</p> <p>When working with regular expressions in tight loops, the overhead of interpreting the pattern each time can significantly impact performance. The Compiled option mitigates this by converting the regex pattern into an intermediate language, which the .NET runtime can execute more swiftly.</p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#best-practices","title":"Best Practices","text":"<ul> <li> <p>Pattern Reuse: Utilize the Compiled option when the same regex pattern is used repeatedly.</p> </li> <li> <p>Defined Outside Loops: Ensure the regex pattern is defined outside the loop.</p> </li> </ul> <pre><code>$Pattern = [regex]::new('Insert Regex Pattern', [System.Text.RegularExpressions.RegexOptions]::Compiled)\n$Pattern.IsMatch($Data)\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#how-to-see-the-net-version-of-the-current-powershell-instance","title":"How To See The .NET Version Of The Current PowerShell Instance","text":"<p>Use the following command to determine the .NET version of the current PowerShell core instance:</p> <pre><code>[System.Runtime.InteropServices.RuntimeInformation]::FrameworkDescription\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#note-about-psreadline-module","title":"Note About PSReadLine Module","text":"<p>If you install or uninstall a PSReadLine version, totally exit the Terminal or VS Code if using the IDE. That's one of those modules that can't be unloaded normally.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#how-to-display-modern-toast-notifications-in-powershell","title":"How To Display Modern Toast Notifications In PowerShell","text":""},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#prerequisites","title":"Prerequisites","text":"<p>You need to first have the following DLL files in one directory:</p> <ul> <li> <p>Microsoft.Toolkit.Uwp.Notifications.dll</p> <ul> <li> <p>from Microsoft.Toolkit.Uwp.Notifications</p> </li> <li> <p>found in <code>microsoft.toolkit.uwp.notifications.7.1.3\\lib\\net5.0-windows10.0.17763\\Microsoft.Toolkit.Uwp.Notifications.dll</code></p> </li> </ul> </li> <li> <p>Microsoft.Win32.SystemEvents.dll</p> <ul> <li> <p>from Microsoft.Win32.SystemEvents</p> </li> <li> <p>found in <code>microsoft.win32.systemevents.8.0.0\\lib\\net8.0\\Microsoft.Win32.SystemEvents.dll</code></p> </li> </ul> </li> <li> <p>Microsoft.Windows.SDK.NET.dll</p> <ul> <li> <p>from Microsoft.Windows.SDK.NET.Ref</p> </li> <li> <p>found in <code>microsoft.windows.sdk.net.ref.10.0.26100.42\\lib\\net8.0\\Microsoft.Windows.SDK.NET.dll</code></p> </li> </ul> </li> <li> <p>WinRT.Runtime.dll</p> <ul> <li> <p>from Microsoft.Windows.SDK.NET.Ref</p> </li> <li> <p>found in <code>microsoft.windows.sdk.net.ref.10.0.26100.42\\lib\\net8.0\\WinRT.Runtime.dll</code></p> </li> </ul> </li> <li> <p>System.Drawing.Common.dll</p> <ul> <li> <p>from System.Drawing.Common</p> </li> <li> <p>found in <code>system.drawing.common.8.0.8\\lib\\net8.0\\System.Drawing.Common.dll</code></p> </li> </ul> </li> </ul> <p>Then you can use the following PowerShell code to natively display the toast notifications</p> <p>Note</p> <p>Change <code>D:\\notifications</code> to the correct folder in your computer where the DLLs exist.</p> <p></p> <pre><code># Load the required assemblies\nAdd-Type -Path 'D:\\notifications\\Microsoft.Toolkit.Uwp.Notifications.dll'\nAdd-Type -Path 'D:\\notifications\\System.Drawing.Common.dll'\n\n# Create an instance of the ToastContentBuilder class\n$toastContentBuilderType = [Type]::GetType('Microsoft.Toolkit.Uwp.Notifications.ToastContentBuilder, Microsoft.Toolkit.Uwp.Notifications')\n$toastContentBuilder = [Activator]::CreateInstance($toastContentBuilderType)\n\n# Add text elements\n$toastContentBuilder.AddText('Main Notification Title') | Out-Null\n$toastContentBuilder.AddText('This is the first line of content with summary details.') | Out-Null\n$toastContentBuilder.AddText('Additional line of content.') | Out-Null\n\n# Add Attribution Text\n$toastContentBuilder.AddAttributionText('Brought to you by Your Company') | Out-Null\n\n# Add Header\n$toastContentBuilder.AddHeader('6289', 'Camping!!', 'action=openConversation&amp;id=6289') | Out-Null\n\n# Add Hero Image\n$heroImagePath = 'D:\\notifications\\2.jpg'\n$toastContentBuilder.AddHeroImage([Uri]::new($heroImagePath)) | Out-Null\n\n# Add Inline Image\n$inlineImagePath = 'D:\\notifications\\1.jpg'\n$toastContentBuilder.AddInlineImage([Uri]::new($inlineImagePath)) | Out-Null\n\n# Show the notification\n$toastContentBuilder.Show() | Out-Null\n</code></pre> <p></p> <p>You can also use the following C# code in PowerShell to do the same</p> <pre><code>[System.String[]]$Assemblies = @(\n    'D:\\notifications\\Microsoft.Toolkit.Uwp.Notifications.dll',\n    'D:\\notifications\\Microsoft.Win32.SystemEvents.dll',\n    'D:\\notifications\\Microsoft.Windows.SDK.NET.dll',\n    'D:\\notifications\\System.Drawing.Common.dll',\n    'D:\\notifications\\WinRT.Runtime.dll'\n)\nAdd-Type -TypeDefinition @'\nusing System;\nusing Microsoft.Toolkit.Uwp.Notifications;\n\npublic class Notification {\n    public static void ShowNotif()\n    {\n        new ToastContentBuilder()\n            .AddAppLogoOverride(new Uri(\"file:///D:/notifications/2.jpg\"), ToastGenericAppLogoCrop.Circle)\n            .AddText(\"Main Notification Title\")\n            .AddText(\"This is the first line of content with summary details.\")\n            .AddText(\"Main Notification Title\")\n            .AddHeroImage(new Uri(\"file:///D:/notifications/1.jpg\"))\n            .AddInlineImage(new Uri(\"file:///D:/notifications/3.jpg\"))\n            .AddButton(new ToastButton()\n                .SetContent(\"View Details\")\n                .AddArgument(\"action\", \"viewDetails\")\n                .SetImageUri(new Uri(\"file:///D:/notifications/view_icon.jpg\")))\n            .AddButton(new ToastButton()\n                .SetContent(\"Dismiss\")\n                .AddArgument(\"action\", \"dismiss\")\n                .SetImageUri(new Uri(\"file:///D:/notifications/view_icon.jpg\")))\n            .AddButton(new ToastButton()\n                .SetContent(\"Open App\")\n                .AddArgument(\"action\", \"openApp\")\n                .SetImageUri(new Uri(\"file:///D:/notifications/view_icon.jpg\")))\n            .AddButton(new ToastButton()\n                .SetContent(\"Open App\")\n                .AddArgument(\"action\", \"openApp\")\n                .SetImageUri(new Uri(\"file:///D:/notifications/view_icon.jpg\")))\n            .AddButton(new ToastButton()\n                .SetContent(\"Open App\")\n                .AddArgument(\"action\", \"openApp\")\n                .SetImageUri(new Uri(\"file:///D:/notifications/view_icon.jpg\")))\n            .AddAudio(new Uri(\"ms-winsoundevent:Notification.SMS\"))\n            .AddAttributionText(\"Brought to you by Your Company\")\n            .AddHeader(\"6289\", \"Camping!!\", \"action=openConversation&amp;id=6289\")\n            .Show();\n    }\n}\n'@ -ReferencedAssemblies $Assemblies -CompilerOptions '/nowarn:1701'\n\n$Assemblies | ForEach-Object {Add-Type -Path $_}\n\n[Notification]::ShowNotif()\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#related-documentation","title":"Related Documentation","text":"<ul> <li> <p>Send a local toast notification from a C# app</p> </li> <li> <p>App notification content</p> </li> <li> <p>audio (Toast XML Schema)</p> </li> <li> <p>Toast headers</p> </li> <li> <p>ToastContentBuilder Class</p> </li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#dont-use-new-as-the-name-of-a-c-method-that-you-want-to-call-in-powershell","title":"Don't Use 'New' as the Name of a C# Method That You Want To Call In PowerShell","text":"<p>In PowerShell, <code>New</code> is reserved for constructors, and constructors have specific handling. When you call a method such as <code>[NameSpace.Class]::New($SomeArgument)</code> in PowerShell, it's looking for a constructor with the given argument, not a static method named <code>New</code>, so that will fail and throw an error.</p> <p>This is not a problem if you want to use the C# method called <code>New</code> in C# itself and not import it via <code>Add-Type</code> in PowerShell.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%205/#do-not-use-null-in-powershell-to-pass-an-argument-to-a-c-method-that-accepts-nullable-string","title":"Do Not Use $null in PowerShell To Pass An Argument To A C# Method That Accepts Nullable String","text":"<p>Let's say you have a C# method that accepts a nullable string</p> <pre><code>using System;\n#nullable enable\npublic class MyClass\n{\n    public static void MethodName(string? Path)\n    {\n        if (Path is not null)\n        {\n            Console.WriteLine(\"Path is not null\");\n        }\n        else\n        {\n            Console.WriteLine(\"Path is null\");\n        }\n    }\n}\n</code></pre> <p>In C# itself, you can call that method normally and pass null to it when calling it</p> <pre><code>MyClass.MethodName(null)\n</code></pre> <p>And you will see <code>Path is null</code> on the console.</p> <p>However, in PowerShell, if you used <code>Add-Type</code> to import that method and called it like this</p> <pre><code>[MyClass]MethodName($null)\n</code></pre> <p>You will see <code>Path is not null</code> on the console.</p> <p>The reason is that powerShell converts <code>$null</code> to an empty string <code>\"\"</code> and not the true <code>null</code>. So the C# method will get <code>\"\"</code> and since it's an empty string and not an actual null, it will fail the null check.</p> <p>In this situation you have at least 2 options:</p> <ol> <li> <p>In PowerShell, instead of passing <code>$null</code>, use <code>[NullString]::Value</code>: <code>[MyClass]::MethodName([NullString]::Value)</code>.</p> </li> <li> <p>In C#, instead of checking for null, check for <code>IsNullOrEmpty</code> or <code>IsNullOrWhiteSpace</code>.</p> </li> </ol> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/","title":"Basic PowerShell Tricks and Notes","text":"<p>The following PowerShell series is designed for newcomers to PowerShell who want to quickly learn the essential basics, the most frequently used syntaxes, elements and tricks. It can also be used by advanced users as a quick reference or those who want to sharpen their skills.</p> <p>The main source for learning PowerShell is Microsoft Learn websites. There are extensive and complete guides about each command/cmdlet with examples.</p> <p>PowerShell core at Microsoft Learn</p> <p>You can also use the Windows Copilot for asking any PowerShell related questions, code examples etc.</p> <p>This is part 1 of this series, find other parts here:</p> <ul> <li>Part 1</li> <li>Part 2</li> <li>Part 3</li> <li>Part 4</li> <li>Part 5</li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#pipeline-variable","title":"Pipeline Variable","text":"<p><code>$_</code>  is the variable for the current value in the pipeline.</p> <p>Examples</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#filtering-data-with-where-object","title":"Filtering Data With Where-Object","text":"<p><code>?</code> which is an alias for <code>Where-Object</code>, is used to filter all the data given to it.</p> <p>Where-Object</p> <p>Example</p> <pre><code>Get-PSDrive | ?{$_.free -gt 1}\n</code></pre> <p>Example</p> <pre><code>Get-PSDrive | Where-Object {$_.free -gt 1}\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#show-the-properties-of-an-object-selectively","title":"Show the Properties of an Object Selectively","text":"<p><code>Select</code> or <code>Select-Object</code> show the properties that we want to see from an object</p> <p>If we use <code>*</code> then all of the properties will be shown and from there we can choose which properties to add.</p> <p>Example:</p> <pre><code>Get-PSDrive | Where-Object {$_.free -gt 1} | Select-Object -Property *\n\nGet-PSDrive | Where-Object {$_.free -gt 1} | Select-Object -Property root, used, free\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#looping-using-foreach-object","title":"Looping Using Foreach-Object","text":"<p>The ForEach-Object cmdlet performs an operation on each item in a collection of input objects. The input objects can be piped to the cmdlet or specified using the InputObject parameter.</p> <p>In other words: for every item in the pipe, run this line.</p> <p>Examples:</p> <pre><code>Get-PSDrive | Where-Object { $_.free -gt 1 } | Select-Object -Property root, used, free | ForEach-Object { 'zebra' }\n</code></pre> <pre><code>Get-PSDrive | Where-Object { $_.free -gt 1 } | Select-Object -Property root, used, free | ForEach-Object { Write-Host 'Free Space for ' $_.Root 'is' ($_.free / 1gb ) }\n</code></pre> <p>The parenthesis, <code>($_.free/1gb )</code> must be there if we want to modify one of the output strings.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#to-get-online-help-about-any-cmdlet","title":"To Get Online Help About Any Cmdlet","text":"<p>These commands open the webpage for the specified cmdlet or command</p> <pre><code>Get-help &lt;cmdlet&gt; \u2013online\n</code></pre> <pre><code>Get-Help dir \u2013online\n</code></pre> <pre><code>Get-Help ForEach-Object \u2013online\n</code></pre> <p></p> <p>This shows the full help on the PowerShell console</p> <pre><code>Get-help Get-Service -full\n</code></pre> <p></p> <p>This opens a new window showing the full help content and offers other options such as Find</p> <pre><code>Get-help Get-Service -ShowWindow\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#to-query-windows-services","title":"To Query Windows Services","text":"<p>This gets any Windows service that has the word \"Xbox\" in it.</p> <pre><code>Get-Service \"*xbox*\"\n</code></pre> <p>This gets any Windows service that has the word \"x\" in it.</p> <pre><code>Get-Service \"*x*\"\n</code></pre> <p>Putting <code>*</code> around the word or letter finds anything that contains it.</p> <pre><code>Get-Service \"*x*\" | Sort-Object status\n</code></pre> <p>Example syntax:</p> <pre><code>Get-Service [[-Name] &lt;System.String[]&gt;] [-ComputerName &lt;System.String[]&gt;] [-DependentServices] [-Exclude &lt;System.String[]&gt;] [-Include &lt;System.String[]&gt;] [-RequiredServices] [&lt;CommonParameters&gt;]\n</code></pre> <p>In this part</p> <pre><code>Get-Service [[-Name] &lt;System.String[]&gt;]\n</code></pre> <p>The <code>-Name</code> Parameter accepts <code>&lt;System.String[]&gt;</code>, which is a StringList, and when [] is included, that means there can be multiple inputs/strings, separated by comma <code>,</code>.</p> <p>So <code>[[-Name] &lt;System.String[]&gt;]</code> can be used like this:</p> <pre><code>Get-Service -Name WinRM,BITS,*Xbox*\n</code></pre> <p>Also in another similar example syntax:</p> <pre><code>Get-Service [-ComputerName &lt;System.String[]&gt;] [-DependentServices] -DisplayName &lt;System.String[]&gt; [-Exclude &lt;System.String[]&gt;] [-Include &lt;System.String[]&gt;] [-RequiredServices] [&lt;CommonParameters&gt;]\n</code></pre> <p>Everything is inside a bracket except for -DisplayName, that means it is mandatory. If a parameter is inside a bracket, that means it is optional.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-suppress-errors-in-powershell","title":"How to Suppress Errors in Powershell","text":"<pre><code>-ErrorAction SilentlyContinue\n</code></pre> <p>Everything you wanted to know about exceptions</p> <p>Try/Catch will only 'trigger' on a terminating exception. Most cmdlets in PowerShell, by default, won't throw terminating exceptions. You can set the error action with the\u202f<code>-ErrorAction</code>\u202for <code>-ea</code> parameters:</p> <pre><code>Do-Thing 'Stuff' -ErrorAction Stop\n</code></pre> <p>Be careful when using <code>-ErrorAction Stop</code>. If using it in loops like with <code>ForEach-Object</code>, it will stop the entire loop after the first encounter of error.</p> <p>Handling Errors the PowerShell Way</p> <p>Tip: If you set</p> <pre><code>$ErrorActionPreference = 'Stop'\n</code></pre> <p>In your PowerShell code, either locally or globally for the entire script, <code>Write-Error</code> will cause the script to stop because it will be like throwing an error.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#get-file-signature-of-all-of-the-files-in-a-folder","title":"Get File Signature of All of the Files in a Folder","text":"<p>This will check all of the files' signatures in the current directory</p> <pre><code>Get-ChildItem -File | ForEach-Object -Process {Get-AuthenticodeSignature -FilePath $_}\n</code></pre> <p>More info about Get-ChildItem cmdlet</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#write-output-to-a-file-or-string","title":"Write Output to a File or String","text":"<pre><code>&gt; output.txt\n</code></pre> <p>Example:</p> <pre><code>ipconfig /all &gt; mynetworksettings.txt\n</code></pre> <p>about_Redirection</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-add-delaypause-to-the-execution-of-powershell-script","title":"How to Add Delay/Pause to the Execution of Powershell Script","text":"<p>To sleep a PowerShell script for 5 seconds, you can run the following command</p> <pre><code>Start-Sleep -Seconds 5\n</code></pre> <p>You can also use the <code>-milliseconds</code> parameter to specify how long the resource sleeps in milliseconds.</p> <pre><code>Start-Sleep -Milliseconds 25\n</code></pre> <p>Start-Sleep</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-stopkill-a-a-process-or-exe-executable-in-powershell","title":"How to Stop/Kill a a Process or (.exe) Executable in Powershell","text":"<p>Using native PowerShell cmdlet</p> <pre><code>Stop-Process -Name \"Photoshop\"\n</code></pre> <p>Stop-Process</p> <p>Using <code>taskkill.exe</code></p> <pre><code>taskkill /IM \"photoshop app.exe\" /F\n</code></pre> <p>taskkill</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#automatically-answer-yes-to-a-prompt-in-powershell","title":"Automatically Answer \u201cYes\u201d to a Prompt in Powershell","text":"<p>Use <code>\u2013force</code> at the end of the command</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#displays-all-information-in-the-current-access-token","title":"Displays All Information in the Current Access Token","text":"<p>The command below displays all information in the current access token, including the current user name, security identifiers (SID), privileges, and groups that the current user belongs to.</p> <pre><code>whoami /all\n</code></pre> <p>whoami</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#display-all-the-tcp-and-udp-ports-on-which-the-computer-is-listening","title":"Display All the Tcp and Udp Ports on Which the Computer Is Listening","text":"<pre><code>netstat -a\n</code></pre> <p>netstat</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#copy-the-result-of-a-command-to-clipboard-automatically","title":"Copy the Result of a Command to Clipboard Automatically","text":"<p>Add <code>| clip</code> at the end the command</p> <p>Example:</p> <pre><code>Get-TimeZone | clip\n</code></pre> <p>Example:</p> <pre><code>rg -i -F URL: | clip\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-scan-2-text-files-for-differences-and-pipe-the-difference-to-a-third-file","title":"How to Scan 2 Text Files for Differences and Pipe the Difference to a Third File","text":"<pre><code>$File1 = \"C:\\Scripts\\Txt1.txt\"\n$File2 = \"C:\\Scripts\\Txt2.txt\"\n$Location = \"C:\\Scripts\\Txt3.txt\"\n\nCompare-Object -ReferenceObject (Get-Content -Path $File1) -DifferenceObject (Get-Content -Path $File2) | Format-List | Out-File -FilePath $Location\n</code></pre> <p>Compare-Object</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#difference-between-strings-and-stringlists","title":"Difference Between Strings and StringLists","text":"<p>This is Stringlist in PowerShell:</p> <p><code>[String[]]</code></p> <p>And this is a string</p> <p><code>[String]</code></p> <p>When we define Stringlist in a parameter, then the argument will keep asking for multiple values instead of 1, if we want to stop adding arguments for the parameter, we have to enter twice.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-run-a-powershell-ps1-script","title":"How to Run a Powershell (.PS1) Script ?","text":"<ul> <li>Method 1:</li> </ul> <pre><code>&amp;\"Path\\To\\PS\\Script.ps1\"\n</code></pre> <p>Using the <code>&amp;</code> Call operator</p> <ul> <li>Method 2:</li> </ul> <pre><code>Set-Location 'Path\\To\\Folder\\OfThe\\Script'\n.\\Script.ps1\n</code></pre> <ul> <li>Method 3</li> </ul> <pre><code>pwsh.exe -File 'Path\\To\\Folder\\OfThe\\Script.ps1'\n</code></pre> <p>This example uses PowerShell Core</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#enclosing-strings-that-have-a-lot-of-single-and-double-quotation-marks","title":"Enclosing Strings That Have a Lot of Single and Double Quotation Marks","text":"<pre><code>$string =@\"\n\nSome string text\n\n\"@\n\n$string\n</code></pre> <p>the markers <code>@\"</code> and <code>\"@</code> indicating the beginning and end of the string must be on separate lines.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-find-the-type-of-the-output-of-a-command-in-powershell","title":"How to Find the Type of the Output of a Command in Powershell","text":"<p>Using <code>GetType()</code></p> <p>Examples:</p> <pre><code>(Get-BitlockerVolume -MountPoint \"C:\").KeyProtector.keyprotectortype.GetType()\n</code></pre> <pre><code>(Get-NetTCPConnection).GetType()\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#make-sure-to-use-pascal-case-for-variable-names","title":"Make Sure to Use Pascal Case for Variable Names","text":"<p>Pascal Case requires variables made from compound words and have the first letter of each appended word written with an uppercase letter.</p> <p>Example: <code>$Get-CurrentTime</code></p> <p>This will make your code readable and more understandable.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#some-popular-resources-and-cmdlets","title":"Some Popular Resources and Cmdlets","text":"<ul> <li> <p>Out-Null</p> </li> <li> <p>Test-Path</p> </li> <li> <p>Add-Content</p> </li> <li> <p>New-Item</p> </li> <li> <p>Everything you wanted to know about arrays</p> </li> <li> <p>about_Split</p> </li> <li> <p>Start-Process</p> </li> <li> <p>about_Parsing</p> </li> <li> <p>about_Quoting_Rules</p> </li> <li> <p>about_PowerShell_exe</p> </li> <li> <p>about_Comparison_Operators</p> </li> <li> <p>Everything you wanted to know about hashtables</p> </li> <li> <p>about_Hash_Tables</p> </li> <li> <p>about_Operators</p> </li> <li> <p>ForEach-Object</p> </li> <li> <p>about_Foreach</p> </li> <li> <p>Set-Acl</p> </li> <li> <p>Set-Content</p> </li> <li> <p>icacls</p> </li> <li> <p>Get-Process</p> </li> <li> <p>about_Environment_Variables</p> </li> <li> <p>Everything you wanted to know about the if statement</p> </li> <li> <p>Tee-Object</p> </li> <li> <p>about_Signing</p> </li> <li> <p>CIM Classes (WMI)</p> </li> <li> <p>Get-CimInstance</p> </li> <li> <p>ConvertFrom-Json</p> </li> <li> <p>PowerShell scripting performance considerations</p> </li> <li> <p>Creating Get-WinEvent queries with FilterHashtable</p> </li> <li> <p>Checkpoint-Computer</p> </li> <li> <p>Restore Point Description Text</p> </li> <li> <p>Get-ComputerRestorePoint</p> </li> <li> <p>Pop-Location</p> </li> <li> <p>Invoke-Expression</p> </li> <li> <p>about_Script_Blocks</p> </li> <li> <p>about_Functions_Advanced_Parameters</p> </li> <li> <p>about_Functions_CmdletBindingAttribute</p> </li> <li> <p>Add-Computer</p> </li> <li> <p>Get-Unique</p> </li> <li> <p>Sort-Object</p> </li> <li> <p>about_Comment_Based_Help</p> </li> <li> <p>Get-Date</p> </li> <li> <p>about_Parameters_Default_Values</p> </li> <li> <p>about_Parameter_Sets</p> </li> <li> <p>about_Automatic_Variables</p> </li> <li> <p>about_Functions_Argument_Completion</p> </li> <li> <p>Using tab-completion in the shell</p> </li> <li> <p>about_Continue</p> </li> <li> <p>Trim Your Strings with PowerShell</p> </li> </ul> <p></p>"},{"location":"PowerShell/How%20To%20Access%20All%20Stream%20Outputs%20From%20Thread%20Jobs%20In%20PowerShell%20In%20Real%20Time/","title":"How To Access All Stream Outputs From Thread Jobs In PowerShell In Real Time","text":"<p>The following code snippet demonstrates how to access all stream outputs from thread jobs in PowerShell in real time. It uses the <code>Start-ThreadJob</code> cmdlet to start the thread jobs and the <code>Receive-Job</code> cmdlet to access the job output streams. The code snippet also demonstrates how to access the warning, debug, verbose, output, host, and information streams from the thread jobs.</p> <p>It is properly commented to explain each part of the code.</p> <pre><code>[System.String[]]$JobNames = 'cat', 'dog', 'Zebra', 'kangaroo'\n\n# A hashtable to store the jobs\n[System.Collections.Hashtable]$Jobs = @{}\n\n# Start a job for each animal in the list\nforeach ($JobName in $JobNames) {\n\n    [System.Management.Automation.Job2]$CurrentJob = Start-ThreadJob -Name \"Animals $JobName\" -ScriptBlock {\n        Param ($JobNameInput)\n        #   $ErrorActionPreference = 'Stop'\n\n        Write-Output -InputObject \"Job started for $JobNameInput\"\n\n        # Simulate some real work\n        Start-Sleep -Seconds (Get-Random -Minimum 1 -Maximum 10)\n\n        Throw 1 / 0\n\n        Write-Error -Message \"Error message for $JobNameInput\"\n\n        Write-Warning -Message \"Warning message for $JobNameInput\"\n        Write-Debug -Message \"Debug Message for $JobNameInput\" -Debug\n        Write-Verbose -Message \"Verbose message for $JobNameInput\" -Verbose\n        Write-Output -InputObject \"Output message for $JobNameInput\"\n        Write-Host -Object \"Host message for $JobNameInput\"\n        Write-Information -MessageData \"Information message for $JobNameInput\"\n\n    } -ArgumentList $JobName\n\n    # Add the job to the hashtable with the job object as the key and its name as the value\n    $Jobs[$CurrentJob] = $JobName\n}\n\n# Continuously check for job output\nwhile ($Jobs.Count -ne 0) {\n\n    # An array of the jobs to remove\n    [System.Management.Automation.Job2[]]$JobsToRemove = @()\n\n    foreach ($Job in $Jobs.Keys) {\n\n        # Accessing individual output streams from the job that Receive-Job does not display\n        # $Job.Warning - not required - Receive-Job shows it\n        $Job.Debug\n        $Job.Progress\n        # $Job.Error - not required - Receive-Job shows it\n        $Job.Information # Also displays the Write-Host message\n\n        # Gets the success, error, warning and host stream from Write-Host\n        Receive-Job -Job $Job\n\n        if ($Job.State -eq 'Completed' -or $Job.State -eq 'Failed') {\n\n            #  if ($Job.State -eq 'Failed') {\n            #      Write-Output \"Job $($Job.Id) failed with reason: $($Job.JobStateInfo.Reason)\"\n            #  }\n\n            # Remove the job\n            Remove-Job -Job $Job -Force\n\n            # Add the job to the list of jobs to remove\n            $JobsToRemove += $Job\n        }\n    }\n\n    # Remove the jobs from the hashtable\n    foreach ($Job in $JobsToRemove) {\n        $Jobs.Remove($Job)\n    }\n\n    # Define the interval for checking the jobs\n    Start-Sleep -Milliseconds 500\n}\n\n# Getting all of the jobs to make sure nothing is left\nGet-Job\n</code></pre> <p></p>"},{"location":"PowerShell/How%20To%20Access%20All%20Stream%20Outputs%20From%20Thread%20Jobs%20In%20PowerShell%20In%20Real%20Time/#highly-recommended-to-read-the-following-related-articles","title":"Highly recommended to read the following related articles:","text":"<ul> <li>about_Output_Streams</li> <li>Start-ThreadJob</li> </ul>"},{"location":"PowerShell/How%20To%20Asynchronously%20Access%20All%20Stream%20Outputs%20From%20Background%20Jobs%20In%20PowerShell/","title":"How To Asynchronously Access All Stream Outputs From Background Jobs In PowerShell","text":"<p>In this article, we will learn how to asynchronously access all stream outputs from background jobs in PowerShell. We will use the <code>Start-Job</code> cmdlet to start a job for each animal in the list. We will then use the <code>Register-ObjectEvent</code> cmdlet to create an event subscriber for the job to automatically receive the job output for all streams and discard itself and the job. We will also use the <code>Unregister-Event</code> cmdlet to remove the event itself and the <code>Remove-Job</code> cmdlet to remove the event subscriber's job.</p> <p>We will also properly communicate any terminating or non-terminating error that ocurred inside of each job to the console.</p> <pre><code>[System.String[]]$JobNames = 'cat', 'dog', 'Zebra', 'kangaroo'\n\n# Start a job for each animal in the list\nforeach ($JobName in $JobNames) {\n\n    $CurrentJob = Start-Job -Name \"Animals $JobName\" -ScriptBlock {\n        Param ($JobNameInput)\n\n        Start-Sleep -Seconds 2\n\n        Write-Output -InputObject \"Job started for $JobNameInput\"\n\n        # Simulate some real work\n        Start-Sleep -Seconds (Get-Random -Minimum 1 -Maximum 10)\n\n        # Generate terminating error\n        # Throw \"Error message for $JobNameInput\"\n\n        # Generate Non-terminating error\n        Write-Error -Message \"Error message 1 for $JobNameInput\"\n\n        Write-Warning -Message \"Warning message for $JobNameInput\"\n        Write-Debug -Message \"Debug Message for $JobNameInput\" -Debug\n        Write-Verbose -Message \"Verbose message for $JobNameInput\" -Verbose\n        Write-Error -Message \"Error message 2 for $JobNameInput\"\n        Write-Output -InputObject \"Output message for $JobNameInput\"\n        Write-Host -Object \"Host message for $JobNameInput\"\n        Write-Information -MessageData \"Information message for $JobNameInput\"\n\n    } -ArgumentList $JobName\n\n    # Create an event subscriber for the job to automatically receive the job output for all streams and discard itself and the job\n    Register-ObjectEvent -InputObject $CurrentJob -EventName StateChanged -Action {\n\n        # Receive the Write-Output stream for success stream\n        # Write-Host is needed to display the error message on the console\n        # We need to use loop because all of the Write-Output messages are stored in the ChildJobs.Output property\n        # And without a loop, they would all be written as a single string on in one line\n        if ($null -ne $EventSubscriber.SourceObject.ChildJobs.Output) {\n            $EventSubscriber.SourceObject.ChildJobs.Output | ForEach-Object -Process {\n                Write-Host -Object $_\n            }\n        }\n\n        # Check if a terminating error ocurred in the job\n        if ($EventSubscriber.SourceObject.State -eq 'Failed') {\n            Write-Host -Object \"The Job $($EventSubscriber.SourceObject.Name) Failed\" -ForegroundColor Red\n        }\n\n        # Receive the Terminating error stream - Write-Host is needed to display the error message on the console\n        if ($null -ne $EventSubscriber.SourceObject.ChildJobs.JobStateInfo.Reason.Message) {\n            $EventSubscriber.SourceObject.ChildJobs.JobStateInfo.Reason.Message | ForEach-Object -Process {\n                Write-Host -Object $_ -ForegroundColor Red\n            }\n        }\n\n        # Receive the Non-Terminating error stream - Write-Host is needed to display the error message on the console\n        if ($null -ne $EventSubscriber.SourceObject.ChildJobs.Error) {\n            $EventSubscriber.SourceObject.ChildJobs.Error | ForEach-Object -Process {\n                Write-Host -Object $_ -ForegroundColor DarkRed\n            }\n        }\n\n        # Receive the job output except for Wire-Output and error stream\n        Receive-Job -Job $EventSubscriber.SourceObject\n\n        # Unregister the event itself\n        Unregister-Event -SourceIdentifier $EventSubscriber.SourceIdentifier -Force\n        # Remove the event subscriber's job, it is the same as the event subscriber's SourceIdentifier\n        Remove-Job -Name $EventSubscriber.SourceIdentifier -Force\n        # Remove the input job initiated by Start-Job\n        Remove-Job -Id $EventSubscriber.SourceObject.Id -Force\n\n    } | Out-Null\n}\n\n# Get all of the jobs at the end to make sure there is no leftover\n# Get-Job\n\n# Make sure all of the event subscriptions have been properly removed at the end\n# (Get-EventSubscriber).SourceIdentifier\n\n# https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables#eventsubscriber\n# $EventSubscriber inside of the action block is the same as the following objects\n# (Get-EventSubscriber)[0].SourceObject.ChildJobs.JobStateInfo.Reason.Message\n# (Get-EventSubscriber).SourceObject.ChildJobs.output\n</code></pre> <p></p>"},{"location":"PowerShell/How%20To%20Asynchronously%20Access%20All%20Stream%20Outputs%20From%20Background%20Jobs%20In%20PowerShell/#note-about-why-we-needed-to-access-childjobs-property","title":"Note About Why We Needed To Access ChildJobs Property","text":"<p>when you use <code>Start-Job</code> to initiate a background job, it executes the provided script block in a separate, child job. This is because <code>Start-Job</code> is designed to run tasks asynchronously, allowing the main PowerShell session to continue without waiting for the task to complete.</p> <p>The child job is essentially a separate PowerShell process that runs in the background. It's isolated from the parent job, which means it has its own scope and doesn't share variables or RunSpaces with the parent. This isolation ensures that the main session remains responsive and that the background task doesn't interfere with the ongoing tasks in the main session.</p> <p></p>"},{"location":"PowerShell/How%20To%20Use%20Reflection%20And%20To%20Protect%20against%20using%20internal%20%26%20private%20C%23%20methods%20in%20PowerShell/","title":"How To Use Reflection And Prevent Using Internal &amp; Private C# Methods in PowerShell","text":""},{"location":"PowerShell/How%20To%20Use%20Reflection%20And%20To%20Protect%20against%20using%20internal%20%26%20private%20C%23%20methods%20in%20PowerShell/#introduction-to-reflection-in-net","title":"Introduction to Reflection in .NET","text":"<p>Reflection in .NET is a powerful feature that allows a program to inspect and interact with its own metadata, types, and assemblies at runtime. This capability is part of the System.Reflection namespace and is integral to many advanced programming tasks, such as dynamic type loading, runtime method invocation, and metadata inspection.</p> <p>Important</p> <p>This is a research article demoing only one of many ways to use reflection and to prevent it. It isn't designed to be used in production code nor does it 100% protect against reflection usage.</p>"},{"location":"PowerShell/How%20To%20Use%20Reflection%20And%20To%20Protect%20against%20using%20internal%20%26%20private%20C%23%20methods%20in%20PowerShell/#what-reflection-is","title":"What Reflection Is","text":"<ul> <li> <p>Runtime Type Inspection: Reflection allows you to examine the types defined in an assembly at runtime. This includes finding out which classes, interfaces, methods, properties, and fields are available, and retrieving metadata about them.</p> </li> <li> <p>Dynamic Invocation: Reflection enables the invocation of methods, constructors, and fields, even if they are marked as private or internal. This bypasses traditional access control mechanisms in C#, allowing for dynamic execution of code that would normally be inaccessible.</p> </li> </ul>"},{"location":"PowerShell/How%20To%20Use%20Reflection%20And%20To%20Protect%20against%20using%20internal%20%26%20private%20C%23%20methods%20in%20PowerShell/#how-reflection-bypasses-access-modifiers","title":"How Reflection Bypasses Access Modifiers","text":"<ul> <li> <p>Access Modifiers in C#: In C#, access modifiers such as private, internal, protected, and public control the visibility and accessibility of types and members within code. For instance, a private method is accessible only within the class it's defined, and an internal method is accessible only within the same assembly.</p> </li> <li> <p>Reflection's Power: Reflection, however, operates at a lower level of abstraction. It doesn't follow the same rules that the C# compiler enforces at compile-time. Instead, it can be used to query and interact with any method or member, regardless of its access level. This is because reflection directly manipulates the type metadata, which is always accessible at runtime, even for non-public members.</p> </li> </ul> <p>This means that with reflection, you can programmatically discover and invoke methods and properties that would otherwise be hidden or inaccessible according to the usual C# access rules. This capability, while powerful, can also pose stability risks if used improperly, as it can break encapsulation, violate class design intentions, and even access sensitive or untested code paths.</p> <p></p>"},{"location":"PowerShell/How%20To%20Use%20Reflection%20And%20To%20Protect%20against%20using%20internal%20%26%20private%20C%23%20methods%20in%20PowerShell/#demo-time","title":"Demo Time","text":"<p>Let's say you have the following C# code and you imported it in PowerShell via <code>Add-Type</code></p> <pre><code>namespace HardenWindowsSecurity\n{\n    internal sealed class Test\n    {\n        private static string ReturnRandom()\n        {\n            return \"Random!\";\n        }\n    }\n}\n</code></pre> <p></p> <p>If you try to access the class or the method like this, you will get an error about the type not being found</p> <pre><code>[HardenWindowsSecurity.Test]::ReturnRandom()\n</code></pre> <p></p> <p>but you can access it via reflection, effectively bypassing the internal or private nature of the method and class.</p> <pre><code># Get all loaded assemblies\n$Assemblies = [AppDomain]::CurrentDomain.GetAssemblies()\n\n# Find the assembly where the type is defined\n$Assembly = $Assemblies | Where-Object -FilterScript { $_.GetTypes() | Where-Object -FilterScript { $_.FullName -eq 'HardenWindowsSecurity.Test' } }\n\nif ($null -eq $Assembly) {\n    throw \"Assembly containing the type 'HardenWindowsSecurity.Test' not found.\"\n}\n\n# Get the Type object for the Test class\n$Type = $Assembly.GetType('HardenWindowsSecurity.Test')\n\nif ($null -eq $Type) {\n    throw \"Type 'HardenWindowsSecurity.Test' not found.\"\n}\n\n# Get the MethodInfo object for the 'ReturnRandom' method\n$Method = $Type.GetMethod('ReturnRandom', [System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::Static)\n\nif ($null -eq $Method) {\n    throw \"Method 'ReturnRandom' not found.\"\n}\n\n# Invoke the method\n$Result = $Method.Invoke($null, $null)\n\n# Display the result\n$Result\n</code></pre> <p></p> <p>One way to prevent that is by implementing a method that checks for reflection usage and throws an error once detected. This method can be called at the beginning of any method that you want to protect against reflection-based access.</p> <p></p> <pre><code>using System;\nusing System.Diagnostics;\nusing System.Linq;\n\n#nullable enable\n\nnamespace HardenWindowsSecurity\n{\n    public static class ReflectionGuard\n    {\n        public static void EnsureNotCalledFromReflection()\n        {\n            System.Diagnostics.StackTrace? stackTrace = new System.Diagnostics.StackTrace();\n            System.Diagnostics.StackFrame[]? frames = stackTrace.GetFrames();\n\n            if (frames == null) return;\n\n            foreach (StackFrame frame in frames)\n            {\n                var method = frame.GetMethod();\n                if (method!.DeclaringType != null &amp;&amp;\n                    (method.DeclaringType.FullName?.StartsWith(\"System.Reflection\", StringComparison.OrdinalIgnoreCase) == true ||\n                     method.DeclaringType.FullName?.StartsWith(\"Microsoft.PowerShell\", StringComparison.OrdinalIgnoreCase) == true))\n                {\n                    throw new InvalidOperationException(\"Access denied: This method cannot be called via reflection.\");\n                }\n            }\n        }\n    }\n}\n</code></pre> <p></p> <p>Then you will implement it like this</p> <pre><code>namespace HardenWindowsSecurity\n{\n    internal sealed class Test\n    {\n        private static string ReturnRandom()\n        {\n            HardenWindowsSecurity.ReflectionGuard.EnsureNotCalledFromReflection();\n            return \"Random!\";\n        }\n    }\n}\n</code></pre> <p>And now if you attempt the same reflection based invocation of the private method, you will get an error.</p> <p></p>"},{"location":"PowerShell/How%20To%20Use%20Reflection%20And%20To%20Protect%20against%20using%20internal%20%26%20private%20C%23%20methods%20in%20PowerShell/#how-the-reflection-guard-method-works","title":"How the Reflection Guard Method Works","text":"<ul> <li> <p>Call Stack Inspection: The System.Diagnostics.StackTrace class provides a way to examine the call stack at runtime. The call stack is essentially a history of method calls leading to the current point in execution. By analyzing this stack, you can determine how a particular method was reached.</p> </li> <li> <p>Reflection Detection: The StackTrace.GetFrames() method returns an array of StackFrame objects, each representing a method call in the stack. By iterating over these frames, you can inspect the DeclaringType of each method in the stack. If any method in the call stack belongs to the <code>System.Reflection</code> namespace (or any other namespace associated with reflection or dynamic invocation, like <code>Microsoft.PowerShell</code>), it's a strong indication that the current method was called via reflection.</p> </li> <li> <p>Throwing an Exception: If reflection usage is detected, the method throws an InvalidOperationException, effectively stopping execution and signaling that reflection-based access is not permitted. This mechanism ensures that methods can only be called through regular, direct code paths, enforcing the intended encapsulation and access control.</p> </li> </ul> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/","title":"PowerShell Best Practices To Follow When Coding","text":"<p>It is important to follow best practices when coding in PowerShell to ensure that your codes are efficient, maintainable, and secure.</p> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#specify-the-variable-types-explicitly","title":"Specify The Variable Types Explicitly","text":"<p>\ud83d\udeab Don't do this <pre><code>$Var = 5\n</code></pre></p> <p>\u2705 Do this instead <pre><code>[System.Int32]$Var = 5\n</code></pre></p> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#use-full-type-names-instead-of-type-accelerators","title":"Use Full Type Names Instead of Type Accelerators","text":"<p>\ud83d\udeab Don't do this <pre><code>[String]$Var = 'Hello'\n</code></pre></p> <p>\u2705 Do this instead <pre><code>[System.String]$Var = 'Hello'\n</code></pre></p> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#use-single-quotes-instead-of-double-quotes-unless-absolutely-necessary","title":"Use Single Quotes Instead of Double Quotes Unless Absolutely Necessary","text":"<p>\ud83d\udeab Don't do this <pre><code>$Var = \"Hello\"\n</code></pre></p> <p>\u2705 Do this instead <pre><code>$Var = 'Hello'\n</code></pre></p> <p>This is because double quotes allow for string interpolation, which can be a security risk if the string is not sanitized properly and also slightly slower than single quotes.</p> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#use-full-cmdlet-names-instead-of-aliases","title":"Use Full Cmdlet Names Instead of Aliases","text":"<p>\ud83d\udeab Don't do this <pre><code>Gci\ncls\n</code></pre></p> <p>\u2705 Do this instead <pre><code>Get-ChildItem\nClear-Host\n</code></pre></p> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#use-pascal-casing-for-everything","title":"Use Pascal Casing for Everything","text":"<p>\ud83d\udeab Don't do this <pre><code>$myvariable\nget-childitem\nnew-item\n</code></pre></p> <p>\ud83d\udeab or this (camelCase)</p> <pre><code>$myVariable\nget-ChildItem\nnew-Item\n</code></pre> <p>\u2705 Do this instead <pre><code>$MyVariable\nGet-ChildItem\nNew-Item\n</code></pre></p> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#use-regions-to-organize-your-code","title":"Use Regions to Organize Your Code","text":"<p>\u2705 Using regions like this allows you to collapse and expand sections of your code for better readability.</p> <pre><code>#Region Functions\nfunction Get-MyFunction1 {\n    # Function code here\n}\nfunction Get-MyFunction2 {\n    # Function code here\n}\nfunction Get-MyFunction3 {\n    # Function code here\n}\n#EndRegion\n</code></pre> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#use-visual-studio-code-powershell-extension-for-automatic-best-practice-formatting","title":"Use Visual Studio Code PowerShell Extension For Automatic Best Practice Formatting","text":"<p>You can access the settings page of PowerShell extension in VS Code and enable options that automatically apply some of the aforementioned best practices when you format your code with (CTRL + Shift + F) shortcut.</p> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#refrain-from-defining-and-using-global-variables-as-much-as-possible","title":"Refrain From Defining and Using Global Variables as Much as Possible","text":"<p>Global variables are not recommended in general because of security implications. They can be overwritten by the user on console as well.</p> <p>If you need to define global variables, make sure you set them as constants or read-only so that they cannot be overwritten once they are defined.</p> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#use-c-if-you-need-custom-global-classes","title":"Use C# If You Need Custom Global Classes","text":"<p>If you need custom types in PowerShell and want them to be globally available to your module, It's recommended to use C# and define custom classes with specific and unique Namespace and Class names so that there won't be any possible conflicts with other classes/types that belong to 3rd party modules.</p> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#how-would-you-make-powershell-classes-globally-available","title":"How Would You Make PowerShell Classes Globally Available?","text":"<p>Even though it's not recommended, here is how you can make custom classes globally available in PowerShell. Classes will be available process-wide and therefore also in other runspaces, defining them with the <code>[NoRunspaceAffinity()]</code> attribute.</p> <ul> <li>Read more</li> </ul> <p></p> <pre><code>[NoRunspaceAffinity()]\nClass Items : System.Management.Automation.IValidateSetValuesGenerator {\n    [System.String[]] GetValidValues() {\n        $Items = ('Item1', 'Item2', 'Item3')\n        return [System.String[]]$Items\n    }\n}\n\n[NoRunspaceAffinity()]\nClass BasePolicyNames : System.Management.Automation.IValidateSetValuesGenerator {\n    [System.String[]] GetValidValues() {\n\n        [System.String[]]$BasePolicyNames = foreach ($Policy in (&amp;'C:\\Windows\\System32\\CiTool.exe' -lp -json | ConvertFrom-Json).Policies) {\n            if ($Policy.IsSystemPolicy -ne 'True') {\n                if ($Policy.PolicyID -eq $Policy.BasePolicyID) {\n                    $Policy.FriendlyName\n                }\n            }\n        }\n        return $BasePolicyNames\n    }\n}\n\n# Define the types to export with type accelerators.\n[System.Reflection.TypeInfo[]]$ExportableTypes = @(\n    [Items]\n    [BasePolicyNames]\n)\n\n# Get the non-public TypeAccelerators class for defining new accelerators.\n[System.Reflection.TypeInfo]$TypeAcceleratorsClass = [psobject].Assembly.GetType('System.Management.Automation.TypeAccelerators')\n\n# Add type accelerators for every exportable type.\n$ExistingTypeAccelerators = $TypeAcceleratorsClass::Get\n\nforeach ($Type in $ExportableTypes) {\n\n    # !! $TypeAcceleratorsClass::Add() quietly ignores attempts to redefine existing\n    # !! accelerators with different target types, so we check explicitly.\n    $Existing = $ExistingTypeAccelerators[$Type.FullName]\n\n    if (($null -ne $Existing) -and ($Existing -ne $Type)) {\n        throw \"Unable to register type accelerator [$($Type.FullName)], because it is already defined with a different type ([$Existing]).\"\n    }\n    $TypeAcceleratorsClass::Add($Type.FullName, $Type)\n}\n</code></pre> <p></p>"},{"location":"PowerShell/PowerShell%20Best%20Practices/#more-resources-from-microsoft-that-you-should-check-out","title":"More Resources From Microsoft That You Should Check Out","text":"<ul> <li>Cmdlet Development Guidelines</li> <li>Required Development Guidelines</li> <li>Strongly Encouraged Development Guidelines</li> <li>Advisory Development Guidelines</li> </ul>"},{"location":"PowerShell/Powershell%20Dynamic%20Parameters%20and%20How%20to%20Add%20Them%20to%20the%20Get-Help%20Syntax/","title":"Powershell Dynamic Parameters and How to Add Them to the Get-Help Syntax","text":"<p>PowerShell has a feature called dynamic parameters that allows you to add parameters to a cmdlet based on the value of another parameter. This is useful when you have a parameter that can take multiple values and you want to add additional parameters based on the value of the first parameter.</p> <p>Dynamic parameters also allow you to make a parameter conditionally mandatory based on different criteria.</p> <p>They are very powerful but have a downside: since they are runtime-defined, they are not displayed in the Get-Help output. This can be a problem if you want to provide help to users of your cmdlet and inform them of all of the available parameters that your cmdlet supports, including the dynamic ones.</p> <p>Usually, PowerShell developers use comment-based help inside of the cmdlet's function to provide help content to the user, however that approach doesn't allow us to control all aspects of the help content, such as the syntax. If you want to add the dynamic parameters to the Get-Help output's syntax, you will need to switch to XML-based help.</p> <p></p>"},{"location":"PowerShell/Powershell%20Dynamic%20Parameters%20and%20How%20to%20Add%20Them%20to%20the%20Get-Help%20Syntax/#platyps","title":"PlatyPS","text":"<p>PlatyPS is a module that allows you to generate XML-based help for your cmdlets. It can be used to add dynamic parameters to the Get-Help output's syntax. You will be editing a Markdown file which is convenient and the module will automatically generate the XML help file for you.</p>"},{"location":"PowerShell/Powershell%20Dynamic%20Parameters%20and%20How%20to%20Add%20Them%20to%20the%20Get-Help%20Syntax/#create-a-markdown-file-based-on-your-cmdlet","title":"Create a Markdown file Based on your Cmdlet","text":"<pre><code>New-MarkdownHelp -Command 'YourCmdletName' -OutputFolder \".\\docs\"\n</code></pre> <p>After you've created a markdown file based on your current cmdlet's parameters and details, you can start adding the dynamic parameters to it and modify the syntax, because dynamic parameters are not automatically added to it. Once you are done, you can run the following command to generate the XML help file.</p>"},{"location":"PowerShell/Powershell%20Dynamic%20Parameters%20and%20How%20to%20Add%20Them%20to%20the%20Get-Help%20Syntax/#generate-the-xml-help-file-from-the-markdown-file","title":"Generate the XML Help File from the Markdown file","text":"<pre><code>New-ExternalHelp -Path \"Path-To-Markdown-File.md\" -OutputPath \"Path-To-XML-File.xml\" -Force\n</code></pre> <p>After creating your XML-based help file, you will then have to reference it in your cmdlet's function like this</p> <pre><code>.EXTERNALHELP .\\Help\\Cmdlet-Name.xml\n</code></pre> <p>The path doesn't accept variables but it can be either relative or full path to the XML help file. Once you reference that, you can either remove all of the comment-based help from the function or keep them, the XML-based help takes precedence over the comment-based help when both types of help content are present.</p> <ul> <li>PlatyPS on GitHub</li> <li>PlatyPS on PowerShell Gallery</li> <li>PlatyPS cmdlet guides on Microsoft Learn</li> <li>How to add syntax to a cmdlet help topic</li> <li>Writing Help for PowerShell Cmdlets</li> </ul> <p></p>"},{"location":"PowerShell/RunSpaces%20In%20PowerShell/","title":"RunSpaces In PowerShell","text":"<p>The concept of Runspaces is built upon the .NET threading model, which allows PowerShell to execute multiple scripts or commands in parallel. This is achieved by creating separate instances of the PowerShell engine, each running in its own thread, thus not interfering with the primary PowerShell session or other Runspaces.</p> <p>Utilizing Runspaces effectively requires an understanding of threading and synchronization, as data sharing between threads must be handled carefully to avoid race conditions and ensure thread safety. The synchronized hashtable, as demonstrated in the provided script, is a prime example of a thread-safe data structure that facilitates communication between Runspaces.</p> <p></p>"},{"location":"PowerShell/RunSpaces%20In%20PowerShell/#how-to-create-runspace-and-powershell-instance-and-reuse-them","title":"How To Create RunSpace and PowerShell Instance and Reuse Them","text":"<pre><code># Display the number of the runspaces before operation\n(Get-Runspace).count\n\n# Create a synchronized hashtable for inter-runspace communication\n$SyncHash = [System.Collections.Hashtable]::Synchronized(@{})\n\n# Create a new runspace\n$GUIRunSpace = [System.Management.Automation.RunSpaces.RunSpaceFactory]::CreateRunSpace()\n$GUIRunSpace.ApartmentState = 'STA'\n$GUIRunSpace.ThreadOptions = 'ReuseThread'\n\n# Create a new PowerShell object\n$GUIPowerShell = [System.Management.Automation.PowerShell]::Create()\n# Assign the runspace to the PowerShell object's Runspace property\n$GUIPowerShell.RunSpace = $GUIRunSpace\n# Open the runspace\n$GUIRunSpace.Open()\n\n# Make the synchronized hashtable available in the runspace\n$GUIRunSpace.SessionStateProxy.SetVariable('SyncHash', $SyncHash)\n\n# Add a script to the PowerShell object so that it can run inside the runspace\n[System.Void]$GUIPowerShell.AddScript({\n        Write-Output -InputObject '1st output'\n    })\n\n# Invoke the PowerShell object asynchronously and store the resulting handle in a variable\n$GUIAsyncObject = $GUIPowerShell.BeginInvoke()\n\n# End the asynchronous operation and display the output\n$GUIPowerShell.EndInvoke($GUIAsyncObject)\n\n# Add another script to the PowerShell object to run, replacing the previous script added to the object.\n# The runspace is still open\n[System.Void]$GUIPowerShell.AddScript({\n        Write-Output -InputObject '2nd output'\n    })\n\n# Again invoke the PowerShell object asynchronously and store the resulting handle in a variable\n$GUIAsyncObject = $GUIPowerShell.BeginInvoke()\n\n# End the asynchronous operation and display the output\n$GUIPowerShell.EndInvoke($GUIAsyncObject)\n\n# Close and dispose of the runspace and PowerShell object\n$GUIPowerShell.Dispose()\n$GUIRunSpace.Close()\n$GUIRunSpace.Dispose()\n\n# Display the number of the runspaces after operation\n(Get-Runspace).count\n</code></pre>"},{"location":"PowerShell/RunSpaces%20In%20PowerShell/#how-to-handle-runspace-events-asynchronously-from-the-parent-runspace","title":"How To Handle RunSpace Events Asynchronously From The Parent RunSpace","text":"<p>This example demonstrates how to create a runspace that runs a GUI thread asynchronously and based on the events happening in the GUI thread, different actions are taken in the parent thread. The parent thread is responsible for handling the events generated by the GUI thread, such as button clicks, window closures, and errors. At the end of the operation, the runspace is closed and disposed of, ensuring no leftover runspaces or jobs.</p> <ul> <li>PSEventManager.GenerateEvent Method</li> <li>Register-EngineEvent</li> <li>Get-Event</li> </ul> <p></p> <pre><code># Get the count of the RunSpaces before the operation to compare it with the count after the operation\n(Get-Runspace).count\n\n# Creating a synchronized hashtable to store shared data between the two runspaces\n$SyncedHashtable = [System.Collections.Hashtable]::Synchronized(@{})\n\n# Define the XAML code for WPF GUI\n$SyncedHashtable.XAML = [System.Xml.XmlDocument]@'\n&lt;Window xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\nMaxWidth=\"600\" WindowStartupLocation=\"CenterScreen\" SizeToContent=\"WidthAndHeight\"&gt;\n&lt;Button Name=\"Button1\" Content=\"Press Me\"/&gt;\n&lt;/Window&gt;\n'@\n\n# Assigning the parent runspace's host to the $SyncedHashtable.Host property.\n# It will be used to detect or rather, refer back to the parent runspace from inside of the GUI runspace.\n# This is crucial for the event communication between the two runspaces.\n$SyncedHashtable.Host = $Host\n\n$RunSpace = [System.Management.Automation.RunSpaces.RunSpaceFactory]::CreateRunspace()\n$RunSpace.ApartmentState = 'STA'\n$RunSpace.ThreadOptions = 'ReuseThread'\n\n$RunSpace.Open()\n$RunSpace.SessionStateProxy.SetVariable('SyncedHashtable', $SyncedHashtable)\n\n$PowerShell = [System.Management.Automation.PowerShell]::Create()\n$PowerShell.Runspace = $RunSpace\n\n[System.Void]$PowerShell.AddScript({\n\n        try {\n            # Add the required assembly for WPF\n            Add-Type -AssemblyName PresentationFramework\n\n            $Reader = New-Object -TypeName 'System.Xml.XmlNodeReader' -ArgumentList $SyncedHashtable.XAML\n            $SyncedHashtable.Window = [System.Windows.Markup.XamlReader]::Load( $Reader )\n\n            # Find the button object in the XAML\n            [System.Windows.Controls.Button]$SyncedHashtable.Button1 = $SyncedHashtable.Window.FindName('Button1')\n\n            # Add a click event to the button\n            $SyncedHashtable.Button1.Add_Click({\n                    $SyncedHashtable.Host.Runspace.Events.GenerateEvent('Button1Clicked', $null, 'Button Click Event', $null)\n                })\n\n            # Add a closed event to the window\n            $SyncedHashtable.Window.Add_Closed({\n                    $SyncedHashtable.Host.Runspace.Events.GenerateEvent('WindowClosed', $null, 'Sender', $null)\n                })\n\n            # Throw a dummy error to test the async error handling\n            # throw 'Test Error'\n\n            # Show the GUI\n            $SyncedHashtable.Window.ShowDialog()\n        }\n        catch {\n            $SyncedHashtable.ErrorMessage = $_.Exception.Message\n            $SyncedHashtable.Host.Runspace.Events.GenerateEvent('ErrorsOccurred', $null, $null, $null)\n        }\n    })\n\n# Start the GUI PowerShell instance asynchronously\n$AsyncHandle = $PowerShell.BeginInvoke()\n\n# You can inspect the events that the 'Register-EngineEvent' cmdlet receives here\n# $Button1ClickedEvent = Get-Event -SourceIdentifier 'Button1Clicked'\n# $WindowClosedEvent = Get-Event -SourceIdentifier 'WindowClosed'\n# $ErrorsOccurredEvent = Get-Event -SourceIdentifier 'ErrorsOccurred'\n\n# Register an event for the button click\n$Button1ClickedSub = Register-EngineEvent -SourceIdentifier 'Button1Clicked' -Action {\n    param (\n        $Sender\n    )\n    Write-Host -Object $Sender\n}\n\n# Register an event for the window closure\n$WindowClosedSub = Register-EngineEvent -SourceIdentifier 'WindowClosed' -Action {\n    param (\n        $Sender\n    )\n    Write-Host -Object 'The GUI has been closed.'\n\n    # Remove the event subscription and the job for the button click event since the GUI Windows was closed\n    Unregister-Event -SubscriptionId $Button1ClickedSub.Id\n    Remove-Job -InstanceId $Button1ClickedSub.InstanceId\n\n    # Remove the event subscription and the job for the errors occurred event since the GUI Windows was closed\n    Unregister-Event -SubscriptionId $ErrorsOccurredSub.Id\n    Remove-Job -InstanceId $ErrorsOccurredSub.InstanceId\n\n    # Close the runspace and dispose of it\n    $RunSpace.Close()\n    $RunSpace.dispose()\n\n    # Remove the event subscription and the job of the current event subscription\n    Unregister-Event -SubscriptionId $WindowClosedSub.Id\n    Remove-Job -InstanceId $WindowClosedSub.InstanceId\n}\n\n# Register an event for the errors occurred in the GUI RunSpace\n$ErrorsOccurredSub = Register-EngineEvent -SourceIdentifier 'ErrorsOccurred' -Action {\n    Write-Host -Object \"Errors Occurred: $($SyncedHashtable.errorMessage)\"\n}\n\n# Get the count of the runspaces after the operation to see there is no leftover runspace\n(Get-Runspace).count\n\n# There won't be any leftover jobs or event subscriptions once the GUI window is closed\n# Get-EventSubscriber\n# Get-Job\n</code></pre>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/","title":"Application Control (WDAC) Frequently Asked Questions (FAQs)","text":""},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#whats-the-difference-between-application-control-policies-and-an-antivirus","title":"What's The Difference Between Application Control Policies And An Antivirus?","text":"<p>Application Control policies are based on whitelisting strategy, meaning everything is blocked by default unless explicitly allowed. Antiviruses on the other hand are based on blacklisting strategy, meaning everything is allowed by default unless explicitly blocked.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#how-does-app-control-in-the-os-compare-to-3rd-party-solutions","title":"How Does App Control In The OS Compare To 3rd Party Solutions?","text":"<p>App Control which is built deep inside of the OS kernel doesn\u2019t need any \u201cagents\u201d to be installed, that means it can\u2019t be killed using techniques used against 3rd party solutions, it also doesn\u2019t increase the attack surface of the system. It\u2019s native and exceedingly fast which makes it transparent to the user.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#can-i-use-microsoft-defender-for-endpoint-mde-to-collect-app-control-logs","title":"Can I Use Microsoft Defender For Endpoint (MDE) To Collect App Control Logs?","text":"<p>Yes. MDE Should definitely be used to manage your endpoints and collect Code Integrity logs used to create App Control policies. They provide very detailed CI info at scale for your entire fleet of machines. Then Intune can be used for at scale deployment of the policies after creation.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#can-supplemental-policies-have-deny-rules","title":"Can Supplemental Policies Have Deny Rules?","text":"<p>No, Supplemental policies are only used to expand a base policy by allowing more files.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#how-can-i-make-my-app-control-policy-tamper-proof","title":"How Can I Make My App Control Policy Tamper Proof?","text":"<p>If you cryptographically sign and deploy your App Control policy, it will be tamper-proof and even the system administrator won't be able to remove it without the certificate's private keys \ud83d\udd11.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#how-do-enterprises-and-businesses-use-app-control","title":"How Do Enterprises And Businesses Use App Control?","text":"<p>Businesses and Enterprises have a variety of options. They can set Intune as Managed Installer so any application pushed by the administrator to the endpoints will be trusted and installed but the users won't be able to install new applications on their own.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#how-many-app-control-policies-can-be-deployed-on-a-system","title":"How Many App Control Policies Can Be Deployed On a System?","text":"<p>There is no limit on how many App Control policies you can deploy on a system.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#what-is-isg-and-how-can-i-use-it-in-an-app-control-policy","title":"What Is ISG And How Can I Use It In An App Control Policy?","text":"<p>ISG stands for The Intelligent Security Graph. It's a very powerful AI-based system that processes Trillions of signals from all kinds of data sources every day. You can utilize it as the arbiter in App Control policies so it can help you allow trusted apps and block unknown or malicious apps automatically.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#what-is-smart-app-control","title":"What Is Smart App Control?","text":"<p>Smart App Control is an automated AI-based Application Control mechanism that uses the same underlying components as App Control for Business. It can be used in all Windows editions and provides great level of security by default for all systems it's enabled on.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#what-is-the-most-secure-level-to-use-for-authorizing-files","title":"What Is The Most Secure Level To Use For Authorizing Files?","text":"<p>For signed files, you should always use <code>WHQLFilePublisher</code> as main level and <code>FilePublisher</code> as fallback. For unsigned files, use <code>Hash</code> level.</p> <p></p>"},{"location":"WDAC/Application%20Control%20WDAC%20Frequently%20Asked%20Questions%20FAQs/#is-there-a-more-automated-way-to-use-application-control-at-scale","title":"Is There A More Automated Way To Use Application Control At Scale?","text":"<p>Yes. Microsoft Defender for Cloud's adaptive application controls enhance your security with this data-driven, intelligent automated solution that defines allowlists of known-safe applications for your machines. It uses Machine Learning models and is based on the collected telemetry data.</p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/","title":"EKUs in App Control for Business Policies","text":""},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#introduction","title":"Introduction","text":"<p>EKU stands for Extended Key Usage, which is an extension of X.509 certificates that delineates the functions for which the public key of the certificate can be employed. EKUs are designated by Object Identifiers (OIDs), which are sequences of digits that distinctly characterize a kind of usage.</p> <p>The EKUs extension can be either critical or non-critical. If the extension is critical, it implies that the certificate must be utilized solely for the functions indicated by the EKUs. If the extension is non-critical, it implies that the certificate can be employed for other functions as well, provided that they are not prohibited by other extensions or policies.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#a-detailed-analysis-of-object-identifiers-and-their-usage","title":"A Detailed Analysis of Object Identifiers and Their Usage","text":"<p>Let's consider <code>1.3.6.1.4.1.311.61.4.1</code> as an example which is an OID accountable for ELAM EKU. An Object Identifier (OID) is a method of denominating distinguishing objects in a hierarchical fashion. OIDs are frequently employed in cryptography, security, and networking protocols to indicate various kinds of data or algorithms.</p> <p>Each cluster of digits in an OID is termed an arc. The arcs are separated by dots and constitute a tree structure. The first arc is the root of the tree, and the last arc is the leaf. The arcs in between are denoted as nodes. Each arc has a designation and a numeral, which are allocated by different authorities or standards organizations.</p> <ul> <li><code>1</code>: This is the root arc, and it is attributed to the International Organization for Standardization (ISO).</li> <li><code>3</code>: This signifies that the object pertains to the identified-organization branch of the ISO tree, which encompasses OIDs attributed to various organizations.</li> <li><code>6</code>: This is the third arc, and it is attributed to the US Department of Defense (DoD), which is the executive branch department accountable for the military and national security of the United States.</li> <li><code>1</code>: This is the fourth arc, signifies that the object pertains to the internet sub-branch, which encompasses OIDs pertaining to internet protocols and standards.</li> <li><code>4</code>: This is the fifth arc, signifies that the object pertains to the private sub-branch, which encompasses OIDs allocated to private enterprises and organizations.</li> <li><code>1</code>: This signifies that the object pertains to the enterprise sub-branch, which encompasses OIDs assigned to specific enterprises by IANA (Internet Assigned Numbers Authority). Each enterprise can devise its own sub-tree under its assigned OID.</li> <li><code>311</code>: This is the Microsoft arc, which is employed for Microsoft-specific purposes.</li> <li><code>61</code>: This is the Windows System Component Verification arc, which is employed for Windows system components that necessitate special verification.</li> <li><code>4.1</code>: This is the Early Launch EKU arc, which is employed for the Extended Key Usage (EKU) of Early Launch Anti-Malware (ELAM) drivers. ELAM drivers are special drivers that can load prior to other drivers and verify their integrity and signatures. They are mandated to be signed by Microsoft and have a certificate that contains this EKU.</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#ekus-in-app-control-policies","title":"EKUs in App Control Policies","text":"<p>EKUs are employed in App Control policies to indicate the functions for which a certificate can be employed. Consider EKUs as a whitelist of permitted functions. If a certificate does not encompass any of the EKUs indicated in the App Control policy, it will be discarded. They can be employed to confine the range of a certificate to a specific function.</p> <p>For instance, if a certificate is issued to an individual or an organization solely for code signing functions, it cannot be employed for high-value operations such as Early Launch AntiMalware (ELAM) driver signing. To have the capacity to sign ELAM drivers, the certificate must encompass the ELAM EKU which is only attained by fulfilling specific requirements demonstrated by Microsoft.</p> <p>We can readily verify this in the subsequent example. Let's assume you have deployed the DefaultWindows template policy on a machine, and now you want to enable a 3rd party application such as OBS to be allowed to run. You create a supplemental policy by scanning the components of the OBS software. If we now open the generated XML file, we can observe that there are signer rules in there.</p> <p></p> <p></p> <p></p> <p></p> <p>And if we open the properties of one of those signed files, we can observe that they are signed by a certificate that was issued to an individual for Code Signing function only.</p> <p></p> <p></p> <p></p> <p></p> <p>If we append an EKU that is not supported by this certificate, such as ELAM, to one of the signer rules in the supplemental policy, the OBS software will no longer be permitted by the Code Integrity to run because the certificate the components of the OBS software are signed with does not encompass the ELAM EKU.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#how-to-obtain-the-oid-of-an-eku-by-knowing-its-friendly-name-and-vice-versa","title":"How to Obtain the OID of an EKU by Knowing Its Friendly Name and Vice Versa","text":"<p>If you know the OID or the friendly name of an EKU, you can readily obtain the other one by using the following PowerShell command</p> <pre><code>[Security.Cryptography.Oid]::new($OIDOrFriendlyName)\n</code></pre> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#how-to-convert-an-oid-to-hexadecimal-format-for-app-control-policies","title":"How to Convert an OID to Hexadecimal Format for App Control Policies","text":"<p>In an App Control Policy XML file, each EKU must be defined in the <code>EKUs</code> node. For each EKU, there are 3 available attributes, 2 of which are mandatory and 1 is optional. The mandatory attributes are <code>ID</code> and <code>Value</code>, and the optional attribute is <code>FriendlyName</code>.</p> <ul> <li>The <code>ID</code> attribute is a unique identifier for the EKU and should begin with <code>ID_EKU_</code>.</li> <li>The <code>Value</code> attribute is the hexadecimal representation of the OID of the EKU.</li> <li>The <code>FriendlyName</code> attribute is a human-readable name for the EKU.</li> </ul>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#we-can-convert-the-oid-of-an-eku-to-its-hexadecimal-representation-by-using-the-following-powershell-function","title":"We can convert the OID of an EKU to its hexadecimal representation by using the following PowerShell function:","text":"<pre><code># Import the System.Formats.Asn1 namespaces\nusing namespace System.Formats.Asn1\nFunction Convert-OIDToHex {\n  [CmdletBinding()]\n  Param (\n    [Parameter(Mandatory = $true, ValueFromPipeline = $true)]\n    [ValidateNotNullOrEmpty()][System.String]$OID\n  )\n  &lt;#\n.SYNOPSIS\n  Converts an OID to a hexadecimal string\n.PARAMETER OID\n  The OID to convert\n.EXAMPLE\n  Convert-OIDToHex -OID '1.3.6.1.4.1.311.10.3.5'\n.INPUTS\n  System.String\n.OUTPUTS\n  System.String\n  #&gt;\n\n  # Create an AsnWriter object with the default encoding rules\n  [AsnWriter]$AsnWriter = New-Object -TypeName AsnWriter -ArgumentList ([AsnEncodingRules]::BER)\n  # Write the OID as an ObjectIdentifier\n  $AsnWriter.WriteObjectIdentifier(\"$OID\")\n  # Get the encoded bytes as an array\n  [System.Byte[]]$NumArray = $AsnWriter.Encode()\n  # Check if the first byte is 6, otherwise throw an exception\n  if ($NumArray[0] -ne 6) {\n    throw 'Invalid OID encoding'\n  }\n  # Change the first byte to 1\n  $NumArray[0] = 1\n  # Create a StringBuilder to store the hexadecimal value\n  [System.Text.StringBuilder]$StringBuilder = New-Object -TypeName System.Text.StringBuilder -ArgumentList ($NumArray.Length * 2)\n\n  # Loop through the bytes and append them as hex strings\n  for ($Index = 0; $Index -lt $NumArray.Length; $Index++) {\n    # Convert each byte to a two-digit hexadecimal string using the invariant culture\n    # The invariant culture is a culture that is culture-insensitive and independent of the system settings\n    # This ensures that the hexadecimal string is consistent across different locales and platforms\n    # The 'X2' format specifier indicates that the byte should be padded with a leading zero if necessary\n    # The ToString method returns the hexadecimal string representation of the byte\n    [System.String]$Hex = $NumArray[$Index].ToString('X2', [System.Globalization.CultureInfo]::InvariantCulture)\n    # Append the hexadecimal string to the StringBuilder object\n    # The StringBuilder class provides a mutable string buffer that can efficiently concatenate strings\n    # The Out-Null cmdlet suppresses the output of the Append method, which returns the StringBuilder object itself\n    $StringBuilder.Append($Hex) | Out-Null\n  }\n\n  # Return the hexadecimal value as string\n  return [System.String]$StringBuilder.ToString().Trim()\n}\n</code></pre> <ul> <li>OBJECT IDENTIFIER</li> <li>System.Formats.Asn1 Namespace</li> <li>AsnWriter Class</li> </ul>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#how-to-convert-the-hexadecimal-format-to-an-oid-for-app-control-policies","title":"How to Convert the Hexadecimal Format to an OID for App Control Policies","text":"<p>The following PowerShell function does the exact opposite of the previous function. It converts the hexadecimal representation of an OID to the OID itself.</p> <pre><code># Import the System.Formats.Asn1 namespaces\n# This allows you to use the AsnReader and AsnWriter classes\nusing namespace System.Formats.Asn1\n\nFunction Convert-HexToOID {\n  [CmdletBinding()]\n  [OutputType([System.String])]\n  Param (\n    [Parameter(Mandatory = $true, ValueFromPipeline = $true)]\n    [ValidateNotNullOrEmpty()][System.String]$Hex\n  )\n  &lt;#\n.SYNOPSIS\n  Converts a hexadecimal string to an OID\n.DESCRIPTION\n  Used for converting hexadecimal values found in the EKU sections of the App Control policies to their respective OIDs.\n.PARAMETER Hex\n  The hexadecimal string to convert to an OID\n.EXAMPLE\n  Convert-HexToOID -Hex '010a2b0601040182374c0301'\n\n  Returns '1.3.6.1.4.1.311.76.3.1'\n.INPUTS\n  System.String\n.OUTPUTS\n  System.String\n  #&gt;\n\n  begin {\n    # Convert the hexadecimal string to a byte array by looping through the string in pairs of two characters\n    # and converting each pair to a byte using the base 16 (hexadecimal) system\n    [System.Byte[]]$NumArray = for ($Index = 0; $Index -lt $Hex.Length; $Index += 2) {\n      [System.Convert]::ToByte($Hex.Substring($Index, 2), 16)\n    }\n  }\n\n  process {\n    # Change the first byte from 1 to 6 because the hexadecimal string is missing the tag and length bytes\n    # that are required for the ASN.1 encoding of an OID\n    # The tag byte indicates the type of the data, and for an OID it is 6\n    # The length byte indicates the number of bytes that follow the tag byte\n    # and for this example it is 10 (0A in hexadecimal)\n    $NumArray[0] = 6\n\n    # Create an AsnReader object with the default encoding rules\n    # This is a class that can read the ASN.1 BER, CER, and DER data formats\n    # BER (Basic Encoding Rules) is the most flexible and widely used encoding rule\n    # CER (Canonical Encoding Rules) is a subset of BER that ensures a unique encoding\n    # DER (Distinguished Encoding Rules) is a subset of CER that ensures a deterministic encoding\n    # The AsnReader object takes the byte array as input and the encoding rule as an argument\n    [AsnReader]$AsnReader = New-Object -TypeName AsnReader -ArgumentList ($NumArray, [AsnEncodingRules]::BER)\n\n    # Read the OID as an ObjectIdentifier\n    # This is a method of the AsnReader class that returns the OID as a string\n    # The first two numbers are derived from the first byte of the encoded data\n    # The rest of the numbers are derived from the subsequent bytes using a base 128 (variable-length) system\n    [System.String]$OID = $AsnReader.ReadObjectIdentifier()\n  }\n\n  End {\n    # Return the OID value as string\n    return $OID\n  }\n}\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#common-ekus-in-app-control-policies","title":"Common EKUs in App Control Policies","text":"<pre><code>&lt;EKU ID=\"ID_EKU_WINDOWS\" FriendlyName=\"Windows System Component Verification - 1.3.6.1.4.1.311.10.3.6\" Value=\"010A2B0601040182370A0306\" /&gt;\n&lt;EKU ID=\"ID_EKU_WHQL\" FriendlyName=\"Windows Hardware Quality Labs (WHQL) - 1.3.6.1.4.1.311.10.3.5\" Value=\"010A2B0601040182370A0305\" /&gt;\n&lt;EKU ID=\"ID_EKU_ELAM\" FriendlyName=\"Early Launch Anti Malware - 1.3.6.1.4.1.311.61.4.1\" Value=\"010A2B0601040182373D0401\" /&gt;\n&lt;EKU ID=\"ID_EKU_HAL_EXT\" FriendlyName=\"HAL Extension - 1.3.6.1.4.1.311.61.5.1\" Value=\"010A2B0601040182373D0501\" /&gt;\n&lt;EKU ID=\"ID_EKU_RT_EXT\" FriendlyName=\"Windows RT - 1.3.6.1.4.1.311.10.3.21\" Value=\"010a2b0601040182370a0315\" /&gt;\n&lt;EKU ID=\"ID_EKU_STORE\" FriendlyName=\"Windows Store - 1.3.6.1.4.1.311.76.3.1\" Value=\"010a2b0601040182374c0301\" /&gt;\n&lt;EKU ID=\"ID_EKU_DCODEGEN\" FriendlyName=\"Dynamic Code Generation - 1.3.6.1.4.1.311.76.5.1\" Value=\"010A2B0601040182374C0501\" /&gt;\n&lt;EKU ID=\"ID_EKU_AM\" FriendlyName=\"AntiMalware - 1.3.6.1.4.1.311.76.11.1\" Value=\"010a2b0601040182374c0b01\" /&gt;\n&lt;EKU ID=\"ID_EKU_IUM\" FriendlyName=\"Isolated User Mode - 1.3.6.1.4.1.311.10.3.37\" Value=\"010A2B0601040182370A0325\" /&gt;\n</code></pre>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#oids-for-common-microsoft-ekus","title":"OIDs for Common Microsoft EKUs","text":"<ul> <li>Microsoft OIDs start with <code>1.3.6.1.4.1.311</code></li> <li>Protected Process Light Verification: <code>1.3.6.1.4.1.311.10.3.22</code></li> <li>Windows TCB Component: <code>1.3.6.1.4.1.311.10.3.23</code></li> <li>Code Signing OID (generic): <code>1.3.6.1.5.5.7.3.3</code></li> </ul>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#how-ekus-are-used-by-the-app-control-engine-for-validation","title":"How EKUs Are Used by the App Control Engine for Validation","text":"<p>Regarding the incorporation of EKUs in file validation, App Control verifies that the file's leaf certificate (File's signer) possesses identical EKUs as the signer element's EKUs. Regardless of whether the Signer's CertRoot (TBS value) and name (CN of the certificate) match with file's root, intermediate or leaf certificates, the EKUs only need to match with the leaf certificate.</p> <p>For example, in the Default Windows template policy, the <code>Kernel32.dll</code> is authorized by the following signer:</p> <pre><code>&lt;Signer ID=\"ID_SIGNER_WINDOWS_PRODUCTION\" Name=\"Microsoft Product Root 2010 Windows EKU\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"06\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WINDOWS\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <ul> <li> <p><code>Microsoft Product Root 2010 Windows EKU</code>: Matches the common name of the file's root certificate (<code>Microsoft Root Certificate Authority 2010</code>) through well known roots.</p> </li> <li> <p><code>CertRoot</code>: Matches the TBS and Common name of the file's root certificate using well known roots.</p> </li> <li> <p><code>CertEKU</code>: Only requires the file's signer, the leaf certificate, to have an EKU with the OID of <code>1.3.6.1.4.1.311.10.3.6</code>.</p> </li> </ul> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#you-can-see-the-details-in-the-screenshots-below","title":"You can see the details in the screenshots below","text":""},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#the-placement-of-the-certeku-elements","title":"The Placement of the CertEKU Elements","text":"<p>In every Signer, the <code>CertEKU</code> node should only be placed directly after <code>CertRoot</code>. It is against the Code Integrity schema for any other nodes to exist between them. Below is a example of such configuration</p> <pre><code>&lt;Signer ID=\"ID_SIGNER_F_1\" Name=\"Microsoft Windows Production PCA 2011\"&gt;\n  &lt;CertRoot Type=\"TBS\" Value=\"TBS Hash\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WINDOWS\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_RT_EXT\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_ELAM\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n  &lt;CertPublisher Value=\"Microsoft Windows\" /&gt;\n  &lt;FileAttribRef RuleID=\"ID_FILEATTRIB_F_1\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#continue-reading","title":"Continue Reading","text":"<ul> <li>AppControl Manager</li> <li>App Control Policy for BYOVD Kernel Mode Only Protection</li> <li>WDAC Notes</li> </ul>"},{"location":"WDAC/Fast%20and%20Automatic%20Microsoft%20Recommended%20Driver%20Block%20Rules%20updates/","title":"Fast and Automatic Microsoft Recommended Driver Block Rules updates","text":"<p>The blocklist is updated with each new major release of Windows, typically 1-2 times per year, but you can deploy the recommended driver block rules policy more frequently.</p> <p>This is the GitHub source for the XML content shown on the Microsoft document website. You can see when the last time it was changed was, read the change history and commit messages.</p> <p>Use the AppControl Manager to automate the required steps explained on the document to download and deploy the recommended driver block rules.</p> <p></p> <p></p> <p></p> <p>The Auto Update button in the Create Policy page creates a scheduled task in Windows that will automatically run every 7 days to keep the block list up to date.</p> <p></p> <p>Note</p> <p>Microsoft recommended driver block rules that are enforced as a result of using either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode, are saved in a file called <code>driversipolicy.p7b</code> in the <code>%windir%\\system32\\CodeIntegrity</code> directory.</p> <p>The file you download from Microsoft document is called <code>SiPolicy.p7b</code> and it won't overwrite the <code>driversipolicy.p7b</code> once deployed. It will work side-by-side the default block rules and will be enforced as well. They are both explicit deny base policies.</p> <p></p>"},{"location":"WDAC/How%20To%20Create%20an%20App%20Control%20Supplemental%20Policy/","title":"How To Create an App Control Supplemental Policy","text":"<p>On a system where Application Control is enforced, it is common to have a single main base policy and multiple supplemental policies. The base policy contains the core rules that are needed to allow the system to function properly. Base policies that have the <code>Enabled:Allow Supplemental Policies</code> rule option can be extended with supplemental policies.</p> <p>The supplemental policies are used to add additional rules that are specific to certain applications or scenarios. Supplemental policies can be used to expand the scope of a base policy without modifying the base policy itself. This allows you to create a base policy that is shared across multiple devices and then create supplemental policies that are specific to individual devices or groups of devices.</p> <p>You can have as many supplemental policies as you need, but each supplemental policy can only be associated with one base policy.</p> <p>Tip</p> <p>How to differentiate between base and supplemental policies:</p> <p>The values of <code>PolicyID</code> and <code>BasePolicyID</code> fields in a base policy are the same, but in a supplemental policy, the <code>BasePolicyID</code> field contains the <code>PolicyID</code> of the base policy it is associated with.</p> <p>There are other signs that indicate if a policy is a base or supplemental policy. A supplemental policy can only contain allow rules. A supplemental policy can only have a subset of the rule options.</p> <p>Use the System Information page in the AppControl Manager to view all of the deployed policies and see which ones are base or supplemental.</p> <p>When it comes to signing, if the base policy is signed, then the supplemental policy must be signed too and vise versa.</p> <p></p>"},{"location":"WDAC/How%20To%20Create%20an%20App%20Control%20Supplemental%20Policy/#create-a-supplemental-policy-by-scanning-files-and-folders","title":"Create a Supplemental Policy By Scanning Files and Folders","text":"<p>Assuming you've already deployed a base policy, you can create a supplemental policy by navigating to the Create Supplemental Policy Page.</p> <p>In the Files and Folders section, browse for your base policy's XML file. Enter a descriptive name for the supplemental policy that will be created and browse for files and/or folder to scan. If you select folders, they will be scanned recursively, meaning any file(s) in the sub-folder(s) will also be included in the scan.</p> <p>The default level is set to <code>File Publisher</code> but you can change it to another level that meets your needs. This level will create signature-based rules for signed files and hash based rules for unsigned files.</p> <p></p> <p></p> <p></p> <p>After you've submitted the necessary details, press the <code>Create Supplemental Policy</code> button. The scan will begin and you will be able to view the progress in real time. If you toggle the <code>Deploy After Creation</code> button, the policy will be automatically deployed on the local system, otherwise the XML file will just be created.</p> <p>You can customize the XML file further using different pages and features of the AppControl Manager.</p> <p></p>"},{"location":"WDAC/How%20To%20Create%20an%20App%20Control%20Supplemental%20Policy/#create-a-supplemental-policy-for-packaged-apps","title":"Create a Supplemental Policy for Packaged Apps","text":"<p>Packaged apps are modern, they use MSIX packages and are easy to manage and authorize in App Control policies because all of the files in a packaged app share the same signing certificate and Package Family Name.</p> <p>Use the AppControl Manager to create supplemental policies for packaged apps. The policy that you create will not need any changes when the apps are updated since the authorization is based on the <code>PackageFamilyName</code>, aka <code>PFN</code>.</p> <p>In the Create Supplemental Policy Page, navigate to the Package Family Name section.</p> <p></p> <p></p> <p></p> <p></p> <p>Select the installed apps from the list. The list is automatically populated when you first expand the Package Family Name section. If you installed or removed apps, you can use the Refresh button to update the list of apps. Use the search bar to easily find the app(s) you are looking for.</p> <p>Next enter a name for the supplemental policy and browse for the base policy that this supplemental policy will be associated with.</p> <p></p> <p></p> <p></p> <p></p> <p>Finally press the <code>Create Supplemental Policy</code> button to create the supplemental policy. If you toggle the Deploy after Creation button the policy will also be deployed on the system and you will be able to view it in the System Information page.</p> <p></p>"},{"location":"WDAC/How%20To%20Create%20an%20App%20Control%20Supplemental%20Policy/#create-a-supplemental-policy-that-allows-an-entire-folder","title":"Create a Supplemental Policy That Allows an Entire Folder","text":"<p>You can create a supplemental policy that will allow everything inside of a folder to be authorized to run. It is based on wildcard file path. This type of supplemental policy is less secure than ones that are based on file signature, publisher or hash so use it with caution.</p> <p>Navigate to the Create Supplemental Policy Page page in the AppControl Manager and select the Files and Folders section.</p> <p></p> <p></p> <p></p> <p></p> <p>Enter an appropriate policy name. Set the Scan Level to WildCard Folder Path, you will notice that the Browse for Files section is deactivated in this mode. Use the Browse for Folders button to select the folder you want to allow and finally press the Create Supplemental Policy button to create the policy. If you toggle the Deploy after Creation button, the policy will also be deployed on the system and you will be able to view it in the System Information page.</p> <p></p>"},{"location":"WDAC/How%20To%20Create%20an%20App%20Control%20Supplemental%20Policy/#faqs","title":"FAQs","text":"<p>Q: What happens if you create a supplemental policy with the same name as an existing one?</p> <p>A: Although not recommended as it will make it hard to differentiate between the two in System Information, you can create a supplemental policy with the same name as an existing one. It won't overwrite the existing one as they will still have different PolicyIDs.</p> <p></p> <p>Q: What if you create a supplemental policy for an app and then that app is updated?</p> <p>A: It all depends on the level you selected for the supplemental policy. If you selected <code>File Publisher</code> or <code>Publisher</code>, then the policy will still apply to the updated app as long as it is signed by the same publisher. If you selected <code>Hash</code>, then the policy will no longer apply to the updated app as the binaries are changed. You will have to scan the new binaries and create a new supplemental policy for them and preferably remove the old one.</p> <p></p>"},{"location":"WDAC/How%20To%20Create%20and%20Maintain%20Strict%20Kernel-Mode%20App%20Control%20Policy/","title":"How To Create and Maintain Strict Kernel-Mode App Control Policy","text":"<p>A Strict Kernel-mode App Control policy is a special kind of policy that only enforces Kernel-mode drivers without affecting user-mode files. The AppControl Manager fully supports this unique policy and allows you to create and maintain it effortlessly.</p> <p></p>"},{"location":"WDAC/How%20To%20Create%20and%20Maintain%20Strict%20Kernel-Mode%20App%20Control%20Policy/#creating-the-base-policy","title":"Creating the Base Policy","text":"<p>Navigate to the Create App Control policy page and scroll down to the <code>Create Strict Kernel-Mode Policy</code> section.</p> <p></p> <p></p> <p></p> <ul> <li> <p>Toggle the <code>Audit</code> switch. We need to deploy the base policy in Audit mode first in order to generate audit logs that we will use later.</p> </li> <li> <p>Toggle the <code>No flight root certificates</code> switch if you don't plan to use this policy on the insider builds of Windows on (Dev or Canary channels). Those builds are signed with a different certificate. Release Preview and Beta builds are signed with production certificates and they will work either way.</p> </li> <li> <p>Toggle the <code>Deploy</code> button and finally press the <code>Create</code> button. In few seconds, the policy will be created and deployed in Audit mode on the system.</p> </li> </ul> <p>Important</p> <p>Restart your computer after deploying the policy. The reason we deploy it in Audit mode is that we need audit logs to be generated for kernel-mode drivers that belong to your hardware devices so we can create a supplemental policy for them to allow them to run.</p> <p></p>"},{"location":"WDAC/How%20To%20Create%20and%20Maintain%20Strict%20Kernel-Mode%20App%20Control%20Policy/#creating-the-supplemental-policy","title":"Creating the Supplemental Policy","text":"<p>After restarting the system and relaunching the AppControl Manager, navigate to the System Information page. Press the <code>Retrieve Policies</code> button, locate the Strict kernel-mode base policy, and remove it from the system.</p> <p></p> <p></p> <p></p> <p></p> <p>Once removed, redeploy the same base policy using the Create App Control policy page, but this time ensure that Audit Mode is disabled.</p> <p></p> <p></p> <p></p> <p></p> <p>Now navigate to the Create Supplemental Policy page. Scroll down to the <code>Kernel-mode policy</code> section.</p> <p></p> <p></p> <p></p> <p></p> <p>Press the <code>Scan for Kernel-mode Logs Since Last Reboot</code> button. It will begin fetching all kernel-mode Code Integrity logs that were generated since the last reboot that belong to signed files and will display the results in a data grid that is accessible by clicking/tapping on the <code>View detected kernel-mode files</code> section.</p> <p></p> <p></p> <p></p> <p></p> <p>While reviewing the detected kernel-mode drivers, you can right-click or tap + hold on a row to open a context menu that allows you to remove the driver from the list and it will be excluded from the supplemental policy.</p> <p></p> <p></p> <p></p> <p></p> <p>After reviewing and confirming the results, return to the Supplemental Policy creation page. Locate the strict kernel-mode base policy XML file you created earlier by using the file browser. Enable the <code>Deploy After Creation</code> toggle, then click/tap the <code>Create Supplemental Policy</code> button. This will generate the Supplemental Policy and automatically deploy it to the system.</p> <p>In the future, you can follow the same steps to allow additional kernel-mode files in your base policy by creating separate Supplemental Policies as needed. Additionally, you can explore other powerful features of AppControl Manager, such as scanning the system for logs or authorizing new applications and drivers for streamlined policy management.</p> <p></p>"},{"location":"WDAC/How%20To%20Generate%20Audit%20Logs%20via%20App%20Control%20Policies/","title":"How To Generate Audit Logs via App Control Policies","text":"<p>Audit Logs are generated when a Base policy is deployed with <code>Audit Mode</code> rule option. You can configure rule options in policies via AppControl Manager's features.</p> <p>You can view all of the available rule options in the following Microsoft Learn page.</p> <p>During the Audit mode phase, no file is blocked, instead an audit log in the <code>Code Integrity/Operational</code> or <code>AppLocker</code> event logs are generated for each file that is executed on the system that would have been blocked if the policy was deployed in enforced mode.</p> <p>If the file is a <code>MSI</code> installer file or script, then <code>AppLocker</code> event is generated for it, otherwise <code>Code Integrity</code> will log that file.</p> <p>The logs can be collected by the AppControl Manager in order to create Supplemental policies. The logs can also be collected in bulk from thousands of systems by the Microsoft Defender for Endpoint Advanced Hunting and then fed to the AppControl Manager to create Supplemental policies.</p> <p></p>"},{"location":"WDAC/How%20To%20Generate%20Audit%20Logs%20via%20App%20Control%20Policies/#create-and-deploy-a-base-policy","title":"Create and Deploy a Base Policy","text":"<p>First, we have to deploy a base policy. The type of base policy we deploy will determine the kinds of audit logs that will be generated. There are 2 recommended types of base policies you can choose from for this particular scenario.</p> <ol> <li> <p>Default Windows, allows the following files and components:</p> </li> <li> <p>Windows Operating System Components</p> </li> <li> <p>Apps installed directly from the Microsoft Store</p> </li> <li> <p>Microsoft 365 apps</p> </li> <li> <p>WHQL-signed Drivers</p> </li> <li> <p>Allow Microsoft, allows the following files and components:</p> </li> <li> <p>Everything that Default Windows policy allows</p> </li> <li> <p>All files and programs signed by Microsoft's certificates.</p> </li> </ol> <p></p> <p></p> <p></p> <p>Choose one of the base policies and press the <code>Create And Deploy</code> button. After few seconds the policy will be deployed on the system.</p> <p>If you want to deploy it on remote systems via Intune, press the <code>Create</code> button instead and then use the XML file in the Intune portal for remote deployment.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20To%20Generate%20Audit%20Logs%20via%20App%20Control%20Policies/#generate-audit-event-logs-on-the-system","title":"Generate Audit Event Logs on the System","text":"<p>To generate audit event logs, start by installing or running the programs and files you want to create a Supplemental policy for. If a program or file is not permitted by the deployed policy in Audit mode, an audit log will be created for it.</p>"},{"location":"WDAC/How%20To%20Generate%20Audit%20Logs%20via%20App%20Control%20Policies/#examples","title":"Examples","text":"<ul> <li> <p>If the Default Windows policy is deployed and you install or run applications like GitHub Desktop or Visual Studio, audit logs will be generated since these programs are not permitted by the Default Windows policy.</p> </li> <li> <p>Similarly, deploying the Allow Microsoft policy and then installing a third-party application like VLC Media Player will trigger audit logs for every file executed within that program, as it is not permitted by the Allow Microsoft base policy.</p> </li> </ul> <p>Keep in mind that only files that are executed during audit mode phase generate event logs, so by simply installing a program using its installer, we can't trigger event log generation for each of the components and executables that each program has. So, after installing the programs, run them, use them a bit as you normally would so that all of the programs' components are executed and event logs generated for them.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20To%20Generate%20Audit%20Logs%20via%20App%20Control%20Policies/#scan-the-event-logs","title":"Scan the Event Logs","text":"<p>Navigate to the AppControl Manager's Event Logs page, then press the <code>Scan Logs</code> Button.</p> <p></p> <p></p> <p></p> <p>AppControl Manager will begin scanning all of the related logs in Code Integrity and AppLocker events. Blocked and Audits events will both be included. You can use various User Interface elements and features to filter the logs such as by sorting the columns, filtering based on the date and so on.</p> <p></p> <p></p> <p></p> <p>Once you're done with filtering the logs, press the <code>Create Policy</code> button's small arrow on the right. It will open a flyout with 3 options. The options are explained in this page. In this case, we need to select the middle option called <code>Base Policy File</code> and then select the <code>Browse</code> Button. A file picker dialog will open, allowing you to select the base policy XML file that you created and deployed earlier.</p> <p></p> <p></p> <p></p> <p>The <code>Create Policy</code> button's label is now changed to <code>Create Policy for Selected Base</code>. Press it and after few seconds it will create a Supplemental policy for all of the logs displayed in the page.</p> <p></p> <p></p> <p></p> <p>From the actions menu you can select to deploy the Supplemental policy after creation too, or you can modify the supplemental policy further using AppControl Manager's other pages. You can Sign the policy and make it tamper-proof or Merge it with other policies.</p> <p></p>"},{"location":"WDAC/How%20To%20Generate%20Audit%20Logs%20via%20App%20Control%20Policies/#wrapping-up","title":"Wrapping Up","text":"<p>By now, you should have a solid understanding of how to generate and work with audit logs using AppControl Manager. You've learned how to deploy base policies, trigger audit events, and scan logs to create supplemental policies.</p> <p>So go ahead start experimenting, collect those logs, and build policies that fit your environment and if you\u2019re ever unsure about the next steps, the AppControl Manager documentation is always there to help you out! Plus you can always ask any questions you might have here on GitHub discussions.</p> <p></p>"},{"location":"WDAC/How%20To%20Upload%20App%20Control%20Policies%20To%20Intune%20Using%20AppControl%20Manager/","title":"How To Upload App Control Policies To Intune Using AppControl Manager","text":"<p>The AppControl Manager provides native support for Intune, enabling effortless deployment of App Control policies to your Intune-managed devices.</p> <p>To do that, navigate to the Deploy App Control Policy page, Click the <code>Sign In</code> button. A new browser tab will open, prompting you to sign into your Entra ID account.</p> <p>Once signed in, you'll be redirected back to the AppControl Manager.</p> <p></p>"},{"location":"WDAC/How%20To%20Upload%20App%20Control%20Policies%20To%20Intune%20Using%20AppControl%20Manager/#permissions-required","title":"Permissions Required","text":"<p>To successfully complete the sign-in process and deploy policies, your account must have the following permissions, adhering to the Principle of Least Privilege:</p> <ul> <li> <p><code>Group.Read.All</code>: Allows the AppControl Manager to read security groups and display them in the dropdown list.</p> </li> <li> <p><code>DeviceManagementConfiguration.ReadWrite.All</code>: Grants the ability to create, upload, and assign App Control policies.</p> </li> </ul> <p>By ensuring these permissions are in place, you can seamlessly deploy App Control policies through Intune while maintaining secure and minimal access.</p> <p></p>"},{"location":"WDAC/How%20To%20Upload%20App%20Control%20Policies%20To%20Intune%20Using%20AppControl%20Manager/#select-policies-to-deploy","title":"Select Policies To Deploy","text":"<p>Select one or more XML files to deploy to Intune. You have the option to deploy them as-is (unsigned) or cryptographically sign them before deployment. Each XML file will be deployed as a separate Intune configuration policy for better management of policies.</p> <p>The name specified in the XML file will appear as the name of the corresponding Intune configuration policy in the Intune portal. Similarly, the policy ID from the XML file will be used as the uploaded policy's ID, enabling easy identification of policies on workstations after deployment.</p> <p>You can optionally use the <code>Refresh</code> button and select a group to assign to the policies you upload to Intune.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20To%20Upload%20App%20Control%20Policies%20To%20Intune%20Using%20AppControl%20Manager/#how-to-change-tenant","title":"How To Change Tenant?","text":"<p>If you want to change your tenant and sign into another account, press the <code>Sign Out</code> button and then use the <code>Sign In</code> button again to sign into a different tenant.</p> <p></p>"},{"location":"WDAC/How%20To%20Upload%20App%20Control%20Policies%20To%20Intune%20Using%20AppControl%20Manager/#how-to-view-the-uploaded-policies","title":"How To View The Uploaded Policies?","text":"<p>You can view the policies you deployed and uploaded In Intune in the following path:</p> <pre><code>Intune Portal | Devices | Configuration\n</code></pre> <p>You can remove any of the deployed policies in here. After removal from the Intune portal, the target device must be restarted once for the removal process to complete.</p> <p></p> <p></p>"},{"location":"WDAC/How%20To%20Upload%20App%20Control%20Policies%20To%20Intune%20Using%20AppControl%20Manager/#have-questions-or-feature-requests","title":"Have Questions or Feature Requests?","text":"<p>Feel free to create a new discussion to ask questions or request for extra features that don't currently exist in the AppControl Manager application.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20an%20App%20Control%20Deny%20Policy/","title":"How to Create an App Control Deny Policy","text":"<p>Application Control is based on whitelisting strategy, that means everything that is not allowed in the policy is automatically denied. However, there are times when you might need to only prevent a certain app or file from running, while allowing everything else. This is where the App Control Deny Policy comes in.</p> <p>Use the Create Deny Policy page in the AppControl Manager to create a new App Control Deny Policy based on different criteria.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20an%20App%20Control%20Deny%20Policy/#create-an-app-control-deny-policy-by-scanning-files-and-folders","title":"Create an App Control Deny Policy by Scanning Files and Folders","text":"<p>In the Create Deny Policy page, select the Files and Folders section to expand it.</p> <p></p> <p></p> <p></p> <p></p> <ul> <li> <p>Browse for files and/or folders that you want to be scanned and included in the Deny policy.</p> </li> <li> <p>Select an appropriate name for the Deny policy that will help you recognize it after deployment.</p> </li> <li> <p>The scalability is set to 2 by default but you can increase it if the number of files/folders are too many. The higher this number, the faster the scan will be completed and the more system resources will be consumed during the scan phase.</p> </li> </ul> <p></p> <p></p> <p></p> <p></p> <p>Having selected all of the required details, you can now press the Create Deny Policy button and wait for the scan to finish.</p> <p>All of the files and folders that you selected will be recursively scanned and any App Control compatible files that are found in them will be added to View detected file details page at the bottom of the section to show you the exact files that will be included in the deny policy.</p> <p></p> <p></p> <p></p> <p></p> <p>If you toggle the Deploy after Creation button the Deny policy will also be deployed on the system after creation.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20an%20App%20Control%20Deny%20Policy/#create-a-deny-policy-for-packaged-apps","title":"Create a Deny Policy for Packaged Apps","text":"<p>Packaged apps are modern, they use MSIX packages and are easy to manage and block/deny in App Control policies because all of the files in a packaged app share the same signing certificate and Package Family Name.</p> <p>Use the AppControl Manager to create deny policies for packaged apps. The policy that you create will not need any changes when the apps are updated since the denial is based on the <code>PackageFamilyName</code> aka <code>PFN</code>.</p> <p>In order to create this type of deny policy, navigate to the Create Deny Policy page in the AppControl Manager and expand the Package Family Name section.</p> <p></p> <p></p> <p></p> <p></p> <p>The apps list will be automatically preloaded for you upon expanding the section. You can use the search bar to search for one or more app(s) and then select them.</p> <p>Next, enter a suitable name for the Deny policy and finally press the Create Deny Policy button.</p> <p>The deny policy will be created and if you toggled the Deploy after Creation button, it will also be deployed on the system.</p> <p>In the screenshots above, we searched for the Photos app, selected it and after deploying that policy, the Photos app will no longer be able to run on the system when we try to launch it.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/","title":"How to use Windows Server to Create App Control Code Signing Certificate","text":"<p>Important</p> <p>AppControl Manager can easily and quickly generate a Code Signing certificate to be used for signing App Control policies.</p> <p>This guide is only for those who want to learn how to setup a Windows Server with Active Directory and Certification Authority roles and create their own CA.</p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#introduction","title":"Introduction","text":"<ul> <li> <p>By deploying a Signed App Control for Business policy, a system will be secure and resistant to any form of tampering (if coupled with Bitlocker and other built-in security features), in a way that even the system administrator can't tamper or disable this security policy.</p> </li> <li> <p>The only way for this security feature to be turned off, modified, updated or disabled will be to have access to the certificate's private keys used to sign it.</p> </li> <li> <p>Refer to Microsoft's website or my other wiki posts If you want to learn about App Control itself and how to create a customized App Control policy for your own environment.</p> </li> <li> <p>Always test and deploy your App Control policy in Audit mode or Unsigned mode first to make sure it works correctly, before deploying the Signed version of it.</p> <ul> <li>The AppControl Manager has a Test Mode option when creating policies that will create/deploy the policies with Boot Audit on Failure and Advanced Boot Options Menu policy rule options. You can also add those options to other policies that have already been created..</li> </ul> </li> <li> <p>Keep the xml file(s) of the deployed base policy(s) in a safe place, they are needed, along with the certificate that signed them, if you decide to disable or modify the signed deployed App Control policy later on.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#tldr-short-version","title":"TL;DR (Short version)","text":"<ol> <li>Install the latest Windows Server, Install AD/DS and AD/CS roles on it. (\u224815 mins depending on hardware and if downloaded ISO or VHDX)</li> <li>Use the Enterprise CA's code signing template to create a customized certificate template for App Control Signing (\u22485 minutes)</li> <li>Generate the certificate and use it to sign the App Control Policy (\u22483 minutes)</li> </ol> <p>That's essentially everything we have to do. So, if you are already familiar with the concepts, you can go straight to the bottom of this page and use the resources section to refer to Microsoft guides to create and deploy the Signed App Control policy.</p> <p>But if you aren't familiar, keep reading as I've thoroughly explained every step to set up Windows Server, generate signing certificate and sign the App Control policy. It takes about 20 minutes for me and depending on the hardware, it can even take less time.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#prerequisites","title":"Prerequisites","text":"<p>Latest Windows Server, it's free for 180 days for evaluation and comes in ISO and VHDX formats.</p> <ul> <li>Download Windows Server 2025 from Microsoft Evaluation Center.</li> </ul> <p>Once we have our Windows installation media (ISO or VHDX), we need to set up a Hyper-V VM on our host. For this guide, our host is a Windows 11 pro for workstations machine.</p> <p>Create a Hyper-V VM with these specifications:</p> <ul> <li>Secure Boot</li> <li>Trusted Platform Module (vTPM)</li> <li>At least 4 virtual processors</li> <li>At least 4 GB RAM</li> <li>At least ~20 GB storage</li> <li>Connect the Default Switch to the VM or create a Private Virtual switch in Virtual Switch Manager of Hyper-V manager, then add it as network adapter hardware to the VM.</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#windows-server-vm-setup","title":"Windows Server VM setup","text":"<p>After Windows Server installation has finished, you can create a Hyper-V standard checkpoint so you'll be able to restore the VM's state to this point in time if you misconfigure something later on.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#rename-the-server","title":"Rename the server","text":"<p>Choose a meaningful name, like <code>CAServer</code>. Use this PowerShell cmdlet to easily do that, it will restart the server to apply the new name.</p> <pre><code>Rename-Computer CAServer -Restart\n</code></pre> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#using-gui-install-active-directory-domain-services","title":"Using GUI: Install Active Directory Domain Services","text":"<p>From Server Manager =&gt; Add Roles and Features =&gt; Role-based or feature-based installation =&gt; Select the current server you are on =&gt; Select Active Directory Domain Services from the list =&gt; Select \"Add Features\" =&gt; Continue the rest of the steps by selecting Next.</p> <p>After installation is over, open the notifications in the Server Manager, (there will probably be a yellow icon on it), Select \"Promote this server to a domain controller\".</p> <p>In the Deployment Configuration window that will be opened, select \"Add a new forest\" and in the Root domain name, enter a domain name.</p> <p>It can be anything, even <code>Bing.com</code>, but for our usage let's use <code>CAServer.com</code>. On the next step, set a password for DSRM (Directory Services Restore Mode), It needs to have uppercase, lowercase and numbers (e.g., Bing6969), write this password down somewhere, like in Sticky notes app on your host.</p> <p>Next, choose a NetBIOS domain name, the default one will be OK. Confirm and proceed with the rest of the steps by selecting Next and at the end select Install. Wait for the installation to finish. It will restart the Server once the Installation is finished.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#using-powershell-install-active-directory-domain-services","title":"Using PowerShell: Install Active Directory Domain Services","text":"<p>Install (AD DS) role</p> <pre><code>Install-windowsfeature -name AD-Domain-Services -IncludeManagementTools\n</code></pre> <p>Install a forest and set a forest password</p> <pre><code>$password = ConvertTo-SecureString 'Bing6969' -AsPlainText -Force\n\nInstall-ADDSForest -DomainName CAServer.com -DomainNetbiosName CASERVER0 -SafeModeAdministratorPassword $password -InstallDNS:$false -Force\n</code></pre> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#using-gui-install-active-directory-certification-service-and-set-up-an-enterprise-root-ca-certificate-authority","title":"Using GUI: Install Active Directory Certification Service and set up an Enterprise root CA (Certificate Authority)","text":"<p>From Server Manager =&gt; Add Roles and Features =&gt; Role-based or feature-based installation =&gt; Select the current server we are on =&gt; Select Active Directory Certification Service =&gt; Select Next for the rest of the steps and finally select install.</p> <p>After installation is over, open the notifications in the Server Manager, (there will probably be a yellow icon on it), Select \"Configure Active Directory Certificate Service on the destination server\".</p> <p>On the newly opened configuration window, on credentials section select next, on the Role services section check the box for <code>Certification Authority</code> and select next.</p> <p>Select <code>Enterprise CA</code> (because Standalone CA does not support certificate templates that we are going to use) and select Next. On the CA Type section select <code>Root CA</code>. On the Private Key section select <code>Create a new private key</code>.</p> <p>On the Cryptography section, for Cryptographic Provider choose <code>RSA#Microsoft Software Key Storage Provider</code>, for Key length choose <code>4096</code>, for Hash Algorithm choose <code>SHA512</code> and select Next. On the CA name section select next. On the Validity Period section set validity period to something like 50 Years. Select next for the rest of the sections and finally select Configure.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#using-powershell-install-active-directory-certification-services-and-set-up-an-enterprise-root-ca","title":"Using PowerShell: Install Active Directory Certification Services and set up an Enterprise root CA","text":"<p>Install Active Directory Certificate Services</p> <pre><code>Install-WindowsFeature Adcs-Cert-Authority -IncludeAllSubFeature\n</code></pre> <p>Install a new Enterprise CA</p> <pre><code>Install-AdcsCertificationAuthority -CAType EnterpriseRootCa -CryptoProviderName \"RSA#Microsoft Software Key Storage Provider\" -KeyLength 4096 -HashAlgorithmName SHA512 -ValidityPeriod Years -ValidityPeriodUnits 50 -Force\n</code></pre> <p>Restart the server because it is required, and Server Manager says it too</p> <pre><code>Restart-Computer\n</code></pre> <p>Lastly do this so that Certification Authority option will be added to Server Manager =&gt; Tools and its GUI will become accessible and visible</p> <pre><code>Add-WindowsFeature Adcs-Cert-Authority -IncludeManagementTools\n</code></pre> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#configure-the-validity-period-of-the-issued-certificates-on-the-server","title":"Configure the Validity period of the issued certificates on the server","text":"<p>Microsoft guide for this</p> <p>We Increase the validity period of the certificates issued by the CA to 30 years:</p> <pre><code>certutil -setreg ca\\ValidityPeriod \"Years\"\ncertutil -setreg ca\\ValidityPeriodUnits \"30\"\n</code></pre> <p>Restart the Server after this step.</p> <p>You can verify and confirm the results using these commands:</p> <pre><code>certutil -getreg ca\\ValidityPeriod\ncertutil -getreg ca\\ValidityPeriodUnits\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#follow-the-official-guide-to-create-certificate-template-and-generate-the-signing-certificate","title":"Follow the official guide to create certificate template and generate the signing certificate","text":"<p>Now open Certification Authority, you can do so by searching for it in Windows search or from Server Manager =&gt; Tools. Once you open it, you can follow the guide from Microsoft to create the certificate template for App Control policy signing and then request and create a certificate.</p> <p></p> <p>Note that If the Server doesn't have at least 1 network adapter connected to it, then Certificate Templates don't load,</p> Screenshot <p>That's why our Hyper-V VM Server needs at least one Virtual Network Adapter.</p> <p></p> <p>The guide suggests using a client computer to request and create the certificate but since we are going to use the certificate for non-domain-joined computers and don't need to use the Active Directory, we can perform all of the steps on the same Windows Server VM.</p> <p>These are some optional deviations from the official guide that result in creating a successful and more secure certificate for our App Control policy signing:</p> <ul> <li> <p>On the Compatibility tab, you can select Windows Server 2016 from the Certification Authority list and select Windows 10 / Windows Server 2016 from the Certificate recipient list.</p> </li> <li> <p>On the General tab, you can set the Validity period to 30 years and Renewal period to 22 years. (The maximum allowed Renewal period for the validity period we chose.)</p> </li> <li> <p>On the Cryptography tab, you can set the Provider Category to <code>Key Storage Provider</code> (KSP). Set the Algorithm Name to <code>RSA</code>. Set the Minimum key size to <code>4096</code>. Set Request hash to <code>SHA512</code>.</p> </li> </ul> <p>As the Microsoft's guide suggests, you need to go to security tab to verify account access of the user(s) requesting the certificate, but since we are requesting and creating our certificate on the same CA server, we don't need to change anything there.</p> <p></p>  If we want to use a 2nd PC to do this, as described in Microsoft document (Totally Unnecessary)   Additional steps to perform on Windows Server   If you are going to create a new user account in \"Active Directory Users and Computers\" for use on the client VM, in Certification Authority when duplicating the certificate template, go to Security Tab and set the correct permissions for that user account so that it will be able to request and enroll the certificate.  For instance, since you are the only person who is going to use the Active Directory, you can even give `Full Control` permission to `Authenticated Users` group.  Alternatively, you can use the same administrator account that you are currently using on Windows Server, which exists by default in the Active Directory, to log into the other client computer. One can log into multiple computers with the same user account across an Active Directory domain. There is no limit by default to how many concurrent logins an active directory user can have.  Make sure the Windows Server and Windows client VMs both use the same Hyper-V Private Virtual switch network adapter. The VMs need to have static IP addresses on the same subnet in order to communicate with each other.  Go to Windows Settings =&gt; Network &amp; Internet =&gt; Ethernet =&gt; in \"IP Assignment\" select \"Edit\" =&gt; Set it to \"Manual\" =&gt; Toggle the IPv4 =&gt; in IP Address Enter `10.10.10.1` and in Subnet Mask enter `255.0.0.0`. Without configuring anything else, save it.  Use the Edit button for DNS server assignment, set it to Manual, toggle the IPv4 button and in the Preferred DNS field enter `127.0.0.1`. Save everything and exit settings.    Steps to perform on Client VM   Make sure the client VM is running the latest version of Windows, and it follows the same prerequisites explained above.  Go to Windows Settings =&gt; Network &amp; Internet =&gt; Ethernet =&gt; in \"IP Assignment\" select \"Edit\" =&gt; Set it to \"Manual\" =&gt; Toggle the IPv4 =&gt; in IP Address Enter `10.10.10.2` and in Subnet Mask enter `255.0.0.0`. Without configuring anything else, save it.  Now use the Edit button for DNS server assignment, set it to Manual, toggle the IPv4 button and in the Preferred DNS field enter the static IP address of the Windows Server VM, which was `10.10.10.1`. Save everything and exit settings.  Open an elevated PowerShell and enter this to join the Active Directory domain:  <pre><code>Add-Computer -DomainName &lt;Domain&gt; -Restart\n</code></pre>  You will be asked for credentials. If you are going to use the same Administrator account from Windows Server, use `Administrator` for username and enter the password of the Windows Server in the password field, otherwise use the password you set when creating the new user account in Active Directory Users and Computers.  After the client machine restarted, use `Other user` option on the lock screen and this time you will be using the Active Directory credentials to log into the machine. If using the built-in Administrator account, the password will be the same as the password on Windows Server account, but the username will be in the  format, so in this case, it will be `Administrator@CAServer.com`.  Since you are using Administrator account, you can by default use Enhanced session in Hyper-V too.  To request the certificate and enroll it, you can follow the Microsoft guide.   <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#create-a-signed-app-control-policy","title":"Create a Signed App Control policy","text":"<p>Once we have the certificate in the User Certificates store of either the Windows Server or a client machine, Right-click on it =&gt; All tasks =&gt; Export. Export the Private key and export all the Extended Properties, set a password for the certificate and set Encryption to <code>AES256-SHA256</code>. Select a location to export and it will create a <code>.pfx</code> file.</p> <p>You also need to export the certificate without private key, in <code>DER encoded binary X.509</code> format which will create a <code>.cer</code> certificate file. We need this certificate to sign the App Control policy.</p> <p>It is important to keep these 2 files, specially <code>.pfx</code> that contains the private key, in a safe place, such as Azure Key Vault Managed HSM or OneDrive Personal Vault, so that if you delete all the VMs you created, you will be able to continue using the same certificate to sign further App Control policies and supplemental policies, at least for the next 22 years, before it needs a renewal. As you can see, all of that setup must be done just once every few decades.</p> <p>The Personal Information Exchange (.pfx) file has great importance because it contains the Public key and Private key of the certificate so anyone who has access to this file can disable the deployed Signed App Control policy. It should never be shared with anyone outside your circle of trust. It is a password-protected file by nature.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#use-appcontrol-manager-to-sign-and-deploy-app-control-policies","title":"Use AppControl Manager to sign and deploy App Control policies","text":"<p>Tip</p> <p>AppControl Manager has everything built-in for you. You can Deploy, Modify and Remove Signed policies.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#extras","title":"Extras","text":""},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#how-to-interact-with-the-hidden-efi-partition","title":"How to interact with the hidden EFI partition","text":"<p>Using Diskpart, Open an elevated PowerShell console and run these commands one by one:</p> <pre><code>diskpart\nlist disk\n# double check to make sure it's the correct disk if you have more than 1\nselect disk 0\nlist part\n# The EFI partitions type is System, and its size is approximately 100MB, make sure you choose the correct one\nselect part 1\nassign letter=z\n</code></pre> <p></p> <p>The <code>EFI</code> partition will be available in This PC with letter <code>Z</code>, but you can't access it without modifying permissions. There is however an easier way to access it and manually copy the Signed App Control policy binary to it. Open Task Manager as admin, select <code>Run New Task</code>, select <code>Browse</code> and now you can access drive <code>Z</code> (<code>EFI</code> partition) and copy the Signed <code>.cip</code> file in <code>Z:\\EFI\\Microsoft\\Boot\\CIPolicies\\Active</code>.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#how-to-find-the-fqdn-fully-qualified-domain-name-of-the-windows-server","title":"How to find the FQDN (Fully Qualified Domain Name) of the Windows Server","text":"<p>Using PowerShell</p> <pre><code>(Get-ADComputer $(hostname)).DNSHostName\n</code></pre> <p>or</p> <pre><code>\"$env:computername.$env:userdnsdomain\"\n</code></pre> <p>You can also use GUI of Server Manager =&gt; Local Server</p> <p>The syntax is: <code>Computer_Name.Domain</code></p> <p>So, if:</p> <ul> <li>Computer Name: <code>CAServer</code></li> <li>Domain: <code>CAServer.com</code></li> </ul> <p>then FQDN is: <code>CAServer.CAServer.com</code></p> <p></p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy/#resources","title":"Resources","text":"<ul> <li>Use signed policies to protect App Control for Business against tampering</li> <li>Create a code signing cert for App Control for Business</li> <li>Deploying signed policies</li> <li>App Control Policy Wizard</li> <li>Application Control - Australian Government</li> <li>Understand App Control for Business policy rules and file rules</li> <li>Install Active Directory Domain Services</li> <li>Install-AdcsCertificationAuthority</li> <li>Install the Certification Authority</li> <li>Comparison of Windows Server editions</li> <li>Remove App Control for Business policies</li> </ul>"},{"location":"WDAC/How%20to%20Use%20Microsoft%20Defender%20for%20Endpoint%20Advanced%20Hunting%20With%20WDAC%20App%20Control/","title":"How to Use Microsoft Defender for Endpoint Advanced Hunting With App Control","text":"<p>Important</p> <p>AppControl Manager now supports automatically retrieving the Advanced Hunting logs from Microsoft Defender for Endpoint (MDE). The manual steps described below are only additional explanations.</p> <p></p> <p>App Control for Business is a highly effective security feature that empowers you to manage the execution of applications on your endpoints.</p> <p>The application whitelisting approach serves as a potent defense against emerging and unknown threats. By emphasizing the identification of trusted applications, it automatically blocks any software that falls outside this trusted realm.</p> <p>Microsoft Defender for Endpoint (MDE) is one of the tools that can be used by enterprises and organizations to develop a trusted application policy and manage it at scale. MDE provides the intelligence and insights needed to create and maintain a robust application control policy through its Advanced Hunting feature. This feature uses KQL (Kusto Query Language) to query the data collected by MDE and using the AppControl Manager, we can turn this actionable data into App Control policies. We can then use Intune to deploy these policies to our endpoints. All of these tools are built for scalability.</p> <p></p> <p>Note</p> <p>You can access Intune portal by navigating to: https://intune.microsoft.com</p> <p></p>"},{"location":"WDAC/How%20to%20Use%20Microsoft%20Defender%20for%20Endpoint%20Advanced%20Hunting%20With%20WDAC%20App%20Control/#preparing-the-code-integrity-and-applocker-data","title":"Preparing the Code Integrity and AppLocker Data","text":"<p>To start, we need our endpoints to be generating data and intelligence we can work with. These data points are the Code Integrity and AppLocker events. These events are generated when an application or file is blocked or audited by App Control, or when a script or MSI file is blocked or audited by AppLocker. We can trigger the data generation by deploying App Control policies to our endpoints in Audit mode. This mode will not block any applications, instead it will generate data points for any application, file, script, MSI file and so on that would have been blocked if the policy was in Enforce mode.</p> <p>You can create Audit mode policies using the AppControl Manager based on different levels of trust. Use this page to see what kind of audit events each base policy template generates when deployed in audit mode.</p> <p>For instance, once the DefaultWindows template is deployed on an endpoint, it starts generating Audit logs for any file that runs but is not part of the Windows by default. On the other hand, deploying the AllowMicrosoft base policy in Audit mode starts generating Audit logs for any file that runs but is not signed by Microsoft certificates.</p> <p>After generating the policy files using the app, you will then use Intune to deploy them to as many endpoints as you want.</p> <p>Tip</p> <p>Deploy App Control policies using Mobile Device Management (MDM)</p> <p></p>"},{"location":"WDAC/How%20to%20Use%20Microsoft%20Defender%20for%20Endpoint%20Advanced%20Hunting%20With%20WDAC%20App%20Control/#collecting-the-data-from-mde-advanced-hunting","title":"Collecting the Data from MDE Advanced Hunting","text":"<p>Now we need to collect the data from MDE Advanced Hunting. The following query will give us a good starting point by collecting all of the Code Integrity and AppLocker events:</p> <pre><code>DeviceEvents\n| where ActionType startswith \"AppControlCodeIntegrity\"\n   or ActionType startswith \"AppControlCIScriptBlocked\"\n   or ActionType startswith \"AppControlCIScriptAudited\"\n</code></pre> <p></p> <p>We can customize the query to be more specific to our environment, for instance by targeting an specific device among all the devices:</p> <pre><code>DeviceEvents\n| where (ActionType startswith \"AppControlCodeIntegrity\"\n    or ActionType startswith \"AppControlCIScriptBlocked\"\n    or ActionType startswith \"AppControlCIScriptAudited\")\n    and DeviceName == \"mainframe\"\n</code></pre> <p><code>mainframe</code> in this example is the name of our device.</p> <p></p> <p>Note</p> <p>You can access Microsoft Defender for Endpoint's portal by navigating to: https://security.microsoft.com</p> <p></p> <p>That query generates a standard output of the data in CSV file format which is compatible with what the AppControl Manager requires in order to generate App Control policies. If you want to customize the query further, make sure the subsequent filters are applied after the initial query to ensure correct data format.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Tip</p> <p>Proactively hunt for threats with advanced hunting in Microsoft Defender XDR</p> <p></p>"},{"location":"WDAC/How%20to%20Use%20Microsoft%20Defender%20for%20Endpoint%20Advanced%20Hunting%20With%20WDAC%20App%20Control/#generating-the-app-control-policies","title":"Generating the App Control Policies","text":"<p>After exporting the data from MDE Advanced Hunting, we can use the AppControl Manager to generate App Control policies. We need to feed the exported CSV file(s) we collected to the application by simply browsing for them. The app will quickly scan them and display them with full details. It provides controls that allow you to filter or sort the logs based on different properties. You can search through the scan results, remove unwanted logs and once you're happy with the results, you can generate the supplemental App Control policy.</p> <p></p>"},{"location":"WDAC/How%20to%20Use%20Microsoft%20Defender%20for%20Endpoint%20Advanced%20Hunting%20With%20WDAC%20App%20Control/#appcontrol-manager-features-for-mde-advanced-hunting","title":"AppControl Manager Features For MDE Advanced Hunting","text":"<ul> <li>Systematic approach for converting the MDE AH data to App Control policy with high precision and performance</li> <li>Uses parallel processing to speed up the policy generation process</li> <li>Provides a GUI for filtering the logs based on various criteria</li> <li>Never includes duplicate rules in the policy, regardless of the number of the duplicate logs you give it</li> </ul>"},{"location":"WDAC/How%20to%20Use%20Microsoft%20Defender%20for%20Endpoint%20Advanced%20Hunting%20With%20WDAC%20App%20Control/#the-app-can-create-3-types-of-rules-for-files","title":"The App Can Create 3 Types of Rules for Files:","text":"<p>You can choose the level based on which the logs will be scanned. By default, the following rules apply to the scan:</p> <ul> <li>If a file is unsigned then a hash rule will be created for it.</li> <li>If a file is signed then there are multiple possibilities:</li> <li>If the file is signed and the MDE AH results contain the file's version as well as at least one of the following file attributes (Original Name, Internal Name, Description, Product Name), then a File Publisher rule will be created for it.</li> <li>If the file is signed but the file attributes are not present in the results, Publisher level rule will be created for it.</li> </ul> <p>These levels are selected based on their security. You can read more about the levels security comparison in this article.</p> <p></p>"},{"location":"WDAC/How%20to%20Use%20Microsoft%20Defender%20for%20Endpoint%20Advanced%20Hunting%20With%20WDAC%20App%20Control/#deploying-the-app-control-policies","title":"Deploying the App Control Policies","text":"<p>After generating the Supplemental policies based off of the MDE Advanced Hunting data, you need to remove the Audit mode policies you deployed to your endpoints initially and replace them with Enforced mode policies. AppControl Manager offers an easy way to do so.</p> <p></p> <p>Important</p> <p>Ensure that the Enforced mode policies align with the type of policies set during Audit mode. For example, if you utilized an Audit mode policy that permits Microsoft-signed files, it is crucial to employ an Enforced mode policy that also allows such files. Conversely, when dealing with the default Windows policy, consistency is key. Mixing these policies can result in files that were allowed during Audit mode being unexpectedly blocked during Enforce mode.</p> <p>You can deploy the policies using Intune, SCCM, or any other MDM solution you are using.</p> <p>After deploying the base policies, you will then deploy the Supplemental policies generated from MDE AH data, these policies are responsible for allowing any 3rd party apps or files that your endpoints need to use.</p> <p>You can put your endpoints into different groups and each group can receive different Supplemental policy based on their needs.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Note</p> <p>ApplicationControl CSP</p> <p></p> <p>Tip</p> <p>You can use AppControl Manager to seamlessly deploy your App Control policies to the Intune.</p> <p></p>"},{"location":"WDAC/How%20to%20Use%20Microsoft%20Defender%20for%20Endpoint%20Advanced%20Hunting%20With%20WDAC%20App%20Control/#strict-kernel-mode-code-integrity-policy-scenario","title":"Strict Kernel Mode Code Integrity Policy Scenario","text":"<p>I've created a scenario where you can strictly control what is allowed to run in Kernel mode, without blocking any user mode applications. You can read all about this scenario in here. Using the AppControl Manager and MDE Advanced Hunting intel, you can deploy this scenario across your entire fleet of endpoints.</p> <p>This approach demands very minimal upkeep as it exclusively manages Kernel-mode activities, yet it offers an exceptional degree of security. A significant benefit of this method is the safeguarding of your endpoints from all Bring Your Own Vulnerable Driver (BYOVD) threats.</p> <p></p>"},{"location":"WDAC/How%20to%20Use%20Microsoft%20Defender%20for%20Endpoint%20Advanced%20Hunting%20With%20WDAC%20App%20Control/#feedback-and-support","title":"Feedback and Support","text":"<p>If you have any questions, feature requests or feedback regarding this guide or the AppControl Manager, please feel free to reach out to me on GitHub by opening a new issue or discussion.</p> <p></p> <p></p>"},{"location":"WDAC/Introduction/","title":"What is Application Control for Business?","text":"<p>Application Control is crucial for protecting computer systems in today's threat landscape and offers a distinct advantage over traditional antivirus solutions. Specifically, application control uses tailored access, shifting from a model where all applications are assumed trustworthy to one where applications must earn trust before they can run.</p> <p>Devices where Application Control policies are deployed on can either be centrally managed via MDM, Intune etc. or they can be home devices, devices that are private and don't belong to any organization, the computer of someone that you want to keep very much safe and secure so that even the device's owner can't willingly or forcefully compromise themselves, the possibilities are endless.</p> <p></p> <p>Important</p> <p>Use AppControl Manager for all of your Application Control and Code Integrity management needs. It is scalable, easy to use, enterprise-ready, Azure VM ready and more importantly, it is free, open-source and always will be that way.</p> <p></p> <p>App Control puts the power of security directly in your hands, giving you complete control over your system and the systems you manage. Unlike other solutions that create dependency on other people, App Control eliminates the need to constantly chase and block new malware variants. Once you configure your system and define the apps and files that are permitted to run, everything else is automatically blocked.</p> <p>It's time to shift from a reactive approach to a proactive one.</p> <p></p>"},{"location":"WDAC/Introduction/#but-what-is-app-control-in-simpler-terms","title":"But What Is App Control in Simpler Terms?","text":"<p>By default, you can install any program and run any file on your system. These files can either be signed or unsigned. Signed files come with a certificate that verifies their authenticity, and Windows maintains a list of trusted certificates.</p> <p>Application Control is a security feature designed to regulate and restrict which programs and files are allowed to run on your system. It eliminates the default open-ended approach where any file can be executed freely. Instead, you define a policy\u2014formatted as an XML file\u2014that specifies which certificates or files are trusted. The system then enforces this policy, permitting only the approved files and programs to run while blocking everything else.</p> <p>This fundamentally changes the security landscape. Instead of allowing everything by default, the system now demands that programs and files prove their trustworthiness to the policy you created, before execution.</p> <p>App Control operates on the principle of trust enforcement rather than threat detection. It does not distinguish between outright malware and files signed with multiple legitimate certificates\u2014if a file is not explicitly permitted by your locally defined policy, it is blocked from execution. This proactive approach is particularly effective against zero-day threats that may evade traditional antivirus, signature-based, or other detection mechanisms. Waiting even a short period for new threats to be detected, analyzed, and countered with updated signatures can be too late.</p> <p>By preventing the execution of any unauthorized files or programs, App Control imposes significant barriers to attackers, potentially deterring them from even attempting to breach your system. For instance, even if an attacker manages to deceive you into downloading seemingly legitimate software or file to exploit vulnerabilities or infect your device (such as through social engineering, phishing and other techniques), it will be denied execution unless it adheres to the locally defined policy(ies) on your system.</p> <p></p> <p>Tip</p> <p>App Control Frequently Asked Questions (FAQs)</p> <p></p>"},{"location":"WDAC/Introduction/#what-are-the-different-ways-to-use-app-control-in-windows","title":"What Are The Different Ways to Use App Control in Windows?","text":"<p>Windows includes a feature called Smart App Control. It acts as a fully automated Application Control system for your device. Being fully automated means it cannot be manually configured or overridden. Smart App Control leverages the Microsoft Intelligent Security Graph, which utilizes AI and advanced technologies to assess whether a file or program is safe to execute.</p> <p>For those seeking more granular control, the AppControl Manager offers a highly intuitive graphical interface. It allows you to create detailed policies, specifying which files or programs are permitted to run. Policies can be defined using various criteria within the XML format. For example, you can create rules to block all files from running in a particular folder or allow only files signed with a specific certificate, effectively blocking unsigned or differently signed files. AppControl Manager provides a comprehensive suite of tools to manage and configure App Control on your system. With all functionalities built directly into the app, it eliminates the need to switch between different tools or interfaces, making the process seamless and efficient.</p> <p>App Control is deeply integrated into Windows core and a component known as Code Integrity is mainly responsible for enforcing App Control policies that we create. It runs very early during the system boot, ensuring tight policy enforcement from the very beginning.</p> <p></p>"},{"location":"WDAC/Introduction/#app-control-concepts-and-keywords","title":"App Control Concepts and Keywords","text":""},{"location":"WDAC/Introduction/#base-policy","title":"Base Policy","text":"<p>App Control policies come in different types, one of which is the base policy. A base policy is a standalone policy that can be deployed independently, without relying on other policies. It can contain both allow and deny rules. Multiple base policies can coexist on the same system.</p> <p></p>"},{"location":"WDAC/Introduction/#supplemental-policy","title":"Supplemental policy","text":"<p>Supplemental policies depend on base policies and cannot function without an associated base policy. The only purpose of a supplemental policy is to add more allow rules to a base policy, thereby expanding its scope.</p> <p></p>"},{"location":"WDAC/Introduction/#appid-tagging-policy","title":"AppID Tagging Policy","text":"<p>This type of policy does not allow or block any files. Instead, it programmatically tags files and programs based on the rules defined within it. Other programs can then detect these tags and treat the tagged programs differently.</p> <p></p>"},{"location":"WDAC/Introduction/#table-policy-types-and-their-capabilities","title":"Table: Policy Types and Their Capabilities","text":"Features Base Policy Supplemental Policy AppID Tagging Policy Can be Standalone Yes No Yes Can Have Deny Rules Yes No No Applies to User and Kernel Mode Files? Yes Yes No - User Mode only Can be Signed Yes Yes Yes Can the Signed Version be Removed Without Access to the Certificate? No Yes No Can be Used for Auditing Yes No No"},{"location":"WDAC/Introduction/#policy-id","title":"Policy ID","text":"<p>All policy types are assigned a unique ID in GUID format. No two policies with the same ID can exist on the same system. Attempting to deploy a policy with a duplicate ID will overwrite the existing policy.</p> <p></p>"},{"location":"WDAC/Introduction/#deployment","title":"Deployment","text":"<p>The terms deploy or deployment refer to the process of installing policies on the system. Deployment involves:</p> <ul> <li> <p>Copying the policy to specific system locations.</p> </li> <li> <p>Refreshing the system's policy repository to recognize and enforce the new policies.</p> </li> </ul> <p></p>"},{"location":"WDAC/Introduction/#audit-mode","title":"Audit Mode","text":"<p>Audit Mode is a feature available for base policies. When deployed in audit mode, the policy does not block any files. Instead, it generates event logs for any files that would have been blocked if the policy were deployed in enforced mode.</p> <p></p>"},{"location":"WDAC/Introduction/#enforced-mode","title":"Enforced Mode","text":"<p>If a policy is not deployed in audit mode, it is considered to be in enforced mode. In this mode:</p> <ul> <li> <p>The policy enforces its rules by allowing specified files and programs.</p> </li> <li> <p>All other files and programs are blocked.</p> </li> </ul> <p></p>"},{"location":"WDAC/Introduction/#app-control-guides","title":"App Control Guides","text":"<ul> <li> <p>How To Generate Audit Logs via App Control Policies</p> </li> <li> <p>How To Create an App Control Supplemental Policy</p> </li> <li> <p>The Strength of Signed App Control Policies</p> </li> <li> <p>How To Upload App Control Policies To Intune Using AppControl Manager</p> </li> <li> <p>How To Create and Maintain Strict Kernel\u2010Mode App Control Policy</p> </li> <li> <p>How to Create an App Control Deny Policy</p> </li> <li> <p>Fast and Automatic Microsoft Recommended Driver Block Rules updates</p> </li> <li> <p>App Control Notes</p> </li> <li> <p>How to use Windows Server to Create App Control Code Signing Certificate</p> </li> <li> <p>App Control policy for BYOVD Kernel mode only protection</p> </li> <li> <p>EKUs in App Control for Business Policies</p> </li> <li> <p>App Control Rule Levels Comparison and Guide</p> </li> <li> <p>Script Enforcement and PowerShell Constrained Language Mode in App Control Policies</p> </li> <li> <p>How to Use Microsoft Defender for Endpoint Advanced Hunting With App Control</p> </li> </ul> <p></p>"},{"location":"WDAC/Introduction/#application-control-usage-levels","title":"Application Control Usage Levels","text":"<p>There are many ways you can utilize Application Control features and here they are sorted by the level of restriction and protection they provide.</p> Protection Level Type Description \u2b50 Microsoft recommended driver block rules The vulnerable driver blocklist is enabled by default for all devices using HVCI or Memory Integrity. The built-in driver blocklist is updated with each new major release of Windows, typically 1-2 times per year. \u2b50\u2b50 Fast Microsoft recommended driver block rules Update The drivers block list itself is updated more frequently than twice a year schedule, use the AppControl Manager to setup a scheduled task that keeps the list up-to-date. \u2b50\u2b50\u2b50 Microsoft recommended driver + User Mode block rules Use the AppControl Manager to easily deploy the User-Mode Microsoft recommended block rules on your system in addition to the drivers block rules that only enforces Kernel-mode drivers. \u2b50\u2b50\u2b50\u2b50 Block Rules + App Control policy using ISG In Addition to using the block rules, deploy an App Control policy that uses the ISG for automated reputation-based authorization. \u2b50\u2b50\u2b50\u2b50\u2b50 Smart App Control It's just a toggle in Windows Security under App &amp; Browser control. Smart App Control uses a special kind of App Control policy that provides more protection than the previous type because of how it is crafted to handle reputable apps. It uses both of Microsoft's recommended block rules by default. \u2b50\u2b50\u2b50\u2b50\u2b50\u2b50 Smart App Control + Strict Kernel-Mode App Control Policy The special strict kernel-mode policy augments the Smart App Control by enforcing tight restrictions and control over anything that wants access the OS Kernel. \u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50 Block Rules + Allow Microsoft policy (unsigned) Block rules must always be deployed along with other App Control policies. The Allow Microsoft policy will enforce both User + Kernel mode files. \u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50 Block Rules + Allow Microsoft policy (Signed) Signing the Allow Microsoft policy along with the block rules will make them tamper proof even against system administrators. \u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50 Block Rules + Default Windows (unsigned) The Default Windows template offers more control and restrictions than the Allow Microsoft template. \u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50 Block Rules + Default Windows (Signed) Signing the Default Windows policy along with the block rules will make them tamper proof even against system administrators. \u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50 Block Rules + Default Windows + Strict Kernel-Mode policy (All Policies Signed) the Default Windows policy + Strict Kernel-mode policy + block rules and all of them signed provides the highest level of protection. <p></p>"},{"location":"WDAC/Introduction/#the-philosophy-of-application-control","title":"The Philosophy of Application Control","text":"<p>Traditional security paradigms operate reactively, predicated on the notion of learning from failure\u2014be it a breach, malware behavior, or an exploit. Antivirus solutions, EDRs, and even advanced Security Operations Centers are, at their core, systems that require evidence of failure or malicious activity to evolve their defenses. This dependence on post-incident learning creates a dangerous temporal gap between detection and mitigation, a gap that adversaries exploit to maximum effect. But what if the entire paradigm of learning from failure is rendered obsolete? What if the very need for mistakes to act as catalysts for growth is removed?</p> <p>App Control dares to challenge this model, offering a proactive, deterministic approach to security. Instead of waiting for an adversary to breach a boundary, it operates on the principle of preemptive denial. By enforcing a meticulously curated policy of trust, it shifts the locus of control back to the defender. No unauthorized file or program\u2014no matter how cleverly disguised or insidiously crafted\u2014can execute without explicit consent. In this model, the defender doesn't merely learn from the adversary's moves; they nullify the need to learn by negating the adversary's opportunity to act.</p> <p>This approach transcends technical effectiveness and ventures into a broader philosophical question: must growth and innovation always be rooted in failure? In the realm of cybersecurity, App Control suggests an alternative path\u2014a future where systems are designed to anticipate and preempt the very conditions that lead to mistakes. It embodies the philosophy that prevention is not merely better than cure; it is the evolution of cure itself.</p> <p>Why wait for failure to inform your defenses when you can architect systems that proactively uphold their integrity? Why depend on the adversary's initiative to dictate your response when you can reclaim the initiative entirely? What if failure is not an option and cannot be afforded under any circumstances?</p> <p></p>"},{"location":"WDAC/Introduction/#microsoft-learn-documents-related-to-application-control","title":"Microsoft Learn Documents Related to Application Control","text":"<ul> <li>Application Control for Windows</li> <li>Understand App Control for Business policy design decisions</li> <li>Deploying App Control for Business policies</li> <li>Use multiple App Control for Business Policies</li> <li>Use audit events to create App Control policy rules</li> <li>Understand App Control for Business policy rules and file rules</li> <li>Testing and Debugging AppId Tagging Policies</li> <li>App Control for Business example base policies</li> <li>Configure the Application Identity service</li> <li>Microsoft recommended driver block rules</li> <li>Microsoft recommended block rules</li> <li>Create an App Control policy using a reference computer</li> <li>Create an App Control policy for fully managed devices</li> <li>Create an App Control policy for lightly managed devices</li> <li>Guidance on Creating App Control Deny Policies</li> <li>Hypervisor-protected Code Integrity enablement</li> </ul>"},{"location":"WDAC/Script%20Enforcement%20and%20PowerShell%20Constrained%20Language%20Mode%20in%20WDAC%20App%20Control%20Policies/","title":"Script Enforcement and PowerShell Constrained Language Mode in App Control Policies","text":""},{"location":"WDAC/Script%20Enforcement%20and%20PowerShell%20Constrained%20Language%20Mode%20in%20WDAC%20App%20Control%20Policies/#introduction","title":"Introduction","text":"<p>This article explores some of the technical details of how to deploy an App Control policy that uses Script Enforcement and forces PowerShell to run in Constrained Language Mode. It expands aspects of this topic that are not covered enough in the official docs.</p> <p>Tip</p> <p>Check out these 2 documents from Microsoft for more info and basics:</p> <ul> <li> <p>PowerShell Constrained Language Mode</p> </li> <li> <p>Script enforcement with App Control for Business</p> </li> </ul> <p></p> <p>Below are the required steps to enable Script Enforcement and allow a PowerShell module to run in Constrained Language Mode, if its code meets the requirements of it.</p> <p></p>"},{"location":"WDAC/Script%20Enforcement%20and%20PowerShell%20Constrained%20Language%20Mode%20in%20WDAC%20App%20Control%20Policies/#signing-the-powershell-module-files","title":"Signing the PowerShell Module files","text":"<p>The PowerShell module that you intend to use in Constrained Language Mode must be completely signed, that means all of its <code>.psm1</code> and <code>.psd1</code> files must be signed by a code signing certificate.</p> <p></p>"},{"location":"WDAC/Script%20Enforcement%20and%20PowerShell%20Constrained%20Language%20Mode%20in%20WDAC%20App%20Control%20Policies/#type-of-certificate-to-use-to-sign-the-powershell-module-files","title":"Type of Certificate to Use to Sign the PowerShell Module Files","text":"<p>The Code Signing certificate you're going to use to sign the PowerShell module files with can be a self-signed certificate or a certificate from a trusted certification authority (CA).</p> <p></p>"},{"location":"WDAC/Script%20Enforcement%20and%20PowerShell%20Constrained%20Language%20Mode%20in%20WDAC%20App%20Control%20Policies/#making-the-system-trust-the-certificate","title":"Making the System Trust the Certificate","text":"<p>If the certificate you used to sign the PowerShell module files with is from a trusted certification authority (CA) and the root certificate of that CA exists in the \"Trusted Root Certification Authorities\" store of either the Local Machine or Current User certificate store, then you're good to go, but if the certificate is self-signed, you need to add the certificate's root certificate to either of those locations.</p> <p>For instance, if you generated a Code Signing certificate from Windows Server Active Directory Certificate Services, and you used that certificate to sign the PowerShell module files, you need to export the root certificate containing the public key, to a <code>.cer</code> file and then add it to one of the locations mentioned earlier. Adding the leaf certificate, which is the one you used to sign the module files with, to those locations, will not count and won't allow the signed PowerShell module to run in Constrained Language Mode.</p> <p></p>"},{"location":"WDAC/Script%20Enforcement%20and%20PowerShell%20Constrained%20Language%20Mode%20in%20WDAC%20App%20Control%20Policies/#base-policy-requirements","title":"Base Policy Requirements","text":"<p>The App Control base policy you're going to deploy must have <code>0 Enabled:UMCI</code> and it must not have the <code>11 Disabled:Script Enforcement</code> rule options.</p> <p></p>"},{"location":"WDAC/Script%20Enforcement%20and%20PowerShell%20Constrained%20Language%20Mode%20in%20WDAC%20App%20Control%20Policies/#how-to-create-a-supplemental-policy-to-allow-the-certificates","title":"How to Create a Supplemental Policy to Allow the Certificate(s)","text":"<p>The root certificate's details must be added as a Signer rule in an App Control policy in the User-Mode Signing Scenario.</p> <p>Adding the Certificate's Signer rule to the Kernel-mode Signing Scenario does not allow the modules signed by that certificate to run, which is expected.</p> <p>For better management, you should allow the certificate in a new supplemental policy.</p> <p>Here is an example of a valid Supplemental policy that allows a root certificate as a signer.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;SiPolicy xmlns=\"urn:schemas-microsoft-com:sipolicy\" PolicyType=\"Supplemental Policy\"&gt;\n  &lt;VersionEx&gt;1.0.0.0&lt;/VersionEx&gt;\n  &lt;PlatformID&gt;{2E07F7E4-194C-4D20-B7C9-6F44A6C5A234}&lt;/PlatformID&gt;\n  &lt;Rules&gt;\n    &lt;Rule&gt;\n      &lt;Option&gt;Enabled:Unsigned System Integrity Policy&lt;/Option&gt;\n    &lt;/Rule&gt;\n  &lt;/Rules&gt;\n  &lt;EKUs /&gt;\n  &lt;FileRules /&gt;\n  &lt;Signers&gt;\n    &lt;Signer ID=\"ID_SIGNER_S_1_1\" Name=\"Root Certificate\"&gt;\n      &lt;CertRoot Type=\"TBS\" Value=\"e3fbf9a3dc3022eab22b5e961bc6fee45782ae8aaed1d8402f2101a5f393db876444ef1d0e302f03b64463bae816f701cc5cda41068a8bf1954a0cd262eb9d6f\" /&gt;\n    &lt;/Signer&gt;\n  &lt;/Signers&gt;\n  &lt;SigningScenarios&gt;\n    &lt;SigningScenario Value=\"131\" ID=\"ID_SIGNINGSCENARIO_DRIVERS_1\" FriendlyName=\"Auto generated policy on 04-26-2024\"&gt;\n      &lt;ProductSigners /&gt;\n    &lt;/SigningScenario&gt;\n    &lt;SigningScenario Value=\"12\" ID=\"ID_SIGNINGSCENARIO_WINDOWS\" FriendlyName=\"Auto generated policy on 04-26-2024\"&gt;\n      &lt;ProductSigners&gt;\n        &lt;AllowedSigners&gt;\n          &lt;AllowedSigner SignerId=\"ID_SIGNER_S_1_1\" /&gt;\n        &lt;/AllowedSigners&gt;\n      &lt;/ProductSigners&gt;\n    &lt;/SigningScenario&gt;\n  &lt;/SigningScenarios&gt;\n  &lt;UpdatePolicySigners /&gt;\n    &lt;CiSigners&gt;\n  &lt;CiSigner SignerId=\"ID_SIGNER_S_1_1\" /&gt;\n  &lt;/CiSigners&gt;\n  &lt;HvciOptions&gt;2&lt;/HvciOptions&gt;\n  &lt;BasePolicyID&gt;{7558D4BF-69E3-45CA-9C52-915E48A7C50E}&lt;/BasePolicyID&gt;\n  &lt;PolicyID&gt;{32C551AF-C243-477A-9955-D37EDF435414}&lt;/PolicyID&gt;\n  &lt;Settings&gt;\n    &lt;Setting Provider=\"PolicyInfo\" Key=\"Information\" ValueName=\"Name\"&gt;\n      &lt;Value&gt;\n        &lt;String&gt;Supplemental Policy&lt;/String&gt;\n      &lt;/Value&gt;\n    &lt;/Setting&gt;\n  &lt;/Settings&gt;\n&lt;/SiPolicy&gt;\n</code></pre> <p>As you can see, we need the TBS Hash value of the root certificate.</p> <p></p>"},{"location":"WDAC/Script%20Enforcement%20and%20PowerShell%20Constrained%20Language%20Mode%20in%20WDAC%20App%20Control%20Policies/#use-the-appcontrol-manager-to-automatically-allow-certificates","title":"Use the AppControl Manager to Automatically Allow Certificates","text":"<p>You can use the AppControl Manager to create a supplemental policy that allows the certificates you select to be allowed by App Control.</p> <p>Refer to this page for more information</p> <p></p> <p>Tip</p> <p>A manual way to get the TBS Hash value of a certificate is using the following command, which also works for signed files and will show the details of the certificates in the chain as well.</p> <pre><code>certutil.exe \u2013v &lt;Path To .cer file&gt;\n</code></pre> <p></p> <p></p>"},{"location":"WDAC/Script%20Enforcement%20and%20PowerShell%20Constrained%20Language%20Mode%20in%20WDAC%20App%20Control%20Policies/#powershell-engine-behavior","title":"PowerShell Engine Behavior","text":"<p>When an App Control policy with script enforcement is deployed and you try to import an unauthorized module, you might see different errors. For instance, you might see an error about classes not being allowed or other reasons for a module not being able to load, but in essence, the PowerShell engine is trying to load the module in Constrained Language Mode and the module is failing to meet the requirements, most likely because:</p> <ul> <li>The module you're trying to load is not signed</li> <li>The module you're trying to load is signed but the certificate's root is not trusted by the system</li> <li>The module you're trying to load is signed but at least one of its files is tampered with and has a hash mismatch. Even adding a single space on an empty line causes hash mismatch, which is expected.</li> </ul> <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/","title":"The Strength of Signed App Control Policies","text":"<p>Before delving into the topic, let's first clarify the role of an Administrator within the operating system. An Administrator is a user with the highest level of access to the OS, possessing the authority to make system-wide changes that impact all users.</p> <p>Administrators are responsible for managing system security, modifying security settings, installing software and hardware, and accessing all files on the computer. Notably, an Administrator can seamlessly elevate privileges to SYSTEM, Managed Installer, or other access levels due to the absence of security boundaries between them. Equivalent roles in other operating systems include Root, SuperUser, and similar designations.</p> <p>Implementing an Application Control policy requires Administrator privileges. Without these elevated permissions, it is impossible to deploy, remove, or alter any App Control policies.</p> <p>Deploying an unsigned App Control policy leaves it vulnerable to removal or modification by any user with Administrator privileges. But what if you need your App Control policy to be so tamper-resistant that even an Administrator cannot alter or remove it? This is where signing comes into play.</p> <p>App Control policies, authored in XML format, must be converted into .cip binary files before deployment. To enhance security and ensure tamper resistance, the .cip file can be signed with a code signing certificate prior to deployment. This signing process effectively fortifies the policy, making it impervious to unauthorized modifications or removal.</p> <p>Signed App Control policies offer a formidable defense, they significantly hinder adversaries from achieving initial access to the system, a critical juncture in any attack. The importance of preventing initial access cannot be overstated. Once an attacker gains Administrator privileges, they inherently acquire the capability to manipulate the system.</p> <p>For example, although a signed App Control policy cannot be removed, an attacker with Administrator rights could still deploy a new policy designed to block essential Endpoint Detection and Response (EDR) sensors or data collection agents. This could include tools like Azure Monitor Agent for Microsoft Sentinel or Microsoft Defender for Endpoint, effectively disrupting telemetry and impeding security monitoring.</p> <p>Despite this potential for disruption, attackers are still constrained by the integrity of signed policies, which prohibit unauthorized programs from executing. Consequently, engineering robust defenses to prevent initial access, particularly access that elevates privileges to Administrator, remains paramount in securing modern systems.</p> <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#system-behavior-after-deploying-a-signed-application-control-policy","title":"System Behavior After Deploying a Signed Application Control Policy","text":"<p>After a signed App Control policy .cip is copied to the EFI partition as part of the deployment process, we can see in System Information that Application Control User-Mode is being enforced and when you try to install an application not permitted by the deployed policy, it will be successfully blocked.</p> <p>At this point, a system restart is required. Since UEFI Secure Boot is enabled, the anti-tampering protection of the Signed App Control policy is activated, safeguarding the policy from any modifications.</p> <p>Deploying a Signed App Control policy without restarting is the same as deploying Unsigned policies, because the Signed policy can be easily removed just like an Unsigned policy. So always make sure you restart at least once after deploying a Signed App Control policy.</p> <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#what-if-someone-forcefully-deletes-the-deployed-app-control-policy-file","title":"What If Someone Forcefully Deletes the Deployed App Control Policy File","text":"<ul> <li> <p>Deleting the .cip policy file from <code>C:\\Windows\\System32\\CodeIntegrity\\CiPolicies\\Active</code> and then restarting the system multiple times won't have any effect at all on the status of App Control. It will continue to work, and enforcement status will be shown in System Information. This is how it protects itself against rogue administrators.</p> </li> <li> <p>Deleting the .cip policy file from the EFI partition located at <code>\\EFI\\Microsoft\\Boot\\CIPolicies\\Active</code> and restarting the device will result in a boot failure. Before system restart, nothing happens, and it will remain active. This is another self-protection method of a Signed App Control policy. To recover from this state, the person will need to disable Secure Boot in the UEFI firmware settings. There are only 3 scenarios at this point:</p> </li> <li> <p>If, as suggested in the Security Recommendations, you set a strong password for the UEFI firmware of your hardware, they can't access the firmware. This security measure alongside the rest of the Windows built-in security features such as BitLocker device encryption will provide the Ultimate protection for a Windows device against threats, whether physical or originating from the Internet.</p> <ol> <li> <p>If UEFI firmware is not password protected, the person can disable Secure Boot and/or TPM in UEFI firmware settings, they can even flash the entire UEFI firmware memory by physically abusing the device to get past the UEFI password, but since the device is BitLocker protected, a total Lock Down will be triggered and the person will need to provide the 48-digit recovery key of the OS drive in order to even complete the boot process into Windows lock screen. Assuming the person also has access to the Windows PIN, they will additionally need to provide 48-digit recovery password of any subsequent BitLocker protected drive(s) in order to access them (if the drive(s) aren't set to be auto-unlocked with the OS drive). If UEFI firmware has any unpatched vulnerability, Device Guard features and Pluton will take care of it.</p> </li> <li> <p>Since steps 1 and 2 are impossible to bypass for a rogue person, there will be only one option left. To completely recycle the physical device, get rid of the inaccessible hardware such as SSD and then sell the remaining hardware parts. Either way, your data remains secure and inaccessible to any unauthorized person(s) at all times.</p> </li> </ol> </li> </ul> Screenshot of a message after forcefully deleting a Signed App Control policy from the EFI partition in a VM <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#what-happens-when-we-turn-on-smart-app-control","title":"What Happens When We Turn on Smart App Control","text":"<p>Smart App Control works side-by-side any signed or unsigned App Control policy because it is itself a special type of App Control policy. It will be in enforced mode and continue to do its job.</p> <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#dual-boot-os-configurations","title":"Dual Boot OS Configurations","text":"<p>When you deploy a Signed App Control policy on a system that uses Secure Boot, it will be enforced on all of the OSes that boot on the physical machine, because the policy resides on the EFI partition and is not tied to any specific OS. That means if you perform a clean install of a second Windows OS or natively boot a VHDX (Hyper-V VM), the policy will apply to them as well.</p> <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#efi-partition-size-limit","title":"EFI Partition Size Limit","text":"<p>The EFI partition typically has 200MB of space, which is generally more than sufficient for storing numerous signed App Control policies. These policies each usually only take up a few kilobytes of space on average. It's important to note that the size of the signed policy binary file (.cip) differs from the size of the original XML file. The .cip file is typically smaller than the XML file due to the parsing process used when generating the binary.</p> <p>If you ever find that your EFI partition is running out of space, expanding it is always an option.</p> <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#tcg-self-encrypting-drives-seds-opal-and-signed-policies","title":"TCG Self-Encrypting Drives (SEDs), OPAL, and Signed Policies","text":"<p>Modern enterprise-grade SSDs, particularly in the M.2 form factor from manufacturers like Samsung and Micron, commonly integrate at least the TCG OPAL 2.0 standard for self-encrypting drives (SEDs). This standard introduces a crucial security feature: Pre-Boot Authentication (PBA).</p> <p>PBA allows for user authentication through a password prior to the system's UEFI (Unified Extensible Firmware Interface) becoming accessible, providing a layer of security that protects data before the operating system or UEFI is even loaded.</p> <p>A TCG-compliant self-encrypting drive (SED) ensures that sensitive data remains inaccessible to unauthorized users at the point of authentication, by preventing data exposure in the pre-boot environment. This means that the authentication password is not stored in the UEFI variables, CMOS or dependent on the BIOS.</p> <p>Upon powering up the device, the system presents a shadow PBA partition instead of the actual disk content. This dedicated partition, typically at least 128MB, houses the code responsible for unlocking the drive and allowing access to the original disk data. This partition essentially shadows the disk's content until proper authentication is performed.</p> <p>Self-encrypting drives adhering to the TCG OPAL 2.0 standard implement a two-tiered key management system. The data encryption key (DEK) is responsible for encrypting the data stored on the drive, while the authentication key (a user-defined passphrase) is used to decrypt the DEK. One of the advantages of this layered approach is cryptographically secure disk erasure, because full disk erasure can be performed almost instantly by securely erasing the DEK.</p> <p>This design also facilitates rapid response to security threats, allowing administrators to revoke compromised passphrases quickly. The seamless passphrase change allows administrators to change their passphrase without risking data loss, as the encryption remains tied to the DEK. This system allows for flexibility, enabling quick updates to authentication mechanisms without compromising the security or integrity of the stored data.</p> <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#what-if-someone-steals-the-laptop","title":"What If Someone Steals the Laptop?","text":"<p>In high-security environments, it is advisable to use a self-encrypting drive that mandates a TCG Storage Security Drive Password before allowing access to any system components. This provides an additional physical layer of protection on top of BitLocker's existing security, which already includes triple-factor authentication (TPM, PIN, and Security Key stored on a USB drive). In this configuration, even if an attacker steals your laptop while it is shut down or in hibernation, they will encounter significant obstacles in accessing your data. The PIN is only half of the encryption key while the external key on the USB storage device is the other half. Together they form the full encryption key while the TPM supervises the entire process and gives the green light through attestation.</p> <p>If the laptop is powered off or in hibernation, the attacker will be prompted for the pre-boot password before the system boots up. If the drive is removed and connected to another system that does not recognize TCG OPAL encryption, it will not boot. The drive will be inaccessible, with no option to initialize or bring the disk online through disk management tools.</p> <p>If the attacker connects the drive to a compatible system, the drive will still be protected by the same pre-boot authentication, effectively preventing unauthorized access. The integrity of the drive's TCG password is not affected by tampering methods, such as resetting the CMOS or removing the CMOS battery, as the password is stored independently of UEFI or BIOS settings.</p> <p>In the rare case that an attacker bypasses the TCG OPAL protection, BitLocker's multi-layered protection mechanisms provide an additional line of defense. The attacker would still need to circumvent the following:</p> <ol> <li> <p>The USB flash drive used to unlock the OS boot mechanism.</p> </li> <li> <p>The pre-boot PIN, which can be 20-characters alphanumeric passphrase, including spaces and symbols.</p> </li> <li> <p>The TPM: The SSD must be connected to the same machine due to the tight coupling with the Trusted Platform Module (TPM).</p> </li> </ol> <p>If any one of these factors is not satisfied, the attacker would be forced to provide a 48-character recovery password to unlock the boot process, further complicating their efforts.</p> <p></p> <p>Note</p> <p>BitLocker employs software-based encryption using the <code>XTS-AES-256</code> algorithm. This approach is distinct from the hardware encryption provided by TCG OPAL. Alternatively, BitLocker can leverage TCG OPAL's hardware encryption directly. However, we intentionally maintain these as separate layers to enhance security.</p> <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#what-if-laptop-was-turned-on-or-in-sleep-mode-when-it-was-stolen","title":"What if Laptop Was Turned On or in Sleep Mode When It Was Stolen?","text":"<p>Attacker may attempt to exfiltrate sensitive data directly from the system's memory. This type of attack, also known as an in-memory attack, is a serious concern, as data such as encryption keys or authentication credentials may reside in RAM while the system is active. However, modern CPUs have built-in Total Memory Encryption (TME) capabilities to mitigate this risk. TME encrypts the contents of memory at runtime using industry-standard AES-XTS algorithms, as defined by NIST, ensuring that all data stored in RAM is encrypted while the system is running, providing data protection in transit just like what TLS does for network connections. This means that even if an attacker gains physical access to the laptop's memory, they will not be able to retrieve unencrypted data or keys, as everything in memory is automatically encrypted at all times.</p> <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#backup-strategies","title":"Backup Strategies","text":"<p>While these robust security mechanisms such as TCG OPAL encryption and BitLocker offer a formidable defense against unauthorized access, you're still responsible to maintain regular backups of your data, even more than before. Take advantage of cloud-based solutions such as OneDrive for Business, SharePoint, or offsite backups to ensure your data remains safe and recoverable, even in the event of hardware theft or failure.</p> <p>By leveraging these layered security measures, organizations can ensure their data remains encrypted and protected, significantly reducing the risk of unauthorized access and data loss.</p> <p></p> <p>Note</p> <p>While TCG OPAL self-encrypting drives (SEDs) are often associated with enterprise and corporate client environments, this should not discourage individual users or small businesses from considering them. If your security requirements demand stronger encryption and protection, don't let the \"enterprise\" label limit your options.</p> <p></p> <p>The following chart is organized by the order of access available to an attacker. The outermost layer is at the top, and as we move downward, each layer must be breached before the attacker can progress to the next.</p> <p></p> Difficulty 1-10 Offensive Action Defensive Action 10 Attempting to read the PBA encryption key or BitLocker encryption key from memory during runtime Total Memory Encryption safeguards data in transit, making it inaccessible 10 Attempting to boot the laptop TCG Storage Password (PBA) is required before the system can start 10 Clearing CMOS, removing the CMOS battery, or depriving the system of power TCG Storage Password (PBA) remains unaffected and required. Additionally, this action breaks the compatibility between Secure Boot, TPM, and BitLocker's TPM key protector, causing BitLocker to prompt for the 48-character recovery password 10 Reconnecting the SED to another (incompatible) device The drive won't be recognized, either during boot or within the OS (whether Windows or Linux) 10 Reconnecting the SED to another (compatible) device Requires the TCG Storage Password (PBA) for authentication 10 Attempting to reset the UEFI password via CMOS reset or external buttons This action breaks the trust between TPM and BitLocker key protectors, causing BitLocker to prompt for the 48-character recovery password. The TCG Storage Password (PBA) remains unaffected and still required 10 Attempting to modify UEFI settings, such as disabling Secure Boot, TPM, or any other configuration UEFI settings can be set to Read-Only due to the deployment of the signed App Control policy, preventing changes even after multiple reboots 10 Attempting BitLocker pre-boot authentication Requires triple-factor authentication: Pre-boot PIN, TPM, and a security key on a USB drive 10 Booting a live OS from USB and attempting to remove the Signed App Control policy by deleting/formatting the EFI partition or removing the individual CIP file While the policy will be removed and App Control disabled, the attacker must still bypass BitLocker. The EFI partition is not encrypted by BitLocker but is protected by TCG OPAL encryption, which is assumed to have been bypassed at this point in chart. This action also triggers BitLocker to prompt for the 48-character recovery password due to Secure Boot 10 Trying to guess the PIN Activates the TPM's anti-hammering mechanism, causing each subsequent failed PIN attempt to experience progressively longer delays, as the TPM enforces increasing time intervals between attempts (which is only 1 part of the triple authentication) 9 Attacker attempts to exfiltrate data from non-OS drives Each drive is BitLocker-encrypted and requires a unique 48-character recovery password to access 8 After bypassing all previous protections and layers, attacker reaches the Windows lock screen Additional anti-hammering features and policies, implemented through the Harden Windows Security project, limit incorrect PIN attempts to three within a 24-hour period. A fourth failed attempt within this timeframe triggers a total lockdown, requiring the 48-character BitLocker recovery password to regain access 8 Attacker attempts to perform an administrative task No local administrator account exists; the device is managed remotely via Microsoft Entra ID, and the local user only has Standard privileges 8 Attacker attempts to run unauthorized software Blocked by the Signed App Control policy (Unless the policy was removed previously from the EFI partition) 9 Attacker attempts to execute any type of malware early in the boot process Blocked by the Signed App Control policy, which executes earlier in the boot sequence (Unless the policy was removed previously from the EFI partition) 9 Attacker attempts to remove the signed app control policy Makes the OS unbootable (Unless the policy was removed previously from the EFI partition) <p></p>"},{"location":"WDAC/The%20Strength%20of%20Signed%20App%20Control%20Policies/#summary","title":"Summary","text":"<p>The protection of initial access and root/superuser/administrator privileges is fundamental to system security. Without securing these high-level access points, other security measures become secondary. These privileged roles are essential for any configurable system, as they enable the management and customization of hardware and security settings. However, there are consumer-level systems such as the Xbox Series X/S that do not have these highly-privileged accounts. These are designed as secure black boxes, not only to protect the user from malware but also to safeguard the hardware from user intervention, creating a vastly different threat model.</p> <p>In contrast, on conventional computer systems, root/administrator privileges are necessary to maintain control over system security. Threat actors recognize the value of gaining these privileges, as it allows them to manipulate system security to their advantage. However, with Windows' multi-layered security infrastructure, which integrates both hardware and software protections, we can effectively thwart these efforts. Each defense layer can be made increasingly difficult and time-consuming for attackers to bypass, creating an almost insurmountable challenge. As cyber threats continue to evolve and adversaries grow more sophisticated, systems must adapt to provide robust, tamper-resistant defenses described in this article.</p> <p></p> <p>Tip</p> <p>Continue reading:</p> <ul> <li> <p>Penetration Testing and Benchmarking</p> </li> <li> <p>Deploying Signed App Control policies</p> </li> <li> <p>Creating Code Signing Certificate via AppControl Manager</p> </li> <li> <p>Only a Small Portion of The Windows OS Security Apparatus</p> </li> <li> <p>RuntimeEncryption of Memory With Intel\u00ae Total Memory Encryption - Multi-Key</p> </li> <li> <p>TCG Storage Opal Integration Guidelines</p> </li> <li> <p>Trusted Computing Group and NVM Express Joint White Paper: TCG Storage, Opal, and NVMe</p> </li> <li> <p>All other TCG articles related to OPAL</p> </li> <li> <p>An example of a CPU supporting Total Memory Encryption - Multi Key - Intel 14700k</p> </li> </ul> <p></p>"},{"location":"WDAC/WDAC%20Notes/","title":"Important Notes and Tips about App Control policies","text":"<ul> <li>App Control for Business was formerly known as WDAC (Windows Defender Application Control)</li> <li>It's used for Application and File whitelisting in Windows.</li> </ul>"},{"location":"WDAC/WDAC%20Notes/#supplemental-app-control-policy-considerations","title":"Supplemental App Control Policy Considerations","text":""},{"location":"WDAC/WDAC%20Notes/#verify-policy-type","title":"Verify Policy type","text":"<p>We have to make sure the App Control policy that we are going to use as a supplemental policy has <code>PolicyType=\"Supplemental Policy\"</code> in the <code>SiPolicy</code> element of the XML file. If it doesn't, then we have to use this command to change it from base policy to supplemental policy of our base policy.</p> <p>That will also change/create the <code>&lt;BasePolicyID&gt;GUID&lt;/BasePolicyID&gt;</code> element in the supplemental policy XML file. The GUID will be the <code>PolicyID</code> of the base policy specified in the command.</p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#verify-policy-rule-options","title":"Verify Policy Rule options","text":"<p>We have to make sure that the supplemental policy does not contain any policy rule options that only work with a base policy. This chart shows which ones can be used in a supplemental policy.</p> <p>You can use this PowerShell code to automatically make sure non-supplemental policy rule options don't exist in a supplemental policy XML file:</p> <pre><code>[System.String]$SupplementalPolicyPath = \"&lt;Path to SupplementalPolicy.xml&gt;\"\n@(0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 15, 16, 17, 19, 20) | ForEach-Object -Process {\n    Set-RuleOption -FilePath $SupplementalPolicyPath -Option $_ -Delete\n}\n</code></pre> <p></p> <p>A supplemental policy can only have these policy rule options:</p> <ul> <li>5 Enabled:Inherit Default Policy</li> <li>6 Enabled:Unsigned System Integrity Policy (Default)</li> <li>7 Allowed:Debug Policy Augmented</li> <li>13 Enabled:Managed Installer</li> <li>14 Enabled:Intelligent Security Graph Authorization</li> <li>18 Disabled:Runtime FilePath Rule Protection</li> </ul> <p></p>"},{"location":"WDAC/WDAC%20Notes/#deny-rules-in-supplemental-policy-are-invalid","title":"Deny Rules in Supplemental Policy Are Invalid","text":"<p>Deny rules are ignored in supplemental policies by the App Control engine. Supplemental policies are only meant to expand what the base policy trusts, that's why only allow rules are supported in supplemental policies, and that's also the reason why we don't need to merge Microsoft recommended block rules or driver block rules with a supplemental policy.</p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#rule-precedence","title":"Rule Precedence","text":"<p>When the base policy has a deny rule for a file and we allow the same file in a supplemental policy, the file will still be blocked, because explicit deny rules have the highest priority.</p> <p>More info</p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#signing-a-supplemental-policy","title":"Signing a Supplemental Policy","text":"<p>Suppose you have a base policy which will subsequently have supplemental policies. To add the details of the code signing certificate to the base policy, ensuring its readiness for signing, you need to use the <code>-Supplemental</code> switch parameter with the Add-SignerRule cmdlet. Failing to do so would render the signed base policy, post-deployment, incapable of accepting any signed supplemental policies. Note that the <code>-Supplemental</code> parameter is exclusively applicable to base policies.</p> <p>Important</p> <p>Using <code>-Supplemental</code> parameter with <code>Add-SignerRule</code> cmdlet on a Supplemental policy will cause boot failure after deploying it, because that parameter should only be used when adding signer rules to a base policy.</p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#removing-supplemental-policies","title":"Removing Supplemental Policies","text":"<p>Whether the deployed supplemental policy is unsigned or signed, you can remove it just like any unsigned policy using CITool.</p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#what-if-you-deployed-an-unsigned-supplemental-policy-for-a-signed-base-policy","title":"What if You Deployed an Unsigned Supplemental Policy for a Signed Base Policy?","text":"<p>If you deploy an unsigned supplemental policy on a system where all policies including base and supplemental, are signed, the deployed unsigned supplemental policy will be ignored.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#how-deny-rules-for-files-and-certificatessigners-are-specified","title":"How Deny Rules for Files and Certificates/Signers Are Specified","text":""},{"location":"WDAC/WDAC%20Notes/#denied-file-rules","title":"Denied File Rules","text":"<p>First, Block/Deny File rules are specified in the <code>&lt;FileRules&gt;</code> node which is directly under the <code>&lt;SiPolicy&gt;</code> node in the XML file. Deny rules are created by having <code>&lt;Deny ID=\"ID_DENY_\"</code> at the beginning of their lines. For example:</p> <pre><code>&lt;Deny ID=\"ID_DENY_AGENT64_SHA1\" FriendlyName=&lt;Textual Description/Name&gt; Hash=&lt;Hash Numbers&gt; /&gt;\n</code></pre> <p></p> <p>Second, there are File Reference rules for each Deny rule that only mentions them by ID, and these are exactly the same as Allow rules because only Rule IDs are mentioned and nothing about the nature of the rule itself. These are in:</p> <pre><code>&lt;SiPolicy&gt;\n    &lt;SigningScenarios&gt;\n        &lt;SigningScenario&gt;\n            &lt;ProductSigners&gt;\n                &lt;FileRulesRef&gt;\n                    &lt;FileRuleRef RuleID=\"&lt;The same ID of the Deny File rule mentioned earlier&gt;\" /&gt;\n                &lt;/FileRulesRef&gt;\n            &lt;/ProductSigners&gt;\n        &lt;/SigningScenario&gt;\n    &lt;/SigningScenarios&gt;\n&lt;/SiPolicy&gt;\n ```\n\n&lt;br&gt;\n\n### Denied Certificates/Signer\n\nDenied certificates/signers are first mentioned in `&lt;SiPolicy` =&gt; `&lt;Signers&gt;` with the following syntax:\n\n```xml\n&lt;Signer ID=\"ID_SIGNER_VERISIGN_2010\" Name=\"VeriSign Class 3 Code Signing 2010 CA\"&gt;\n... Other possible elements ...\n&lt;/Signer&gt;\n</code></pre> <p>Unlike file rules, this first part doesn't specify whether the certificate/signer must be allowed or blocked by the App Control policy.</p> <p>In order to specify whether a certificate/signer should be denied/allowed, the ID of each signer must be specified in the second part of the XML policy file in <code>&lt;DeniedSigners&gt;</code> element:</p> <pre><code>&lt;SigningScenarios&gt;\n    &lt;SigningScenario Value=\"131\" ID=\"ID_SIGNINGSCENARIO_&lt;Some generic String&gt;\" FriendlyName=\"&lt;Name&gt;\"&gt;\n        &lt;ProductSigners&gt;\n            &lt;DeniedSigners&gt;\n                &lt;DeniedSigner SignerId=\"&lt;ID of the Signer mentioned above in the &lt;Signers&gt; section&gt;\" /&gt;\n            &lt;/DeniedSigners&gt;\n        &lt;/ProductSigners&gt;\n    &lt;/SigningScenario&gt;\n&lt;/SigningScenarios&gt;\n</code></pre>"},{"location":"WDAC/WDAC%20Notes/#guidance-on-creating-app-control-deny-policies","title":"Guidance on Creating App Control Deny Policies","text":""},{"location":"WDAC/WDAC%20Notes/#how-to-verify-the-status-of-user-mode-and-kernel-mode-application-control-on-the-system","title":"How to Verify the Status of User-Mode and Kernel-Mode Application Control on the System","text":""},{"location":"WDAC/WDAC%20Notes/#using-powershell","title":"Using PowerShell","text":"<pre><code>Get-CimInstance -ClassName Win32_DeviceGuard -Namespace root\\Microsoft\\Windows\\DeviceGuard | select -Property *codeintegrity* | fl\n</code></pre> <p><code>2</code> means Enforced, <code>1</code> means Audit mode, <code>0</code> means Disabled/Not running.</p>"},{"location":"WDAC/WDAC%20Notes/#using-system-information","title":"Using System Information","text":"<p> <ul> <li>App Control for Business Policy (Kernel Mode)</li> <li>App Control for Business User Mode Policy (User Mode)</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#refreshing-app-control-policies","title":"Refreshing App Control Policies","text":""},{"location":"WDAC/WDAC%20Notes/#using-the-built-in-citool","title":"Using the built-in CiTool","text":"<pre><code>CITool --refresh\n</code></pre> <p>Old Method: using RefreshPolicy(AMD64).exe</p> <p>Note</p> <p>When a Supplemental policy is removed from the system and you refresh the policies, that doesn't instantly block the apps that were allowed by the removed policy, simply because those apps might be still running on the system, either in the background or foreground. To properly stop them, a system restart is required.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#about-signingscenarios-node-in-the-app-control-policy-xml","title":"About <code>&lt;SigningScenarios&gt;</code> Node in the App Control Policy XML","text":"<p>It consists of 2 elements:</p> <p>This one contains the Certificates/Signers of the Kernel-mode drivers</p> <pre><code>&lt;SigningScenario Value=\"131\" ID=\"ID_SIGNINGSCENARIO_DRIVERS_1\" FriendlyName=\"Driver Signing Scenarios\"&gt;\n</code></pre> <p>And this one contains the Certificates/Signers of the User-mode binaries</p> <pre><code>&lt;SigningScenario Value=\"12\" ID=\"ID_SIGNINGSCENARIO_WINDOWS\" FriendlyName=\"User Mode Signing Scenarios\"&gt;\n</code></pre> <p>Only the <code>Value</code> needs to stay the same. So, for Kernel-mode drivers it should always be 131 and for User-mode binaries it should always be 12, anything else can be customized, this is according to the CI policy schema.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#merging-policies","title":"Merging Policies","text":"<p><code>Merge-cipolicy</code> cmdlet does not include duplicates, neither duplicate rules nor rules with duplicate file hashes.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#app-control-forces-allow-list-architecture-by-nature","title":"App Control Forces Allow-list Architecture by Nature","text":"<p>App Control forces Allow-list architecture by nature, not deny-list architecture. An empty deployed policy allows nothing to run and leads to system failure. This is why Microsoft recommended blocklists include 2 Allow All rules with the Deny rules, that changes the App Control policy's nature from being an Allow-list to being a Deny-list.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#about-microsoft-recommended-block-rules","title":"About Microsoft Recommended Block Rules","text":""},{"location":"WDAC/WDAC%20Notes/#how-to-manually-consume-the-microsoft-recommended-block-rules","title":"How to Manually Consume the Microsoft Recommended Block Rules","text":"<p>From Microsoft recommended block rules document, copy the App Control policy XML at the end (you might need to expand that section to view it), use a text editor like VS Code to edit it as recommended:</p> <p>The blocklist policy includes \"Allow all\" rules for both kernel and user mode files that make it safe to deploy as a standalone App Control policy or side-by-side any other policy by keeping its allow all rules in place. Refer to this document about how multiple base policies work.</p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#how-do-the-allow-all-rules-work","title":"How Do the Allow All Rules Work","text":"<p>Only applications allowed by all Base policies run without generating block events, that means even though the Microsoft recommended block rules have 2 allow all rules, they don't actually allow everything to run, because for instance in a realistic scenario, the same allow all rules don't exist in other base policies such as AllowMicrosoft or DefaultWindows base policy, they would only contain explicit allow rules.</p> <p>The policy must be in multiple policy format, which can be achieved by using the <code>Set-CiPolicyIdInfo</code> cmdlet with the <code>-ResetPolicyId</code> switch.</p> <p></p> <p>Important</p> <p>If merging into an existing policy that includes an explicit allowlist, you should first remove the two \"Allow all\" rules and their corresponding FileRuleRefs:</p> <pre><code>&lt;Allow ID=\"ID_ALLOW_A_1\" FriendlyName=\"Allow Kernel Drivers\" FileName=\"*\" /&gt;\n&lt;Allow ID=\"ID_ALLOW_A_2\" FriendlyName=\"Allow User mode components\" FileName=\"*\" /&gt;\n</code></pre> <pre><code>&lt;FileRuleRef RuleID=\"ID_ALLOW_A_1\" /&gt;\n&lt;FileRuleRef RuleID=\"ID_ALLOW_A_2\" /&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20Notes/#microsoft-recommended-driver-block-rules","title":"Microsoft Recommended Driver Block Rules","text":"<ul> <li> <p>Deploying Microsoft recommended block rules (Driver or user mode) alone, after removing the allow all rules from them, will cause boot failure, for obvious reasons.</p> </li> <li> <p>How to check the version of the deployed Microsoft recommended driver block rules</p> </li> <li> <p>The version is mentioned in Code Integrity operational event logs with an event ID of <code>3099</code> in the General tab.</p> </li> <li> <p>We don't need to merge and use the Microsoft recommended driver block rules in a policy, because it's already being enforced by default and if we want to update it more regularly, we can do so by following this section of the document. Or by Fast and Automatic Microsoft Recommended Driver Block Rules updates.</p> </li> </ul> <p></p> <p>Citation: If you only manage Windows 11 22H2 systems (and above), then you don't need the recommended driver block rules in your App Control policy. Otherwise, you should have the driver block rules in your policy. In either scenario, you should have the recommended user mode rules.</p> <p></p> <p>Citation: ISG does not include the recommended blocklist(s).</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#miscellaneous","title":"Miscellaneous","text":"<ul> <li> <p>Set the hypervisor Code Integrity option for the App Control policy XML file to Strict only after using <code>Add-SignerRule</code> cmdlet, because after running <code>Add-SignerRule</code> cmdlet, the <code>&lt;HvciOptions&gt;</code> resets to <code>0</code>.</p> </li> <li> <p>Using Signtool.exe with <code>-fd certHash</code> will default to the algorithm used on the signing certificate. For example, if the certificate has <code>SHA512</code> hashing algorithm, the file that is being signed will use the same algorithm.</p> </li> <li> <p>Sometimes New-CIPolicy Cmdlet creates 2 file rules for each driver file, such as <code>.sys</code> files. One of them is stored in Driver signing scenarios section under SigningScenario with the value <code>131</code> and the other one is stored in User mode signing scenarios section under SigningScenario with the value <code>12</code>. More info here</p> </li> <li> <p>File rule levels and Cmdlets like New-CiPolicy only create rules for files with supported extensions. The table in this page lists all of the support file extensions.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#blocking-individual-windows-components","title":"Blocking Individual Windows components","text":""},{"location":"WDAC/WDAC%20Notes/#blocking-microsoft-store","title":"Blocking Microsoft Store","text":"<pre><code>$Package = Get-AppXPackage -Name \"Microsoft.WindowsStore\"\n$Rules += New-CIPolicyRule -Package $Package -Deny\nNew-CIPolicy -FilePath \".\\store.xml\" -Rules $Rules\n</code></pre>"},{"location":"WDAC/WDAC%20Notes/#how-to-remove-flight-signing-certificates-from-default-example-policies","title":"How to Remove Flight Signing Certificates From Default Example Policies","text":"<p>Removing these do not cause any problem as long as your Windows build is in the Stable, Release Preview or Beta channel.</p> <pre><code># Flight root Certs removal\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_STORE_FLIGHT_ROOT\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_WINDOWS_FLIGHT_ROOT\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_ELAM_FLIGHT\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_HAL_FLIGHT\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_WHQL_FLIGHT_SHA2\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_WINDOWS_FLIGHT_ROOT_USER\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_ELAM_FLIGHT_USER\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_HAL_FLIGHT_USER\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_WHQL_FLIGHT_SHA2_USER\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_RT_FLIGHT\"\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#how-to-remove-app-control-policy-refresh-tool-certificates-from-default-example-policies","title":"How to Remove App Control Policy Refresh Tool Certificates From Default Example Policies","text":"<p>Starting with Windows 11 22H2, CITool is available in Windows by default and Refresh tool is no longer needed, so use the commands below to remove the certificates that allow that tool to be executed, their order of execution is important.</p> <ul> <li>Remove-CIPolicyRule</li> <li>Note</li> </ul> <pre><code>Remove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_MICROSOFT_REFRESH_POLICY\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_FILEATTRIB_REFRESH_POLICY\"\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#allowing-questionable-software-in-an-app-control-policy","title":"Allowing Questionable Software in an App Control Policy","text":"<p>Questionable software such as pirated software are never recommended to be allowed in the App Control policy because they are tampered with. Pirated software can have signed files too, but they are modified and as a result there is a mismatch between the file hash and the hash of the file saved in their digital signature. When such a mismatch exists for signed files, Authenticode reports the mismatch, and the file can't be allowed in an App Control policy.</p> <p>If you want to go through many files and see which ones have a mismatch between their file hash and signature hash, you can use the following PowerShell command, it searches through a folder and all of its sub-folders quickly.</p> <p></p> <pre><code>Foreach ($File in (Get-ChildItem -Path 'Path\\To\\a\\Folder' -File -Recurse)) {\n    $Signature = Get-AuthenticodeSignature -FilePath $File.FullName\n    if ($Signature.Status -eq 'HashMismatch') {\n        Write-Output -InputObject $File.FullName\n    }\n}\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#performing-system-reset-while-signed-app-control-policy-is-deployed","title":"Performing System Reset While Signed App Control Policy Is Deployed","text":"<p>If you've deployed a Signed App Control policy on a system and then decide to reset it, either using local install or cloud download, it will fail during the reset process. You must remove the signed App Control policy prior to performing the reset.</p> <p>Unsigned App Control policies don't have this behavior. Since they are neither cryptographically signed nor tamper-proof, they will be removed during the reset process and after reset the system will not have the App Control policy.</p> <p>This behavior is true for Lightly managed, Allow Microsoft and Default Windows App Control policy types.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#the-cip-binary-file-can-have-any-name-or-no-name-at-all","title":"The .CIP Binary File Can Have Any Name or No Name at All","text":"<p>Using CiTool in Windows 11 build <code>22621</code> and above, <code>.CIP</code> binary files can be deployed with any name, even without a name, and lead to a successful App Control policy deployment.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#policies-with-requiredev-signers-rule-option","title":"Policies with Required:EV Signers rule option","text":"<p>If a base policy has rule option number 8, Required:EV Signers, it will require all kernel-mode drivers to have EV signer certificates.</p> <ul> <li> <p>You cannot bypass this requirement with a Supplemental policy.</p> </li> <li> <p>You cannot allowlist non-EV signed files in any way.</p> </li> <li> <p>Non-EV signed files will be blocked even if the base policy is in Audit mode. This is true for any type of base policy such as Default Windows, Allow Microsoft, Strict Kernel mode etc.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#the-following-policy-rule-options-only-apply-to-user-mode-binariesdrivers","title":"The Following Policy Rule Options Only Apply to User Mode Binaries/Drivers","text":"<ul> <li> <p>Enabled:Dynamic Code Security (generation)</p> </li> <li> <p>Required:Enforce Store Applications</p> </li> </ul> <p>When we remove the <code>SigningScenario Value=\"12\"</code> completely which is responsible for User Mode code integrity in the xml policy and also remove any signers that belong to User mode section, such as those that have <code>_user</code> in their ID, the Merge-CIPolicy cmdlet automatically removes EKUs that belong to the policy rule options mentioned above during a merge.</p> <p>Removing the User mode signers, rules and <code>Enabled:UMCI</code> rule option allows us to create a Kernel-only App Control policy that doesn't touch User mode binaries/drivers.</p> <p>For a Kernel-mode only App Control policy, only the following EKUs are necessary</p> <pre><code>&lt;EKUs&gt;\n    &lt;EKU ID=\"ID_EKU_WINDOWS\" Value=\"010A2B0601040182370A0306\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_ELAM\" Value=\"010A2B0601040182373D0401\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_HAL_EXT\" Value=\"010a2b0601040182373d0501\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_WHQL\" Value=\"010A2B0601040182370A0305\" FriendlyName=\"\" /&gt;\n&lt;/EKUs&gt;\n</code></pre> <p>Important</p> <p>Refer to this document for complete info about Kernel-Mode policies</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#you-can-merge-the-same-policy-xml-file-with-itself","title":"You Can Merge the Same Policy XML File With Itself","text":"<p>In order to automatically remove unnecessary things from a policy file, such as the EKUs mentioned earlier, you can run a command like this:</p> <pre><code>Merge-CIPolicy .\\Policy.xml -OutputFilePath .\\Policy1.xml\n</code></pre> <p>It essentially merges a policy with itself, adding <code>_0</code> to each ID and SignerID of the xml nodes.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#-audit-parameter-of-the-configci-cmdlets","title":"-Audit Parameter of the ConfigCi Cmdlets","text":"<p>When you use <code>-Audit</code> parameter of ConfigCI cmdlets such as Get-SystemDriver and New-CIPolicy, these 2 event logs are scanned</p> <ol> <li>AppLocker \u2013 MSI and Script event log</li> <li>CodeIntegrity - Operational</li> </ol> <p>Explained more in here</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#about-double-signed-files-and-filepublisher-level","title":"About Double-Signed Files and Filepublisher Level","text":"<p>Sometimes there are files that are signed by 2 or more certificates, aka double signed files.</p> <p>When a level such as FilePublisher is used, ConfigCI cmdlets create signer rules for one of the intermediate certificates of each of the signers of those files.</p> <p>Depending on Kernel or use mode, 2 Allowed Signers are created for the file in either UMCI or KMCI Signing scenario sections.</p> <p>However, if the file is a kernel mode driver and user mode driver, then 4 signers are created for it, 2 Allowed Signers in the UMCI Signing Scenario and 2 in the KMCI Signing scenario.</p>"},{"location":"WDAC/WDAC%20Notes/#an-example","title":"An example","text":"<p>In the signer below</p> <pre><code>&lt;Signer ID=\"ID_SIGNER_F_2\" Name=\"Microsoft Windows Third Party Component CA 2014\"&gt;\n    &lt;CertRoot Type=\"TBS\" Value=\"D8BE9E4D9074088EF818BC6F6FB64955E90378B2754155126FEEBBBD969CF0AE\" /&gt;\n    &lt;CertPublisher Value=\"Microsoft Windows Hardware Compatibility Publisher\" /&gt;\n    &lt;FileAttribRef RuleID=\"ID_FILEATTRIB_F_46\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <ul> <li> <p><code>Name=\"Microsoft Windows Third Party Component CA 2014\"</code> is the Common Name of one of the Intermediate certificate of the file.</p> </li> <li> <p><code>Value=\"D8BE9E4D9074088EF818BC6F6FB64955E90378B2754155126FEEBBBD969CF0AE\"</code> is the TBS (To Be Signed) values of the same Intermediate certificate.</p> </li> <li><code>Value=\"Microsoft Windows Hardware Compatibility Publisher\"</code> is the Common Name of the Leaf certificate of the file.</li> </ul> <p></p>"},{"location":"WDAC/WDAC%20Notes/#some-notes","title":"Some Notes","text":"<ol> <li> <p>If 2 files have the same Leaf certificate CN and also have an Intermediate Certificate in common (that has the same TBS and CN) then they should be listed under the same Signer.</p> </li> <li> <p>Any Intermediate certificate in the certificate chain/path of a file can be used to allow a file using FilePublisher level.</p> </li> <li> <p>In case of a multi-certificate signed file, such as the Office installer which is triple-signed, any of the certificates can be used to allow the file in a Supplemental policy or Deny it in a base policy.</p> </li> </ol> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#what-does-hvci-option-set-to-strict-mean","title":"What Does HVCI option Set to Strict Mean?","text":"<p>HVCI stands for Hypervisor-protected Code Integrity and it is a feature that uses virtualization-based security (VBS) to protect the Windows kernel from memory attacks. HVCI can be set to different options in an App Control policy, such as Enabled, DebugMode, or Strict.</p> <p>Setting HVCI to Strict in an WDApp ControlAC policy provides the highest level of protection for kernel mode code integrity, as it enforces these additional restrictions:</p> <ul> <li> <p>It prevents unsigned drivers from loading, even if they are allowed by the App Control policy. It prevents drivers that are not compatible with HVCI from loading, even if they are signed and allowed by the App Control policy.</p> </li> <li> <p>It prevents drivers that have been tampered with or modified from loading, even if they are signed and allowed by the App Control policy.</p> </li> <li> <p>Setting HVCI to Strict in an App Control policy can help prevent malware or attackers from exploiting vulnerabilities in kernel mode drivers or bypassing the App Control policy enforcement.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#about-certificates-and-certificate-chains","title":"About Certificates and Certificate Chains","text":"<ul> <li> <p>A file can have only one root certificate at the end of the chain. The root certificate is always self-signed by the CA itself (meaning its IssuerCN and SubjectCN are the same) and it is the ultimate source of trust for the chain that validates it. Having more than one root certificate would imply that there are multiple chains of trust for the same file, which is not possible.</p> </li> <li> <p>A file can have more than 1 intermediate certificate and there is no definitive limit for it, but in practice, it is recommended to keep the certificate chain as short as possible.</p> </li> <li> <p>A file can have only one leaf certificate at the beginning of the chain. The leaf certificate is the one that belongs to the file itself and contains its public key and other information. Having more than one leaf certificate would imply that there are multiple files with different identities and keys, which is not possible.</p> </li> <li> <p>Leaf, intermediate and root are the only types of certificates a file can have in a certificate chain. There are other types of certificates that are not part of a chain, such as self-signed certificates or wildcard certificates, but they are not relevant to App Control policies.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#msi-files-and-their-applicable-rule-levels","title":"MSI Files and Their Applicable Rule Levels","text":"<p>MSI files cannot be allowed using FilePublisher rule level because they are not PEs and do not have the necessary attributes (Such as file version, original file name, product name, file description and so on) of the PEs (Portable Executable) in order to create FilePublisher/SignedVersion rules for them, so they need to be allowed by other levels such as Publisher or Hash.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#the-length-of-the-ids-in-the-policy-xml-file-has-no-effect-on-the-size-of-the-generated-cip-file","title":"The Length of the IDs in the policy XML file has no effect on the size of the generated CIP file","text":"<p>It doesn't matter how long or short the IDs are in the policy XML file, such as Signer IDs, Allowed Signer IDs, CiSigner IDs and so on, you can even use GUIDs as IDs to make sure they stay unique, the size of the generated CIP file will not change. In fact, even the hash of the generated CIP file stays the same when you change the length of the IDs in the policy XML file.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#continue-reading-about-byovd-protection-with-app-control-for-business","title":"Continue reading about BYOVD protection with App Control for Business","text":""},{"location":"WDAC/WDAC%20Notes/#app-control-policy-for-byovd-kernel-mode-only-protection","title":"App Control policy for BYOVD Kernel mode only protection","text":""},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/","title":"App Control Rule Levels Comparison and Guide","text":"<p>This document lists all of the levels of App Control rules. From Top to bottom, from the most secure to the least secure, the levels are:</p>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#hash","title":"Hash","text":"<ul> <li> <p>File's SHA2-256 Authenticode hash</p> </li> <li> <p>File's SHA2-256 Page hash</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#whqlfilepublisher","title":"WHQLFilePublisher","text":"<ul> <li> <p>One of the Intermediate certificates of the file</p> </li> <li> <p>Leaf certificate of the file</p> </li> <li> <p>File's version</p> </li> <li> <p>Another attribute of the file (FileDescription, InternalName, OriginalFileName, PackageFamilyName, ProductName, Filepath)</p> </li> <li> <p>File's WHQL EKU OID</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#filepublisher","title":"FilePublisher","text":"<ul> <li> <p>One of the Intermediate certificates of the file</p> </li> <li> <p>Leaf certificate of the file</p> </li> <li> <p>File's version</p> </li> <li> <p>Another attribute of the file (FileDescription, InternalName, OriginalFileName, PackageFamilyName, ProductName, Filepath)</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#whqlpublisher","title":"WHQLPublisher","text":"<ul> <li> <p>One of the Intermediate certificates of the file</p> </li> <li> <p>Leaf certificate of the file</p> </li> <li> <p>File's WHQL EKU OID</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#signedversion","title":"SignedVersion","text":"<ul> <li> <p>One of the Intermediate certificates of the file</p> </li> <li> <p>Leaf certificate of the file</p> </li> <li> <p>File's version</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#publisher","title":"Publisher","text":"<ul> <li> <p>One of the Intermediate certificates of the file</p> </li> <li> <p>Leaf certificate of the file</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#whql","title":"WHQL","text":"<ul> <li> <p>Intermediate certificate of the file that belongs to Microsoft as part of the WHQL program</p> </li> <li> <p>File's WHQL EKU OID</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#leafcertificate","title":"LeafCertificate","text":"<ul> <li>Leaf certificate of the file</li> </ul>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#pcacertificate","title":"PcaCertificate","text":"<ul> <li>One of the Intermediate certificates of the file</li> </ul>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#rootcertificate","title":"RootCertificate","text":"<ul> <li>One of the Intermediate certificates of the file</li> </ul>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#filename","title":"FileName","text":"<ul> <li>One of the attributes of the file (FileDescription, InternalName, OriginalFileName, PackageFamilyName, ProductName, Filepath)</li> </ul> <p>Important</p> <p>These properties are mutable.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#filepath","title":"FilePath","text":"<ul> <li>Path of the file on disk</li> </ul>"},{"location":"WDAC/WDAC%20Rule%20Levels%20Comparison%20and%20Guide/#about-specificfilenamelevel-options","title":"About SpecificFileNameLevel Options","text":"<p>App Control creates file rules based on file attributes when you scan a folder using a level such as <code>FilePublisher</code>. Each file rule has a <code>MinimumVersion</code> and only one of the six <code>SpecificFileNameLevels</code>.</p> <p>For instance, suppose a folder has 10 signed files with identical signatures and product names (or File Descriptions etc.). In that case, App Control creates a single file rule with the product name (or File Description etc.) and the lowest version of the 10 files. This file rule is sufficient to allow all 10 files.</p> <p>The <code>MinimumVersion</code> is the smallest version among the files with the same signature and SpecificFileNameLevel in the folder.</p> <p>Find more information in Microsoft Learn</p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/","title":"App Control Policy for BYOVD Kernel Mode Only Protection","text":"<p>This scenario involves removing the trust to any Kernel mode driver, whether they are vulnerable or not. It does not affect User-mode binaries or drivers. Any 3rd party software/hardware Kernel mode driver will need to be explicitly allowed. This scenario protects against all BYOVD scenarios and much more.</p> <p>Drivers can access the Kernel which is the core of the operating system. Microsoft requires all drivers to be digitally signed:</p> <ul> <li>Kernel mode Hardware drivers need to be signed with an EV (Extended Validation) certificate.</li> <li>Kernel mode Virtual drivers (such as virtual network adapters) can be signed with a non-EV certificate.</li> </ul> <p>A BYOVD (Bring Your Own Vulnerable Driver) scenario involves exploiting one of the digitally signed drivers that harbors a security flaw to attain direct access to the core of the OS. This attack vector applies to all OSes, not just Windows.</p> <p>People who seek to obtain code signing certificates, even for Extended Validation certificates, are not undergoing proper verification.</p> <ul> <li>Kernel is the key to your kingdom.</li> <li>Do not waste your time playing cat and mouse with threat actors.</li> <li>Do not use blacklisting for highly secure workstations, sensitive environments and such; it\u2019s ineffective and insecure for a high security level.</li> <li>Whitelisting is the proper answer. This entire document and others in this repository, are exactly for this purpose.</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#there-are-3-types-of-kernel-mode-drivers-that-can-run-on-windows","title":"There Are 3 Types of Kernel Mode Drivers That Can Run on Windows","text":""},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#regular-drivers","title":"Regular drivers","text":"<p>A regular signed driver is a driver that has been digitally signed by the developer using a software publisher certificate (SPC) issued by a Microsoft approved Certificate Authority (CA).</p> <p>These are regular signed Kernel mode drivers from 3rd parties that shouldn't be trusted by default in a secure and high-risk environment.</p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#whql-drivers","title":"WHQL drivers","text":"<p>A WHQL driver is a driver that has been tested and certified by Microsoft's Windows Hardware Quality Labs (WHQL). A WHQL driver has passed Microsoft's compatibility tests and can be distributed through Windows Update or other Microsoft-supported channels, while a regular signed driver may not have passed those tests and may not be eligible. A WHQL driver is signed by Microsoft.</p> <p>WHQL drivers have a slightly higher security bar than regular Kernel mode drivers. Any driver updates are required to pass the WHQL testing too.</p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#ev-signed-drivers","title":"EV Signed Drivers","text":"<p>EV signed kernel mode drivers are drivers that have been signed with an extended validation code signing certificate issued by a trusted certificate authority (CA).</p> <p>EV certificates cost more than regular code signing certificates, they require to be on an HSM (to ensure the private key is stored properly) and CAs issuing them only validate that the company of the person requesting them exists. Anyone can get EV certificate as long as they have a HSM and a company, which is not hard to come by, costs about ~100$ to set up in the US as a resident.</p> <p>Sometimes the issuing CA also needs you to send in your driver's license and a picture of you holding it, but things like extended background checks, criminal history check, nationality check, or the proper checks explained in here are not performed.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#what-is-the-solution","title":"What Is the Solution?","text":"<p>We need to establish a Zero-Trust situation by eliminating the default trust to any signed driver and explicitly authorizing each driver that seeks to access the kernel.</p> <p>Numerous applications incorporate drivers that interact with the Kernel. Ordinarily, they are unnoticeable, but if you deploy the App Control policy that we are going to create, in Audit mode, you will be able to observe event logs generated for each of the kernel-mode drivers.</p> <p>By creating a strict kernel mode App Control policy, you will have a powerful security feature at your fingertips.</p> <p>This approach is the kind of future-leading technology you need. You can't afford waiting for analysis to predict malicious behavior or wait for malware to be found and cataloged before something is done about it.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#how-to-make-a-strict-kernel-mode-app-control-policy","title":"How to make a strict Kernel mode App Control policy","text":"<p>We take the Default Windows example policy from <code>C:\\Windows\\schemas\\CodeIntegrity\\ExamplePolicies</code> and remove the following items from it:</p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-the-ekus-section","title":"From the EKUs section","text":"<ul> <li> <p><code>ID_EKU_WHQL</code> which is for WHQL (Windows Hardware Quality Labs), it allows 3rd party drivers that have WHQL certification to run, but since we are making a strict Kernel-mode App Control policy, we want to handpick which Kernel mode drivers get to run on the system.</p> </li> <li> <p><code>\"ID_EKU_RT_EXT\"</code> belongs to Windows Runtime, Usermode only.</p> </li> <li> <p><code>\"ID_EKU_STORE\"</code> for Microsoft Store apps, Usermode only.</p> </li> <li> <p><code>\"ID_EKU_DCODEGEN\"</code> for .NET hardening Dynamic Code Security, user mode only, the linked document mentions it's Usermode too.</p> </li> <li> <p><code>\"ID_EKU_AM\"</code> Usermode only.</p> </li> <li> <p><code>&lt;EKU ID=\"ID_EKU_AM\" FriendlyName=\"AntiMalware EKU -1.3.6.1.4.1.311.76.11.1 \" Value=\"010a2b0601040182374c0b01\" /&gt;</code></p> </li> <li> <p>EKU (Enhanced Key Usage) is a field in a digital certificate that specifies the purposes for which the certificate can be used.</p> </li> <li> <p>The FriendlyName attribute of the EKU is a human-readable name that describes the purpose of the certificate. The FriendlyName also includes the Object Identifier (OID) of the certificate, which is a numeric code that identifies who issued the certificate and what it is for. The OID follows a hierarchical structure, where each dot-separated number represents a level of authority or category.</p> </li> <li> <p>The Value attribute of the EKU, <code>010a2b0601040182374c0b01</code> is a hexadecimal representation of the OID, which is used by App Control to validate the certificate. The Value must match the OID exactly, otherwise App Control will not trust the certificate. It corresponds to the AntiMalware EKU certificate, which has an OID of <code>1.3.6.1.4.1.311.76.11.1</code>.</p> </li> <li> <p>This certificate is used to verify files that are signed by an antimalware vendor whose product is using Protected Process Light (PPL). The AntiMalware EKU does not apply to kernel mode drivers, only to user mode processes that are signed by an antimalware vendor.</p> </li> </ul> <pre><code>&lt;EKU ID=\"ID_EKU_WHQL\" Value=\"010A2B0601040182370A0305\" /&gt;\n&lt;EKU ID=\"ID_EKU_RT_EXT\" Value=\"010a2b0601040182370a0315\" /&gt;\n&lt;EKU ID=\"ID_EKU_STORE\" FriendlyName=\"Windows Store EKU - 1.3.6.1.4.1.311.76.3.1 Windows Store\" Value=\"010a2b0601040182374c0301\" /&gt;\n&lt;EKU ID=\"ID_EKU_DCODEGEN\" FriendlyName=\"Dynamic Code Generation EKU - 1.3.6.1.4.1.311.76.5.1\" Value=\"010A2B0601040182374C0501\" /&gt;\n&lt;EKU ID=\"ID_EKU_AM\" FriendlyName=\"AntiMalware EKU -1.3.6.1.4.1.311.76.11.1 \" Value=\"010a2b0601040182374c0b01\" /&gt;\n</code></pre> <p></p> <p></p> <p>For our strict Kernel-mode-only App Control policy, only the following EKUs are necessary</p> <pre><code>&lt;EKUs&gt;\n    &lt;EKU ID=\"ID_EKU_WINDOWS\" Value=\"010A2B0601040182370A0306\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_ELAM\" Value=\"010A2B0601040182373D0401\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_HAL_EXT\" Value=\"010a2b0601040182373d0501\" FriendlyName=\"\" /&gt;\n&lt;/EKUs&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-the-filerules-section","title":"From the FileRules section","text":"<p>User Mode Refresh policy program</p> <pre><code>&lt;FileAttrib ID=\"ID_FILEATTRIB_REFRESH_POLICY\" FriendlyName=\"RefreshPolicy.exe FileAttribute\" FileName=\"RefreshPolicy.exe\" MinimumFileVersion=\"10.0.19042.0\" /&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-the-signers-section","title":"From the Signers section","text":"<ul> <li>Any Signer with <code>_USER</code> in its ID indicating that it only applies to User Mode binaries/drivers</li> </ul> <ul> <li>Any Signer with <code>_RT</code> in its ID indicating that it belongs to Windows Runtime, which is User mode only.</li> </ul> <pre><code>&lt;Signer ID=\"ID_SIGNER_RT_PRODUCTION\" Name=\"Microsoft Product Root 2010 RT EKU\"&gt;\n    &lt;CertRoot Type=\"Wellknown\" Value=\"06\" /&gt;\n    &lt;CertEKU ID=\"ID_EKU_RT_EXT\" /&gt;\n&lt;/Signer&gt;\n&lt;Signer ID=\"ID_SIGNER_RT_FLIGHT\" Name=\"Microsoft Flighting Root 2014 RT EKU\"&gt;\n    &lt;CertRoot Type=\"Wellknown\" Value=\"0E\" /&gt;\n    &lt;CertEKU ID=\"ID_EKU_RT_EXT\" /&gt;\n&lt;/Signer&gt;\n&lt;Signer ID=\"ID_SIGNER_RT_STANDARD\" Name=\"Microsoft Standard Root 2011 RT EKU\"&gt;\n    &lt;CertRoot Type=\"Wellknown\" Value=\"07\" /&gt;\n    &lt;CertEKU ID=\"ID_EKU_RT_EXT\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <ul> <li> <p>The following WHQL related Signers</p> </li> <li> <p>These are the certificates that Microsoft uses to sign 3rd party OEM drivers</p> </li> <li> <p>They are actually 1 certificate but in 3 different Hashing algorithms</p> </li> </ul> <pre><code>&lt;Signer ID=\"ID_SIGNER_WHQL_SHA2\" Name=\"Microsoft Product Root 2010 WHQL EKU\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"06\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n&lt;/Signer&gt;\n&lt;Signer ID=\"ID_SIGNER_WHQL_SHA1\" Name=\"Microsoft Product Root WHQL EKU SHA1\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"05\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n&lt;/Signer&gt;\n&lt;Signer ID=\"ID_SIGNER_WHQL_MD5\" Name=\"Microsoft Product Root WHQL EKU MD5\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"04\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <ul> <li>And this Signer which allows WHQL for insider builds</li> </ul> <pre><code>&lt;Signer ID=\"ID_SIGNER_WHQL_FLIGHT_SHA2\" Name=\"Microsoft Flighting Root 2014 WHQL EKU\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"0E\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <ul> <li>Test Signer, for when Driver signing test is used, <code>Bcdedit.exe -set TESTSIGNING ON</code></li> </ul> <pre><code>&lt;Signer ID=\"ID_SIGNER_TEST2010\" Name=\"MincryptKnownRootMicrosoftTestRoot2010\"&gt;\n&lt;CertRoot Type=\"Wellknown\" Value=\"0A\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-the-signingscenarios-section","title":"From the SigningScenarios section","text":""},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#in-the-kernel-mode-signing-scenario-block","title":"In the Kernel Mode Signing Scenario block","text":"<ul> <li>Responsible for WHQL Signers we removed above</li> </ul> <pre><code>&lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_SHA2\" /&gt;\n&lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_SHA1\" /&gt;\n&lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_MD5\" /&gt;\n</code></pre> <ul> <li>Responsible for insider builds WHQL signers</li> </ul> <pre><code>&lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_FLIGHT_SHA2\" /&gt;\n</code></pre> <ul> <li>Responsible for Test Signer we removed above</li> </ul> <pre><code>&lt;AllowedSigner SignerId=\"ID_SIGNER_TEST2010\" /&gt;\n</code></pre>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#in-the-user-mode-signing-scenario-block","title":"In the User Mode Signing Scenario block","text":"<p>This entire block should either be removed</p> <pre><code>&lt;!--User Mode Signing Scenario--&gt;\n&lt;SigningScenario Value=\"12\" ID=\"ID_SIGNINGSCENARIO_UMCI\" FriendlyName=\"User Mode Signing Scenario\"&gt;\n  &lt;ProductSigners&gt;\n    &lt;AllowedSigners&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WINDOWS_PRODUCTION_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_ELAM_PRODUCTION_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_HAL_PRODUCTION_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_SHA2_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_SHA1_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_MD5_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WINDOWS_FLIGHT_ROOT_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_ELAM_FLIGHT_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_HAL_FLIGHT_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_FLIGHT_SHA2_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_STORE\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_STORE_FLIGHT_ROOT\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_RT_PRODUCTION\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_DRM\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_DCODEGEN\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_AM\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_RT_FLIGHT\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_RT_STANDARD\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_MICROSOFT_REFRESH_POLICY\" /&gt;\n      &lt;!-- Test signer is trusted by ConfigCI, however, it will not be trusted by CI unless testsigning BCD is set --&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_TEST2010_USER\" /&gt;\n    &lt;/AllowedSigners&gt;\n  &lt;/ProductSigners&gt;\n&lt;/SigningScenario&gt;\n</code></pre> <p>Or replaced with</p> <pre><code>&lt;SigningScenario Value=\"12\" ID=\"ID_SIGNINGSCENARIO_UMCI\" FriendlyName=\"User Mode Signing Scenario\"&gt;\n  &lt;ProductSigners /&gt;\n&lt;/SigningScenario&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#flight-root-signers-optional","title":"Flight root signers - Optional","text":"<p>They can also be removed if you don't intend to use Windows insider builds. They all have <code>flight</code> or <code>_flight</code> in their ID.</p> <p>When removing them, also use the 4 Disabled:Flight Signing policy rule option.</p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-cisigners","title":"From CiSigners","text":"<p>Remove this item which is for Windows Store EKU</p> <pre><code>&lt;CiSigner SignerId=\"ID_SIGNER_STORE\" /&gt;\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#how-to-use-and-automate-this-entire-process","title":"How to Use and Automate This Entire Process","text":"<p>Important</p> <p>Use the AppControl Manager to automatically Audit and deploy the Strict Kernel-mode App Control policies.</p> <p>As mentioned earlier, this policy only enforces and applies to Kernel-mode drivers, so your non-Kernel mode files are unaffected. Keep in mind that Kernel-mode does not mean programs that require Administrator privileges, those 2 categories are completely different. Also, not all drivers are Kernel mode, there are user-mode drivers too.</p> <p>This strict Kernel mode policy can be perfectly deployed side by side any other App Control policy.</p> <p>For instance, since HVCI is turned on by default on my system, the Microsoft Recommended driver block rules is automatically deployed and it's only Kernel mode. It has 2 allow all rules, making it primarily a block-list policy.</p> <p>Then I deploy Strict Kernel-mode App Control policy, which also only applies to Kernel-mode drivers. It doesn't have allow all rules of course, instead it allows Windows components that are required for Windows to function properly to run and then will let you hand pick any 3rd party Kernel-mode drivers and easily allow them in your policy.</p> <p>Now the Allow all rules that exist in the first policy are neutralized. Only applications allowed by both policies run without generating block events., so since the same allow all rules do not exist in our Strict Kernel-mode base policy, they no longer apply.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#what-about-user-mode-binaries","title":"What About User-mode Binaries?","text":"<p>So far, we've only been doing Kernel-mode administration. We can use User-mode App Control policies as well.</p> <p>After using those 2 Kernel-mode policies, we can deploy a 3rd policy which is going to authorize and validate User-mode binaries too, such as the <code>Allow Microsoft</code> policy. This policy applies to both Kernel and User mode files, but since we already know the logic and learned that only applications allowed by all base policies are allowed to run, we're confident that our Strict Kernel-mode base policy is the only one in charge of authorizing and validating Kernel-mode files/drivers.</p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#a-rule-of-thumb","title":"A rule of thumb","text":"<p>The strictest policy wins the race in multiple base policy deployments, which in this case is the Strict Kernel-Mode policy. Even though the <code>Allow Microsoft</code> policy allows all WHQL signed drivers, they still won't be able to run unless the Strict Kernel-Mode policy authorizes them as well, because for a Kernel driver to be allowed to run in this scenario, all base policies must allow it.</p> <p>So only the policy that has the least allow listings in common with all other policies takes priority.</p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#supplemental-policy","title":"Supplemental policy","text":"<p>Each of the deployed policies (except for the automatically deployed block rules by HVCI) support having supplemental policies. So, whenever you feel the need to allow additional files that are Kernel-mode drivers or User-mode binaries, you can add a Supplemental policy for them.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#about-elam-early-launch-anti-malware","title":"About ELAM (Early Launch Anti-Malware)","text":"<p>Anti-malware or antivirus vendors need to sign enforceable and binding legal agreements and develop an early launched anti-malware driver that Microsoft will sign. This driver includes a list of certificate hashes that enable that AV vendor to sign new versions without Microsoft\u2019s involvement each time. When code integrity loads this ELAM driver, it permits any executables signed by the certificates in that list to run as anti-malware light.</p> <ul> <li>Early Launch Anti-Malware Driver Sample</li> <li>ELAM Driver Requirements</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#continue-reading-about-important-app-control-notes","title":"Continue reading about important App Control notes","text":""},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#important-notes-and-tips-about-app-control-policies","title":"Important Notes and Tips about App Control policies","text":""},{"location":"WDACConfig%20Module/Assert-WDACConfigIntegrity/","title":"Assert-WDACConfigIntegrity","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Assert-WDACConfigIntegrity/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Build-WDACCertificate/","title":"Build-WDACCertificate","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/","title":"Confirm-WDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/","title":"ConvertTo-WDACPolicy","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/","title":"Deploy-SignedWDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/","title":"Edit-SignedWDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Edit-WDACConfig/","title":"Edit-WDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Get-CIPolicySetting/","title":"Get-CIPolicySetting","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Get-CIPolicySetting/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Get-CiFileHashes/","title":"Get-CiFileHashes","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Get-CiFileHashes/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/","title":"Get-CommonWDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/","title":"Invoke-WDACSimulation","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/","title":"New-DenyWDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/","title":"New-KernelModeWDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/","title":"New-SupplementalWDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/New-WDACConfig/","title":"New-WDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/","title":"Remove-CommonWDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Remove-WDACConfig/","title":"Remove-WDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/","title":"Set-CommonWDACConfig","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/Test-CiPolicy/","title":"Test-CiPolicy","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/Test-CiPolicy/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"},{"location":"WDACConfig%20Module/WDACConfig/","title":"WDACConfig Module","text":"<p>The WDACConfig module has been deprecated, please refer to the new AppControl Manager application. It has all of the WDACConfig module's feature plus so much more.</p>"},{"location":"WDACConfig%20Module/WDACConfig/#preview-of-the-app","title":"Preview of the App","text":"**YouTube video Link**"}]}